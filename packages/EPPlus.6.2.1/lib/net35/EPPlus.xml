<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EPPlus</name>
    </assembly>
    <members>
        <member name="T:OfficeOpenXml.Attributes.EpplusFormulaTableColumnAttribute">
            <summary>
            Use this attribute on a class or an interface to insert a column with a formula
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusFormulaTableColumnAttribute.Formula">
            <summary>
            The spreadsheet formula (don't include the leading '='). If you use the {row} placeholder in the formula it will be replaced with the actual row of each cell in the column.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusFormulaTableColumnAttribute.FormulaR1C1">
            <summary>
            The spreadsheet formula (don't include the leading '=') in R1C1 format.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Attributes.EpplusIgnore">
            <summary>
            Use this attribute to indicate that the attribute target should be ignored.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Attributes.EpplusNestedTableColumnAttribute">
            <summary>
            Attribute used by <see cref="M:OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0})" /> to support complex type properties/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusNestedTableColumnAttribute.Order">
            <summary>
            Order of the columns value, default value is 0
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusNestedTableColumnAttribute.HeaderPrefix">
            <summary>
            This will prefix all names derived by members in the complex type.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Attributes.EpplusTableAttribute">
            <summary>
            Attribute used by <see cref="M:OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0})" /> to configure parameters for the functions/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Attributes.EpplusTableAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusTableAttribute.TableStyle">
            <summary>
            Table style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusTableAttribute.PrintHeaders">
            <summary>
            If true, there will be a header row with column names over the data
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusTableAttribute.ShowFirstColumn">
            <summary>
            If true, the first column of the table is highlighted
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusTableAttribute.ShowLastColumn">
            <summary>
            If true, the last column of the table is highlighted
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusTableAttribute.ShowTotal">
            <summary>
            If true, a totals row will be added under the table data. This should be used in combination with <see cref="P:OfficeOpenXml.Attributes.EpplusTableColumnAttributeBase.TotalsRowFunction"/> on the column attributes.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusTableAttribute.AutofitColumns">
            <summary>
            If true, column width will be adjusted to cell content
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusTableAttribute.AutoCalculate">
            <summary>
            If true, EPPlus will calculate the table range when the data has been read into the spreadsheet and store the results
            in the Value property of each cell.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Attributes.EpplusTableColumnAttribute">
            <summary>
            Use this attribute on a Method, Property or a Field to set parameters for how an object should be represented when imported to a range.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Attributes.EpplusTableColumnAttributeBase">
            <summary>
            Attribute used by <see cref="M:OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0})" /> to configure column parameters for the functions/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusTableColumnAttributeBase.Order">
            <summary>
            Order of the columns value, default value is 0
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusTableColumnAttributeBase.Header">
            <summary>
            Name shown in the header row, overriding the property name
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusTableColumnAttributeBase.NumberFormat">
            <summary>
            Excel format string for the column
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusTableColumnAttributeBase.TotalsRowFunction">
            <summary>
            If not <see cref="F:OfficeOpenXml.Table.RowFunctions.None"/> the last cell in the column (the totals row) will contain a formula of the specified type.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusTableColumnAttributeBase.TotalsRowFormula">
            <summary>
            Formula for the total row of this column.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusTableColumnAttributeBase.TotalsRowNumberFormat">
            <summary>
            Number format for this columns cell in the totals row.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusTableColumnAttributeBase.TotalsRowLabel">
            <summary>
            Text in this columns cell in the totals row
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Attributes.EPPlusTableColumnSortOrderAttribute">
            <summary>
            Attribute used by <see cref="M:OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0})" /> to configure sorting of properties for the functions. Overrides any other configured sort order./>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EPPlusTableColumnSortOrderAttribute.Properties">
            <summary>
            Property names used for the sort.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Compatibility.CompatibilitySettings">
            <summary>
            Settings to stay compatible with older versions of EPPlus
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Compatibility.CompatibilitySettings.IsWorksheets1Based">
            <summary>
            If the worksheets collection of the ExcelWorkbook class is 1 based.
            This property can be set from app.config file.
            <code>
              <appSettings>
               <!--Set worksheets collection to start from one.Default is 0. Set to true for backward compatibility reasons only!-->  
               <add key = "EPPlus:ExcelPackage.Compatibility.IsWorksheets1Based" value="true" />
              </appSettings>
            </code>
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Compatibility.EncodingProviderCompatUtil">
            <summary>
            Returns the encoding with the specified code page number
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Compatibility.EncodingProviderCompatUtil.GetEncoding(System.String)">
            <summary>
            Returns the encoding with the specified name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingAverageGroup">
            <summary>
            IExcelConditionalFormattingAverageGroup
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingBeginsWith">
            <summary>
            IExcelConditionalFormattingBeginsWith
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingBetween">
            <summary>
            IExcelConditionalFormattingBetween
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingColorScaleGroup">
            <summary>
            IExcelConditionalFormattingColorScaleGroup
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingContainsBlanks">
            <summary>
            IExcelConditionalFormattingContainsBlanks
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingContainsErrors">
            <summary>
            IExcelConditionalFormattingContainsErrors
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingContainsText">
            <summary>
            IExcelConditionalFormattingContainsText
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup">
            <summary>
            IExcelConditionalFormattingDataBar
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.ShowValue">
            <summary>
            ShowValue
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.LowValue">
            <summary>
            Databar Low Value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.HighValue">
            <summary>
            Databar High Value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Color">
            <summary>
            The color of the databar
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDuplicateValues">
            <summary>
            IExcelConditionalFormattingDuplicateValues
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingEndsWith">
            <summary>
            IExcelConditionalFormattingEndsWith
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingEqual">
            <summary>
            IExcelConditionalFormattingEqual
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingExpression">
            <summary>
            IExcelConditionalFormattingExpression
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingFiveIconSet">
            <summary>
            IExcelConditionalFormattingFiveIconSet
            </summary>eExcelconditionalFormatting4IconsSetType
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingFiveIconSet.Icon5">
            <summary>
            Icon5 (part of the 5 Icon Set)
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingFourIconSet`1">
            <summary>
            IExcelConditionalFormattingFourIconSet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingFourIconSet`1.Icon4">
            <summary>
            Icon4 (part of the 4 ou 5 Icon Set)
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingGreaterThan">
            <summary>
            IExcelConditionalFormattingGreaterThan
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingGreaterThanOrEqual">
            <summary>
            IExcelConditionalFormattingGreaterThanOrEqual
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingIconSetGroup`1">
            <summary>
            IExcelConditionalFormattingIconSetGroup
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingIconSetGroup`1.Reverse">
            <summary>
            Reverse
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingIconSetGroup`1.ShowValue">
            <summary>
            ShowValue
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingIconSetGroup`1.IconSet">
            <summary>
            IconSet (3, 4 ou 5 IconSet)
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingLessThan">
            <summary>
            IExcelConditionalFormattingLessThan
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingLessThanOrEqual">
            <summary>
            IExcelConditionalFormattingGreaterThanOrEqual
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingNotBetween">
            <summary>
            IExcelConditionalFormattingNotBetween
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingNotContainsBlanks">
            <summary>
            IExcelConditionalFormattingNotContainsBlanks
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingNotContainsErrors">
            <summary>
            IExcelConditionalFormattingNotContainsErrors
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingNotContainsText">
            <summary>
            IExcelConditionalFormattingNotContainsText
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingNotEqual">
            <summary>
            IExcelConditionalFormattingNotEqual
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule">
            <summary>
            Interface for conditional formatting rule
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Node">
            <summary>
            The 'cfRule' XML node
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Type">
            <summary>
            The type of conditional formatting rule.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Address">
            <summary>
            <para>The range over which these conditional formatting rules apply.</para>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Priority">
            <summary>
            The priority of the rule. 
            A lower values are higher priority than higher values, where 1 is the highest priority.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.StopIfTrue">
            <summary>
            If this property is true, no rules with lower priority should be applied over this rule,
            when this rule evaluates to true.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Style">
            <summary>
            Gives access to the differencial styling (DXF) for the rule.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.PivotTable">
            <summary>
            Indicates that the conditional formatting is associated with a PivotTable
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.As">
            <summary>
            Type case propterty for the base class.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingStdDevGroup">
            <summary>
            IExcelConditionalFormattingStdDevGroup
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingThreeColorScale">
            <summary>
            IExcelConditionalFormattingThreeColorScale
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingThreeColorScale.MiddleValue">
            <summary>
            Three Color Scale Middle Value
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingThreeIconSet`1">
            <summary>
            IExcelConditionalFormattingThreeIconSet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingThreeIconSet`1.Icon1">
            <summary>
            Icon1 (part of the 3, 4 ou 5 Icon Set)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingThreeIconSet`1.Icon2">
            <summary>
            Icon2 (part of the 3, 4 ou 5 Icon Set)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingThreeIconSet`1.Icon3">
            <summary>
            Icon3 (part of the 3, 4 ou 5 Icon Set)
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingTimePeriodGroup">
            <summary>
            IExcelConditionalFormattingTimePeriod
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingTopBottomGroup">
            <summary>
            IExcelConditionalFormattingTopBottomGroup
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingTwoColorScale">
            <summary>
            IExcelConditionalFormattingTwoColorScale
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingTwoColorScale.LowValue">
            <summary>
            Two Color Scale Low Value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingTwoColorScale.HighValue">
            <summary>
            Two Color Scale High Value
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingUniqueValues">
            <summary>
            IExcelConditionalFormattingUniqueValues
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithFormula">
            <summary>
            IExcelConditionalFormattingWithFormula
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithFormula.Formula">
            <summary>
            Formula Attribute
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithFormula2">
            <summary>
            IExcelConditionalFormattingWithFormula2
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithFormula2.Formula2">
            <summary>
            Formula2 Attribute
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithRank">
            <summary>
            IExcelConditionalFormattingWithRank
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithRank.Rank">
            <summary>
            Rank Attribute
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithReverse">
            <summary>
            IExcelConditionalFormattingWithReverse
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithReverse.Reverse">
            <summary>
            Reverse Attribute
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithShowValue">
            <summary>
            IExcelConditionalFormattingWithShowValue
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithShowValue.ShowValue">
            <summary>
            ShowValue Attribute
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithStdDev">
            <summary>
            IExcelConditionalFormattingWithStdDev
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithStdDev.StdDev">
            <summary>
            StdDev Attribute
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithText">
            <summary>
            IExcelConditionalFormattingWithText
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithText.Text">
            <summary>
            Text Attribute
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting">
            <summary>
            Provides functionality for adding Conditional Formatting to a range (<see cref="T:OfficeOpenXml.ExcelRangeBase"/>).
            Each method will return a configurable condtional formatting type.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddAboveAverage">
            <summary>
            Adds an Above Average rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddAboveOrEqualAverage">
            <summary>
            Adds an Above Or Equal Average rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddBelowAverage">
            <summary>
            Adds a Below Average rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddBelowOrEqualAverage">
            <summary>
            Adds a Below Or Equal Average rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddAboveStdDev">
            <summary>
            Adds an Above StdDev rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddBelowStdDev">
            <summary>
            Adds an Below StdDev rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddBottom">
            <summary>
            Adds a Bottom rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddBottomPercent">
            <summary>
            Adds a Bottom Percent rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddTop">
            <summary>
            Adds a Top rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddTopPercent">
            <summary>
            Adds a Top Percent rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddLast7Days">
            <summary>
            Adds a Last 7 Days rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddLastMonth">
            <summary>
            Adds a Last Month rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddLastWeek">
            <summary>
            Adds a Last Week rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddNextMonth">
            <summary>
            Adds a Next Month rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddNextWeek">
            <summary>
            Adds a Next Week rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddThisMonth">
            <summary>
            Adds a This Month rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddThisWeek">
            <summary>
            Adds a This Week rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddToday">
            <summary>
            Adds a Today rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddTomorrow">
            <summary>
            Adds a Tomorrow rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddYesterday">
            <summary>
            Adds an Yesterday rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddBeginsWith">
            <summary>
            Adds a Begins With rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddBetween">
            <summary>
            Adds a Between rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddContainsBlanks">
            <summary>
            Adds a ContainsBlanks rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddContainsErrors">
            <summary>
            Adds a ContainsErrors rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddContainsText">
            <summary>
            Adds a ContainsText rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddDuplicateValues">
            <summary>
            Adds a DuplicateValues rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddEndsWith">
            <summary>
            Adds an EndsWith rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddEqual">
            <summary>
            Adds an Equal rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddExpression">
            <summary>
            Adds an Expression rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddGreaterThan">
            <summary>
            Adds a GreaterThan rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddGreaterThanOrEqual">
            <summary>
            Adds a GreaterThanOrEqual rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddLessThan">
            <summary>
            Adds a LessThan rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddLessThanOrEqual">
            <summary>
            Adds a LessThanOrEqual rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddNotBetween">
            <summary>
            Adds a NotBetween rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddNotContainsBlanks">
            <summary>
            Adds a NotContainsBlanks rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddNotContainsErrors">
            <summary>
            Adds a NotContainsErrors rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddNotContainsText">
            <summary>
            Adds a NotContainsText rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddNotEqual">
            <summary>
            Adds a NotEqual rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddUniqueValues">
            <summary>
            Adds an UniqueValues rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddThreeColorScale">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThreeColorScale"/> to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddTwoColorScale">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTwoColorScale"/> to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddThreeIconSet(OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType)">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingThreeIconSet`1"/> to the range
            </summary>
            <param name="IconSet"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddFourIconSet(OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting4IconsSetType)">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingFourIconSet`1"/> to the range
            </summary>
            <param name="IconSet"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddFiveIconSet(OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting5IconsSetType)">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingFiveIconSet"/> to the range
            </summary>
            <param name="IconSet"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddDatabar(System.Drawing.Color)">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup"/> to the range
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType">
            <summary>
            Provides a simple way to type cast a conditional formatting object to its top level class.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.Type``1">
            <summary>
            Converts the conditional formatting object to it's top level or another nested class.        
            </summary>
            <typeparam name="T">The type of conditional formatting object. T must be inherited from IExcelConditionalFormattingRule</typeparam>
            <returns>The conditional formatting rule as type T</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.Average">
            <summary>
            Returns the conditional formatting object as an Average rule
            If this object is not of type AboveAverage, AboveOrEqualAverage, BelowAverage or BelowOrEqualAverage, null will be returned
            </summary>
            <returns>The conditional formatting rule as an Average rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.StdDev">
            <summary>
            Returns the conditional formatting object as a StdDev rule
            If this object is not of type AboveStdDev or BelowStdDev, null will be returned
            </summary>
            <returns>The conditional formatting object as a StdDev rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.TopBottom">
            <summary>
            Returns the conditional formatting object as a TopBottom rule
            If this object is not of type Bottom, BottomPercent, Top or TopPercent, null will be returned
            </summary>
            <returns>The conditional formatting object as a TopBottom rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.DateTimePeriod">
            <summary>
            Returns the conditional formatting object as a DateTimePeriod rule
            If this object is not of type Last7Days, LastMonth, LastWeek, NextMonth, NextWeek, ThisMonth, ThisWeek, Today, Tomorrow or Yesterday, null will be returned
            </summary>
            <returns>The conditional formatting object as a DateTimePeriod rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.Between">
            <summary>
            Returns the conditional formatting object as a Between rule
            If this object is not of type Between, null will be returned
            </summary>
            <returns>The conditional formatting object as a Between rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.ContainsBlanks">
            <summary>
            Returns the conditional formatting object as a ContainsBlanks rule
            If this object is not of type ContainsBlanks, null will be returned
            </summary>
            <returns>The conditional formatting object as a ContainsBlanks rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.ContainsErrors">
            <summary>
            Returns the conditional formatting object as a ContainsErrors rule
            If this object is not of type ContainsErrors, null will be returned
            </summary>
            <returns>The conditional formatting object as a ContainsErrors rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.ContainsText">
            <summary>
            Returns the conditional formatting object as a ContainsText rule
            If this object is not of type ContainsText, null will be returned
            </summary>
            <returns>The conditional formatting object as a ContainsText rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.NotContainsBlanks">
            <summary>
            Returns the conditional formatting object as a NotContainsBlanks rule
            If this object is not of type NotContainsBlanks, null will be returned
            </summary>
            <returns>The conditional formatting object as a NotContainsBlanks rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.NotContainsText">
            <summary>
            Returns the conditional formatting object as a NotContainsText rule
            If this object is not of type NotContainsText, null will be returned
            </summary>
            <returns>The conditional formatting object as a NotContainsText rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.NotContainsErrors">
            <summary>
            Returns the conditional formatting object as a NotContainsErrors rule
            If this object is not of type NotContainsErrors, null will be returned
            </summary>
            <returns>The conditional formatting object as a NotContainsErrors rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.NotBetween">
            <summary>
            Returns the conditional formatting object as a NotBetween rule
            If this object is not of type NotBetween, null will be returned
            </summary>
            <returns>The conditional formatting object as a NotBetween rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.Equal">
            <summary>
            Returns the conditional formatting object as an Equal rule
            If this object is not of type Equal, null will be returned
            </summary>
            <returns>The conditional formatting object as an Equal rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.NotEqual">
            <summary>
            Returns the conditional formatting object as a NotEqual rule
            If this object is not of type NotEqual, null will be returned
            </summary>
            <returns>The conditional formatting object as a NotEqual rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.DuplicateValues">
            <summary>
            Returns the conditional formatting object as a DuplicateValues rule
            If this object is not of type DuplicateValues, null will be returned
            </summary>
            <returns>The conditional formatting object as a DuplicateValues rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.BeginsWith">
            <summary>
            Returns the conditional formatting object as a BeginsWith rule
            If this object is not of type BeginsWith, null will be returned
            </summary>
            <returns>The conditional formatting object as a BeginsWith rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.EndsWith">
            <summary>
            Returns the conditional formatting object as an EndsWith rule
            If this object is not of type EndsWith, null will be returned
            </summary>
            <returns>The conditional formatting object as an EndsWith rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.Expression">
            <summary>
            Returns the conditional formatting object as an Expression rule
            If this object is not of type Expression, null will be returned
            </summary>
            <returns>The conditional formatting object as an Expression rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.GreaterThan">
            <summary>
            Returns the conditional formatting object as a GreaterThan rule
            If this object is not of type GreaterThan, null will be returned
            </summary>
            <returns>The conditional formatting object as a GreaterThan rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.GreaterThanOrEqual">
            <summary>
            Returns the conditional formatting object as a GreaterThanOrEqual rule
            If this object is not of type GreaterThanOrEqual, null will be returned
            </summary>
            <returns>The conditional formatting object as a GreaterThanOrEqual rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.LessThan">
            <summary>
            Returns the conditional formatting object as a LessThan rule
            If this object is not of type LessThan, null will be returned
            </summary>
            <returns>The conditional formatting object as a LessThan rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.LessThanOrEqual">
            <summary>
            Returns the conditional formatting object as a LessThanOrEqual rule
            If this object is not of type LessThanOrEqual, null will be returned
            </summary>
            <returns>The conditional formatting object as a LessThanOrEqual rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.UniqueValues">
            <summary>
            Returns the conditional formatting object as a UniqueValues rule
            If this object is not of type UniqueValues, null will be returned
            </summary>
            <returns>The conditional formatting object as a UniqueValues rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.TwoColorScale">
            <summary>
            Returns the conditional formatting object as a TwoColorScale rule
            If this object is not of type TwoColorScale, null will be returned
            </summary>
            <returns>The conditional formatting object as a TwoColorScale rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.ThreeColorScale">
            <summary>
            Returns the conditional formatting object as a ThreeColorScale rule
            If this object is not of type ThreeColorScale, null will be returned
            </summary>
            <returns>The conditional formatting object as a ThreeColorScale rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.ThreeIconSet">
            <summary>
            Returns the conditional formatting object as a ThreeIconSet rule
            If this object is not of type ThreeIconSet, null will be returned
            </summary>
            <returns>The conditional formatting object as a ThreeIconSet rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.FourIconSet">
            <summary>
            Returns the conditional formatting object as a FourIconSet rule
            If this object is not of type FourIconSet, null will be returned
            </summary>
            <returns>The conditional formatting object as a FourIconSet rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.FiveIconSet">
            <summary>
            Returns the conditional formatting object as a FiveIconSet rule
            If this object is not of type FiveIconSet, null will be returned
            </summary>
            <returns>The conditional formatting object as a FiveIconSet rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.DataBar">
            <summary>
            Returns the conditional formatting object as a DataBar rule
            If this object is not of type DataBar, null will be returned
            </summary>
            <returns>The conditional formatting object as a DataBar rule</returns>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection">
            <summary>
            Collection of <see cref="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule"/>.
            This class is providing the API for EPPlus conditional formatting.
            </summary>
            <remarks>
            <para>
            The public methods of this class (Add[...]ConditionalFormatting) will create a ConditionalFormatting/CfRule entry in the worksheet. When this
            Conditional Formatting has been created changes to the properties will affect the workbook immediately.
            </para>
            <para>
            Each type of Conditional Formatting Rule has diferente set of properties.
            </para>
            <code>
            // Add a Three Color Scale conditional formatting
            var cf = worksheet.ConditionalFormatting.AddThreeColorScale(new ExcelAddress("A1:C10"));
            // Set the conditional formatting properties
            cf.LowValue.Type = ExcelConditionalFormattingValueObjectType.Min;
            cf.LowValue.Color = Color.White;
            cf.MiddleValue.Type = ExcelConditionalFormattingValueObjectType.Percent;
            cf.MiddleValue.Value = 50;
            cf.MiddleValue.Color = Color.Blue;
            cf.HighValue.Type = ExcelConditionalFormattingValueObjectType.Max;
            cf.HighValue.Color = Color.Black;
            </code>
            </remarks>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.#ctor(OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Initialize the <see cref="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection"/>
            </summary>
            <param name="worksheet"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.EnsureRootElementExists">
            <summary>
            
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.GetRootNode">
            <summary>
            GetRootNode
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.ValidateAddress(OfficeOpenXml.ExcelAddress)">
            <summary>
            Validates address - not empty (collisions are allowded)
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.GetNextPriority">
            <summary>
            Get the next priority sequencial number
            </summary>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.Count">
            <summary>
            Number of validations
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.Item(System.Int32)">
            <summary>
            Index operator, returns by 0-based index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.System#Collections#Generic#IEnumerable{OfficeOpenXml#ConditionalFormatting#Contracts#IExcelConditionalFormattingRule}#GetEnumerator">
            <summary>
            Get the 'cfRule' enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the 'cfRule' enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.RemoveAll">
            <summary>
            Removes all 'cfRule' from the collection and from the XML.
            <remarks>
            This is the same as removing all the 'conditionalFormatting' nodes.
            </remarks>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.Remove(OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule)">
            <summary>
            Remove a Conditional Formatting Rule by its object
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a Conditional Formatting Rule by its 0-based index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.RemoveByPriority(System.Int32)">
            <summary>
            Remove a Conditional Formatting Rule by its priority
            </summary>
            <param name="priority"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.RulesByPriority(System.Int32)">
            <summary>
            Get a rule by its priority
            </summary>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddRule(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress)">
            <summary>
            Add rule (internal)
            </summary>
            <param name="type"></param>
            <param name="address"></param>
            <returns></returns>F
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddAboveAverage(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add AboveAverage Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddAboveOrEqualAverage(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add AboveOrEqualAverage Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddBelowAverage(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add BelowAverage Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddBelowOrEqualAverage(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add BelowOrEqualAverage Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddAboveStdDev(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add AboveStdDev Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddBelowStdDev(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add BelowStdDev Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddBottom(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add Bottom Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddBottomPercent(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add BottomPercent Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddTop(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add Top Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddTopPercent(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add TopPercent Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddLast7Days(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add Last7Days Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddLastMonth(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add LastMonth Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddLastWeek(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add LastWeek Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddNextMonth(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add NextMonth Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddNextWeek(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add NextWeek Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddThisMonth(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add ThisMonth Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddThisWeek(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add ThisWeek Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddToday(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add Today Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddTomorrow(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add Tomorrow Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddYesterday(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add Yesterday Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddBeginsWith(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add BeginsWith Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddBetween(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add Between Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddContainsBlanks(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add ContainsBlanks Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddContainsErrors(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add ContainsErrors Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddContainsText(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add ContainsText Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddDuplicateValues(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add DuplicateValues Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddEndsWith(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add EndsWith Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddEqual(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add Equal Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddExpression(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add Expression Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddGreaterThan(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add GreaterThan Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddGreaterThanOrEqual(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add GreaterThanOrEqual Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddLessThan(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add LessThan Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddLessThanOrEqual(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add LessThanOrEqual Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddNotBetween(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add NotBetween Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddNotContainsBlanks(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add NotContainsBlanks Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddNotContainsErrors(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add NotContainsErrors Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddNotContainsText(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add NotContainsText Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddNotEqual(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add NotEqual Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddUniqueValues(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add Unique Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddThreeColorScale(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add ThreeColorScale Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddTwoColorScale(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add TwoColorScale Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddThreeIconSet(OfficeOpenXml.ExcelAddress,OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType)">
            <summary>
            Add ThreeIconSet Rule
            </summary>
            <param name="Address">The address</param>
            <param name="IconSet">Type of iconset</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddFourIconSet(OfficeOpenXml.ExcelAddress,OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting4IconsSetType)">
            <summary>
            Adds a FourIconSet rule
            </summary>
            <param name="Address"></param>
            <param name="IconSet"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddFiveIconSet(OfficeOpenXml.ExcelAddress,OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting5IconsSetType)">
            <summary>
            Adds a FiveIconSet rule
            </summary>
            <param name="Address"></param>
            <param name="IconSet"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddDatabar(OfficeOpenXml.ExcelAddress,System.Drawing.Color)">
            <summary>
            Adds a databar rule
            </summary>
            <param name="Address"></param>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue">
            <summary>
            18.3.1.11 cfvo (Conditional Format Value Object)
            Describes the values of the interpolation points in a gradient scale.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectPosition,OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType,System.Drawing.Color,System.Double,System.String,OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Initialize the cfvo (§18.3.1.11) node
            </summary>
            <param name="position"></param>
            <param name="type"></param>
            <param name="color"></param>
            <param name="value"></param>
            <param name="formula"></param>
            <param name="ruleType"></param>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode">The cfvo (§18.3.1.11) node parent. Can be any of the following:
            colorScale (§18.3.1.16); dataBar (§18.3.1.28); iconSet (§18.3.1.49)</param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectPosition,OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType,System.Drawing.Color,System.Double,System.String,OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNamespaceManager)">
            <summary>
            Initialize the <see cref="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue"/>
            </summary>
            <param name="position"></param>
            <param name="type"></param>
            <param name="color"></param>
            <param name="value"></param>
            <param name="formula"></param>
            <param name="ruleType"></param>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectPosition,OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType,System.Drawing.Color,OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Initialize the <see cref="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue"/>
            </summary>
            <param name="position"></param>
            <param name="type"></param>
            <param name="color"></param>
            <param name="ruleType"></param>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.GetNodeOrder">
            <summary>
            Get the node order (1, 2 ou 3) according to the Position (Low, Middle and High)
            and the Rule Type (TwoColorScale ou ThreeColorScale).
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.CreateNodeByOrdem(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectNodeType,System.String,System.String)">
            <summary>
            Create the 'cfvo'/'color' nodes in the right order. They should appear like this:
            	"cfvo"   --> Low Value (value object)
            	"cfvo"   --> Middle Value (value object)
            	"cfvo"   --> High Value (value object)
            	"color"  --> Low Value (color)
            	"color"  --> Middle Value (color)
            	"color"  --> High Value (color)
            </summary>
            <param name="nodeType"></param>
            <param name="attributePath"></param>
            <param name="attributeValue"></param>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Position">
            <summary>
            The position
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.RuleType">
            <summary>
            The type of rule
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Type">
            <summary>
            The value type
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Color">
            <summary>
            The color to be used
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Value">
            <summary>
            The value of the conditional formatting
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Formula">
            <summary>
            The Formula of the Object Value (uses the same attribute as the Value)
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingConstants">
            <summary>
            The conditional formatting constants
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType">
            <summary>
            Enum for Conditional Format Type ST_CfType §18.18.12. With some changes.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.AboveAverage">
            <summary>
            Highlights cells that are above the average for all values in the range.
            </summary>
            <remarks>AboveAverage Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.AboveOrEqualAverage">
            <summary>
            Highlights cells that are above or equal to the average for all values in the range.
            </summary>
            <remarks>AboveAverage Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.BelowAverage">
            <summary>
            Highlights cells that are below the average for all values in the range.
            </summary>
            <remarks>AboveAverage Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.BelowOrEqualAverage">
            <summary>
            Highlights cells that are below or equal to the average for all values in the range.
            </summary>
            <remarks>AboveAverage Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.AboveStdDev">
            <summary>
            Highlights cells that are above the standard deviation for all values in the range.
            <remarks>AboveAverage Excel CF Rule Type</remarks>
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.BelowStdDev">
            <summary>
            Highlights cells that are below the standard deviation for all values in the range.
            </summary>
            <remarks>AboveAverage Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.Bottom">
            <summary>
            Highlights cells whose values fall in the bottom N bracket as specified.
            </summary>
            <remarks>Top10 Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.BottomPercent">
            <summary>
            Highlights cells whose values fall in the bottom N percent as specified.
            </summary>
            <remarks>Top10 Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.Top">
            <summary>
            Highlights cells whose values fall in the top N bracket as specified.
            </summary>
            <remarks>Top10 Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.TopPercent">
            <summary>
            Highlights cells whose values fall in the top N percent as specified.
            </summary>
            <remarks>Top10 Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.Last7Days">
            <summary>
            Highlights cells containing dates in the last 7 days.
            </summary>
            <remarks>TimePeriod Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.LastMonth">
            <summary>
            Highlights cells containing dates in the last month.
            </summary>
            <remarks>TimePeriod Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.LastWeek">
            <summary>
            Highlights cells containing dates in the last week.
            </summary>
            <remarks>TimePeriod Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.NextMonth">
            <summary>
            Highlights cells containing dates in the next month.
            </summary>
            <remarks>TimePeriod Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.NextWeek">
            <summary>
            Highlights cells containing dates in the next week.
            </summary>
            <remarks>TimePeriod Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.ThisMonth">
            <summary>
            Highlights cells containing dates in this month.
            </summary>
            <remarks>TimePeriod Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.ThisWeek">
            <summary>
            Highlights cells containing dates in this week.
            </summary>
            <remarks>TimePeriod Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.Today">
            <summary>
            Highlights cells containing todays date.
            </summary>
            <remarks>TimePeriod Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.Tomorrow">
            <summary>
            Highlights cells containing tomorrows date.
            </summary>
            <remarks>TimePeriod Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.Yesterday">
            <summary>
            Highlights cells containing yesterdays date.
            </summary>
            <remarks>TimePeriod Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.BeginsWith">
            <summary>
            Highlights cells in the range that begin with the given text.
            </summary>
            <remarks>
            Equivalent to using the LEFT() sheet function and comparing values.
            </remarks>
            <remarks>BeginsWith Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.Between">
            <summary>
            Highlights cells in the range between the given two formulas.
            </summary>
            <remarks>CellIs Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.ContainsBlanks">
            <summary>
            Highlights cells that are completely blank.
            </summary>
            <remarks>
            Equivalent of using LEN(TRIM()). This means that if the cell contains only
            characters that TRIM() would remove, then it is considered blank. An empty cell
            is also considered blank.
            </remarks>
            <remarks>ContainsBlanks Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.ContainsErrors">
            <summary>
            Highlights cells with formula errors.
            </summary>
            <remarks>
            Equivalent to using ISERROR() sheet function to determine if there is
            a formula error.
            </remarks>
            <remarks>ContainsErrors Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.ContainsText">
            <summary>
            Highlights cells in the range that begin with
            the given text.
            </summary>
            <remarks>
            Equivalent to using the LEFT() sheet function and comparing values.
            </remarks>
            <remarks>ContainsText Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.DuplicateValues">
            <summary>
            Highlights duplicated values.
            </summary>
            <remarks>DuplicateValues Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.EndsWith">
            <summary>
            Highlights cells ending with the given text.
            </summary>
            <remarks>
            Equivalent to using the RIGHT() sheet function and comparing values.
            </remarks>
            <remarks>EndsWith Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.Equal">
            <summary>
            Highlights cells equal to the given formula.
            </summary>
            <remarks>CellIs Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.Expression">
            <summary>
            This rule contains a formula to evaluate. When the formula result is true, the cell is highlighted.
            </summary>
            <remarks>Expression Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.GreaterThan">
            <summary>
            Highlights cells greater than the given formula.
            </summary>
            <remarks>CellIs Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.GreaterThanOrEqual">
            <summary>
            Highlights cells greater than or equal the given formula.
            </summary>
            <remarks>CellIs Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.LessThan">
            <summary>
            Highlights cells less than the given formula.
            </summary>
            <remarks>CellIs Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.LessThanOrEqual">
            <summary>
            Highlights cells less than or equal the given formula.
            </summary>
            <remarks>CellIs Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.NotBetween">
            <summary>
            Highlights cells outside the range in given two formulas.
            </summary>
            <remarks>CellIs Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.NotContains">
            <summary>
            Highlights cells that does not contains the given formula.
            </summary>
            <remarks>CellIs Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.NotContainsBlanks">
            <summary>
            Highlights cells that are not blank.
            </summary>
            <remarks>
            Equivalent of using LEN(TRIM()). This means that if the cell contains only
            characters that TRIM() would remove, then it is considered blank. An empty cell
            is also considered blank.
            </remarks>
            <remarks>NotContainsBlanks Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.NotContainsErrors">
            <summary>
            Highlights cells without formula errors.
            </summary>
            <remarks>
            Equivalent to using ISERROR() sheet function to determine if there is a
            formula error.
            </remarks>
            <remarks>NotContainsErrors Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.NotContainsText">
            <summary>
            Highlights cells that do not contain the given text.
            </summary>
            <remarks>
            Equivalent to using the SEARCH() sheet function.
            </remarks>
            <remarks>NotContainsText Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.NotEqual">
            <summary>
                .
            </summary>
            <remarks>CellIs Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.UniqueValues">
            <summary>
            Highlights unique values in the range.
            </summary>
            <remarks>UniqueValues Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.ThreeColorScale">
            <summary>
            Three Color Scale (Low, Middle and High Color Scale)
            </summary>
            <remarks>ColorScale Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.TwoColorScale">
            <summary>
            Two Color Scale (Low and High Color Scale)
            </summary>
            <remarks>ColorScale Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.ThreeIconSet">
            <summary>
            This conditional formatting rule applies a 3 set icons to cells according
            to their values.
            </summary>
            <remarks>IconSet Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.FourIconSet">
            <summary>
            This conditional formatting rule applies a 4 set icons to cells according
            to their values.
            </summary>
            <remarks>IconSet Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.FiveIconSet">
            <summary>
            This conditional formatting rule applies a 5 set icons to cells according
            to their values.
            </summary>
            <remarks>IconSet Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.DataBar">
            <summary>
            This conditional formatting rule displays a gradated data bar in the range of cells.
            </summary>
            <remarks>DataBar Excel CF Rule Type</remarks>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType">
            <summary>
            Enum for Conditional Format Value Object Type ST_CfvoType §18.18.13
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType.Formula">
            <summary>
            Formula
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType.Max">
            <summary>
            Maximum Value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType.Min">
            <summary>
            Minimum Value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType.Num">
            <summary>
            Number Value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType.Percent">
            <summary>
            Percent
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType.Percentile">
            <summary>
            Percentile
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectPosition">
            <summary>
            Enum for Conditional Formatting Value Object Position
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectPosition.Low">
            <summary>
            The lower position for both TwoColorScale and ThreeColorScale
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectPosition.Middle">
            <summary>
            The middle position only for ThreeColorScale
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectPosition.High">
            <summary>
            The highest position for both TwoColorScale and ThreeColorScale
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectNodeType">
            <summary>
            Enum for Conditional Formatting Value Object Node Type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectNodeType.Cfvo">
            <summary>
            'cfvo' node
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectNodeType.Color">
            <summary>
            'color' node
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType">
            <summary>
            Enum for Conditional Formatting Operartor Type ST_ConditionalFormattingOperator §18.18.15
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType.BeginsWith">
            <summary>
            Begins With. 'Begins with' operator
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType.Between">
            <summary>
            Between. 'Between' operator
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType.ContainsText">
            <summary>
            Contains. 'Contains' operator
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType.EndsWith">
            <summary>
            Ends With. 'Ends with' operator
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType.Equal">
            <summary>
            Equal. 'Equal to' operator
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType.GreaterThan">
            <summary>
            Greater Than. 'Greater than' operator
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType.GreaterThanOrEqual">
            <summary>
            Greater Than Or Equal. 'Greater than or equal to' operator
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType.LessThan">
            <summary>
            Less Than. 'Less than' operator
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType.LessThanOrEqual">
            <summary>
            Less Than Or Equal. 'Less than or equal to' operator
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType.NotBetween">
            <summary>
            Not Between. 'Not between' operator
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType.NotContains">
            <summary>
            Does Not Contain. 'Does not contain' operator
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType.NotEqual">
            <summary>
            Not Equal. 'Not equal to' operator
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingTimePeriodType">
            <summary>
            Enum for Conditional Formatting Time Period Type ST_TimePeriod §18.18.82
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingTimePeriodType.Last7Days">
            <summary>
            Last 7 Days. A date in the last seven days.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingTimePeriodType.LastMonth">
            <summary>
            Last Month. A date occuring in the last calendar month.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingTimePeriodType.LastWeek">
            <summary>
            Last Week. A date occuring last week.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingTimePeriodType.NextMonth">
            <summary>
            Next Month. A date occuring in the next calendar month.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingTimePeriodType.NextWeek">
            <summary>
            Next Week. A date occuring next week.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingTimePeriodType.ThisMonth">
            <summary>
            This Month. A date occuring in this calendar month.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingTimePeriodType.ThisWeek">
            <summary>
            This Week. A date occuring this week.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingTimePeriodType.Today">
            <summary>
            Today. Today's date.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingTimePeriodType.Tomorrow">
            <summary>
            Tomorrow. Tomorrow's date.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingTimePeriodType.Yesterday">
            <summary>
            Yesterday. Yesterday's date.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType">
            <summary>
            18.18.42 ST_IconSetType (Icon Set Type) - Only 3 icons
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType.Arrows">
            <summary>
            3 arrows icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType.ArrowsGray">
            <summary>
            3 gray arrows icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType.Flags">
            <summary>
            3 flags icon set. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType.Signs">
            <summary>
            3 signs icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType.Symbols">
            <summary>
            3 symbols icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType.Symbols2">
            <summary>
            3 Symbols icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType.TrafficLights1">
            <summary>
            3 traffic lights icon set (#1).
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType.TrafficLights2">
            <summary>
            3 traffic lights icon set with thick black border.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting4IconsSetType">
            <summary>
            18.18.42 ST_IconSetType (Icon Set Type) - Only 4 icons
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting4IconsSetType.Arrows">
            <summary>
            (4 Arrows) 4 arrows icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting4IconsSetType.ArrowsGray">
            <summary>
            (4 Arrows (Gray)) 4 gray arrows icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting4IconsSetType.Rating">
            <summary>
            (4 Ratings) 4 ratings icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting4IconsSetType.RedToBlack">
            <summary>
            (4 Red To Black) 4 'red to black' icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting4IconsSetType.TrafficLights">
            <summary>
            (4 Traffic Lights) 4 traffic lights icon set.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting5IconsSetType">
            <summary>
            18.18.42 ST_IconSetType (Icon Set Type) - Only 5 icons
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting5IconsSetType.Arrows">
            <summary>
            5 arrows icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting5IconsSetType.ArrowsGray">
            <summary>
            5 gray arrows icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting5IconsSetType.Quarters">
            <summary>
            5 quarters icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting5IconsSetType.Rating">
            <summary>
            5 rating icon set.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType">
            <summary>
            18.18.42 ST_IconSetType (Icon Set Type)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.ThreeArrows">
            <summary>
            3 arrows icon set
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.ThreeArrowsGray">
            <summary>
            3 gray arrows icon set
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.ThreeFlags">
            <summary>
            3 flags icon set. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.ThreeSigns">
            <summary>
            3 signs icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.ThreeSymbols">
            <summary>
            3 symbols icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.ThreeSymbols2">
            <summary>
            3 Symbols icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.ThreeTrafficLights1">
            <summary>
            3 traffic lights icon set (#1).
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.ThreeTrafficLights2">
            <summary>
            3 traffic lights icon set with thick black border.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.FourArrows">
            <summary>
            4 arrows icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.FourArrowsGray">
            <summary>
            4 gray arrows icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.FourRating">
            <summary>
            4 ratings icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.FourRedToBlack">
            <summary>
            4 'red to black' icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.FourTrafficLights">
            <summary>
            4 traffic lights icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.FiveArrows">
            <summary>
            5 arrows icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.FiveArrowsGray">
            <summary>
            5 gray arrows icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.FiveQuarters">
            <summary>
            5 quarters icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.FiveRating">
            <summary>
            5 rating icon set.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingHelper">
            <summary>
            Conditional formatting helper
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingHelper.CheckAndFixRangeAddress(System.String)">
            <summary>
            Check and fix an address (string address)
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingHelper.ConvertFromColorCode(System.String)">
            <summary>
            Convert a color code to Color Object
            </summary>
            <param name="colorCode">Color Code (Ex. "#FFB43C53" or "FFB43C53")</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingHelper.GetAttributeString(System.Xml.XmlNode,System.String)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingHelper.GetAttributeInt(System.Xml.XmlNode,System.String)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingHelper.GetAttributeIntNullable(System.Xml.XmlNode,System.String)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingHelper.GetAttributeBool(System.Xml.XmlNode,System.String)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingHelper.GetAttributeBoolNullable(System.Xml.XmlNode,System.String)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingHelper.GetAttributeDouble(System.Xml.XmlNode,System.String)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingHelper.GetAttributeDecimal(System.Xml.XmlNode,System.String)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingHelper.EncodeXML(System.String)">
            <summary>
            Encode to XML (special characteres: &apos; &quot; &gt; &lt; &amp;)
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingHelper.DecodeXML(System.String)">
            <summary>
            Decode from XML (special characteres: &apos; &quot; &gt; &lt; &amp;)
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconDataBarValue">
            <summary>
            18.3.1.11 cfvo (Conditional Format Value Object)
            Describes the values of the interpolation points in a gradient scale.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconDataBarValue.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType,System.Double,System.String,OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Initialize the cfvo (§18.3.1.11) node
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <param name="formula"></param>
            <param name="ruleType"></param>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode">The cfvo (§18.3.1.11) node parent. Can be any of the following:
            colorScale (§18.3.1.16); dataBar (§18.3.1.28); iconSet (§18.3.1.49)</param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconDataBarValue.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Initialize the cfvo (§18.3.1.11) node
            </summary>
            <param name="ruleType"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode">The cfvo (§18.3.1.11) node parent. Can be any of the following:
            colorScale (§18.3.1.16); dataBar (§18.3.1.28); iconSet (§18.3.1.49)</param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconDataBarValue.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType,System.Double,System.String,OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNamespaceManager)">
            <summary>
            Initialize the <see cref="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue"/>
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <param name="formula"></param>
            <param name="ruleType"></param>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconDataBarValue.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType,System.Drawing.Color,OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNamespaceManager)">
            <summary>
            Initialize the <see cref="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue"/>
            </summary>
            <param name="type"></param>
            <param name="color"></param>
            <param name="ruleType"></param>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconDataBarValue.RuleType">
            <summary>
            Rule type
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconDataBarValue.Type">
            <summary>
            Value type
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconDataBarValue.GreaterThanOrEqualTo">
            <summary>
            Greater Than Or Equal 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconDataBarValue.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconDataBarValue.Formula">
            <summary>
            The Formula of the Object Value (uses the same attribute as the Value)
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingOperatorType">
            <summary>
            Functions related to the <see cref="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingOperatorType"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingOperatorType.GetAttributeByType(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingOperatorType.GetTypeByAttribute(System.String)">
            <summary>
            
            </summary>
            param name="attribute"
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRuleFactory">
            <summary>
            Factory class for ExcelConditionalFormatting
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRuleType">
            <summary>
            Functions related to the ExcelConditionalFormattingRule
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRuleType.GetTypeByAttrbiute(System.String,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="attribute"></param>
            <param name="topNode"></param>
            <param name="nameSpaceManager"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRuleType.GetColorScaleType(System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Get the "colorScale" rule type according to the number of "cfvo" and "color" nodes.
            If we have excatly 2 "cfvo" and "color" childs, then we return "twoColorScale"
            </summary>
            <returns>TwoColorScale or ThreeColorScale</returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRuleType.GetAboveAverageType(System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Get the "aboveAverage" rule type according to the follwoing attributes:
            "AboveAverage", "EqualAverage" and "StdDev".
            
            @StdDev greater than "0"                              == AboveStdDev
            @StdDev less than "0"                                 == BelowStdDev
            @AboveAverage = "1"/null and @EqualAverage = "0"/null == AboveAverage
            @AboveAverage = "1"/null and @EqualAverage = "1"      == AboveOrEqualAverage
            @AboveAverage = "0" and @EqualAverage = "0"/null      == BelowAverage
            @AboveAverage = "0" and @EqualAverage = "1"           == BelowOrEqualAverage
            /// </summary>
            <returns>AboveAverage, AboveOrEqualAverage, BelowAverage or BelowOrEqualAverage</returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRuleType.GetTop10Type(System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Get the "top10" rule type according to the follwoing attributes:
            "Bottom" and "Percent"
            
            @Bottom = "1" and @Percent = "0"/null       == Bottom
            @Bottom = "1" and @Percent = "1"            == BottomPercent
            @Bottom = "0"/null and @Percent = "0"/null  == Top
            @Bottom = "0"/null and @Percent = "1"       == TopPercent
            /// </summary>
            <returns>Top, TopPercent, Bottom or BottomPercent</returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRuleType.GetTimePeriodType(System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Get the "timePeriod" rule type according to "TimePeriod" attribute.
            /// </summary>
            <returns>Last7Days, LastMonth etc.</returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRuleType.GetAttributeByType(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRuleType.GetCfvoParentPathByType(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType)">
            <summary>
            Return cfvo §18.3.1.11 parent according to the rule type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTimePeriodType">
            <summary>
            Functions related to the <see cref="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTimePeriodType"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTimePeriodType.GetAttributeByType(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingTimePeriodType)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTimePeriodType.GetTypeByAttribute(System.String)">
            <summary>
            
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingValueObjectType">
            <summary>
            Functions related to the <see cref="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingValueObjectType.GetOrderByPosition(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectPosition,OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType)">
            <summary>
            Get the sequencial order of a cfvo/color by its position.
            </summary>
            <param name="position"></param>
            <param name="ruleType"></param>
            <returns>1, 2 or 3</returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingValueObjectType.GetTypeByAttrbiute(System.String)">
            <summary>
            Get the CFVO type by its @type attribute
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingValueObjectType.GetCfvoNodeByPosition(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectPosition,OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
             <summary>
             
             </summary>
             <param name="position"></param>
            <param name="ruleType"></param>
             <param name="topNode"></param>
             <param name="nameSpaceManager"></param>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingValueObjectType.GetAttributeByType(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingValueObjectType.GetParentPathByRuleType(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType)">
            <summary>
            Get the cfvo (§18.3.1.11) node parent by the rule type. Can be any of the following:
            "colorScale" (§18.3.1.16); "dataBar" (§18.3.1.28); "iconSet" (§18.3.1.49)
            </summary>
            <param name="ruleType"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingValueObjectType.GetNodePathByNodeType(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectNodeType)">
            <summary>
            
            </summary>
            <param name="nodeType"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddAboveAverage">
            <summary>
            Add AboveOrEqualAverage Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddAboveOrEqualAverage">
            <summary>
            Add AboveOrEqualAverage Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddBelowAverage">
            <summary>
            Add BelowOrEqualAverage Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddBelowOrEqualAverage">
            <summary>
            Add BelowOrEqualAverage Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddAboveStdDev">
            <summary>
            Add AboveStdDev Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddBelowStdDev">
            <summary>
            Add BelowStdDev Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddBottom">
            <summary>
            Add Bottom Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddBottomPercent">
            <summary>
            Add BottomPercent Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddTop">
            <summary>
            Add Top Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddTopPercent">
            <summary>
            Add TopPercent Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddLast7Days">
            <summary>
            Add Last7Days Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddLastMonth">
            <summary>
            Add LastMonth Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddLastWeek">
            <summary>
            Add LastWeek Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddNextMonth">
            <summary>
            Add NextMonth Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddNextWeek">
            <summary>
            Add NextWeek Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddThisMonth">
            <summary>
            Add ThisMonth Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddThisWeek">
            <summary>
            Add ThisWeek Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddToday">
            <summary>
            Add Today Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddTomorrow">
            <summary>
            Add Tomorrow Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddYesterday">
            <summary>
            Add Yesterday Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddBeginsWith">
            <summary>
            Add BeginsWith Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddBetween">
            <summary>
            Add Between Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddContainsBlanks">
            <summary>
            Add ContainsBlanks Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddContainsErrors">
            <summary>
            Add ContainsErrors Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddContainsText">
            <summary>
            Add ContainsText Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddDuplicateValues">
            <summary>
            Add DuplicateValues Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddEndsWith">
            <summary>
            Add EndsWith Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddEqual">
            <summary>
            Add Equal Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddExpression">
            <summary>
            Add Expression Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddGreaterThan">
            <summary>
            Add GreaterThan Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddGreaterThanOrEqual">
            <summary>
            Add GreaterThanOrEqual Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddLessThan">
            <summary>
            Add LessThan Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddLessThanOrEqual">
            <summary>
            Add LessThanOrEqual Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddNotBetween">
            <summary>
            Add NotBetween Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddNotContainsBlanks">
            <summary>
            Add NotContainsBlanks Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddNotContainsErrors">
            <summary>
            Add NotContainsErrors Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddNotContainsText">
            <summary>
            Add NotContainsText Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddNotEqual">
            <summary>
            Add NotEqual Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddUniqueValues">
            <summary>
            Add UniqueValues Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddThreeColorScale">
            <summary>
            Add ThreeColorScale Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddTwoColorScale">
            <summary>
            Add TwoColorScale Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddThreeIconSet(OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType)">
            <summary>
            Adds a ThreeIconSet rule 
            </summary>
            <param name="IconSet"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddFourIconSet(OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting4IconsSetType)">
            <summary>
            Adds a FourIconSet rule 
            </summary>
            <param name="IconSet"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddFiveIconSet(OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting5IconsSetType)">
            <summary>
            Adds a FiveIconSet rule 
            </summary>
            <param name="IconSet"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddDatabar(System.Drawing.Color)">
            <summary>
            Adds a Databar rule 
            </summary>
            <param name="Color">The color of the databar</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAboveAverage">
            <summary>
            ExcelConditionalFormattingAboveAverage
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAboveAverage.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAboveAverage.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAboveAverage.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAboveOrEqualAverage">
            <summary>
            ExcelConditionalFormattingAboveOrEqualAverage
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAboveOrEqualAverage.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAboveOrEqualAverage.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAboveOrEqualAverage.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAboveStdDev">
            <summary>
            ExcelConditionalFormattingAboveStdDev
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAboveStdDev.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAboveStdDev.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAboveStdDev.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAverageGroup">
            <summary>
            ExcelConditionalFormattingAverageGroup
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAverageGroup.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAverageGroup.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
             <summary>
             
             </summary>
            <param name="type"></param>
             <param name="priority"></param>
             <param name="address"></param>
             <param name="worksheet"></param>
             <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAverageGroup.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
             <summary>
             
             </summary>
            <param name="type"></param>
             <param name="priority"></param>
             <param name="address"></param>
             <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBeginsWith">
            <summary>
            ExcelConditionalFormattingBeginsWith
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBeginsWith.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBeginsWith.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBeginsWith.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBeginsWith.Text">
            <summary>
            The text to search in the beginning of the cell
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBelowAverage">
            <summary>
            ExcelConditionalFormattingBelowAverage
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBelowAverage.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBelowAverage.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBelowAverage.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBelowOrEqualAverage">
            <summary>
            ExcelConditionalFormattingBelowOrEqualAverage
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBelowOrEqualAverage.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBelowOrEqualAverage.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBelowOrEqualAverage.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBelowStdDev">
            <summary>
            ExcelConditionalFormattingBelowStdDev
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBelowStdDev.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBelowStdDev.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBelowStdDev.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBetween">
            <summary>
            ExcelConditionalFormattingBetween
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBetween.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBetween.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBetween.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBottom">
            <summary>
            ExcelConditionalFormattingBottom
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBottom.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBottom.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBottom.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBottomPercent">
            <summary>
            ExcelConditionalFormattingBottomPercent
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBottomPercent.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBottomPercent.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBottomPercent.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsBlanks">
            <summary>
            ExcelConditionalFormattingContainsBlanks
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsBlanks.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsBlanks.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsBlanks.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsErrors">
            <summary>
            ExcelConditionalFormattingContainsErrors
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsErrors.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsErrors.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsErrors.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsText">
            <summary>
            ExcelConditionalFormattingContainsText
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsText.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsText.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsText.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsText.Text">
            <summary>
            The text to search inside the cell
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingDataBar">
            <summary>
            Databar
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingDataBar.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingDataBar.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingDataBar.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingDataBar.ShowValue">
            <summary>
            If true the values of the cells are shown, otherwise the cells only contain the databars.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingDataBar.LowValue">
            <summary>
            The low value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingDataBar.HighValue">
            <summary>
            The high value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingDataBar.Color">
            <summary>
            The color of the databar
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingDuplicateValues">
            <summary>
            ExcelConditionalFormattingDuplicateValues
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingDuplicateValues.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingDuplicateValues.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingDuplicateValues.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingEndsWith">
            <summary>
            ExcelConditionalFormattingEndsWith
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingEndsWith.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingEndsWith.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingEndsWith.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingEndsWith.Text">
            <summary>
            The text to search in the end of the cell
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingEqual">
            <summary>
            ExcelConditionalFormattingEqual
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingEqual.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingEqual.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingEqual.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingExpression">
            <summary>
            ExcelConditionalFormattingExpression
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingExpression.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingExpression.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingExpression.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingFiveIconSet">
            <summary>
            Conditional formatting with a five icon set
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingFiveIconSet.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingFiveIconSet.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingFiveIconSet.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingFiveIconSet.Icon5">
            <summary>
            Icon 5 value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingFiveIconSet.Icon4">
            <summary>
            Icon 4 value
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingFourIconSet">
            <summary>
            Conditional formatting with a four icon set
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingFourIconSet.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingFourIconSet.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingFourIconSet.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingFourIconSet.Icon4">
            <summary>
            Icon 4 value
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingGreaterThan">
            <summary>
            ExcelConditionalFormattingGreaterThan
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingGreaterThan.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingGreaterThan.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingGreaterThan.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingGreaterThanOrEqual">
            <summary>
            ExcelConditionalFormattingGreaterThanOrEqual
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingGreaterThanOrEqual.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingGreaterThanOrEqual.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingGreaterThanOrEqual.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLast7Days">
            <summary>
            ExcelConditionalFormattingLast7Days
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLast7Days.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLast7Days.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLast7Days.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLastMonth">
            <summary>
            ExcelConditionalFormattingLastMonth
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLastMonth.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLastMonth.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLastMonth.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLastWeek">
            <summary>
            ExcelConditionalFormattingLastWeek
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLastWeek.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLastWeek.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLastWeek.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLessThan">
            <summary>
            ExcelConditionalFormattingLessThan
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLessThan.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLessThan.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLessThan.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLessThanOrEqual">
            <summary>
            ExcelConditionalFormattingLessThanOrEqual
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLessThanOrEqual.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLessThanOrEqual.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLessThanOrEqual.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNextMonth">
            <summary>
            ExcelConditionalFormattingNextMonth
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNextMonth.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNextMonth.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNextMonth.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNextWeek">
            <summary>
            ExcelConditionalFormattingNextWeek
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNextWeek.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNextWeek.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNextWeek.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotBetween">
            <summary>
            ExcelConditionalFormattingNotBetween
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotBetween.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotBetween.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotBetween.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsBlanks">
            <summary>
            ExcelConditionalFormattingNotContainsBlanks
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsBlanks.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsBlanks.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsBlanks.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsErrors">
            <summary>
            ExcelConditionalFormattingNotContainsErrors
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsErrors.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsErrors.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsErrors.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsText">
            <summary>
            ExcelConditionalFormattingNotContainsText
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsText.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsText.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsText.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsText.Text">
            <summary>
            The text to search inside the cell
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotEqual">
            <summary>
            ExcelConditionalFormattingNotEqual
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotEqual.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotEqual.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotEqual.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule">
            <summary>
            
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule._changingPriority">
            <summary>
            Sinalize that we are in a Cnaging Priorities opeartion so that we won't enter
            a recursive loop.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Initialize the <see cref="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule"/>
            </summary>
            <param name="type"></param>
            <param name="address"></param>
            <param name="priority">Used also as the cfRule unique key</param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNamespaceManager)">
            <summary>
            Initialize the <see cref="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule"/>
            </summary>
            <param name="type"></param>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Node">
            <summary>
            Get the &lt;cfRule&gt; node
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Address">
            <summary>
            The address of the conditional formatting rule
            </summary>
            <remarks>
            The address is stored in a parent node called &lt;conditionalFormatting&gt; in the
            @sqref attribute. Excel groups rules that have the same address inside one node.
            </remarks>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.PivotTable">
            <summary>
            Indicates that the conditional formatting is associated with a PivotTable
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Type">
            <summary>
            Type of conditional formatting rule.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Priority">
            <summary>
            The priority of the rule. 
            A lower values are higher priority than higher values, where 1 is the highest priority.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.StopIfTrue">
            <summary>
            If this property is true, no rules with lower priority shall be applied over this rule,
            when this rule evaluates to true.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.DxfId">
            <summary>
            The DxfId (Differential Formatting style id)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Style">
            <summary>
            The style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.StdDev">
            <summary>
            StdDev (zero is not allowed and will be converted to 1)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Rank">
            <summary>
            Rank (zero is not allowed and will be converted to 1)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.AboveAverage">
            <summary>
            Above average
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.EqualAverage">
            <summary>
            EqualAverage
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Bottom">
            <summary>
            Bottom attribute
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Percent">
            <summary>
            Percent attribute
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.TimePeriod">
            <summary>
            TimePeriod
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Operator">
            <summary>
            Operator
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Formula">
            <summary>
            Formula
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Formula2">
            <summary>
            Formula2
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.As">
            <summary>
            Provides access to type conversion for all conditional formatting rules.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThisMonth">
            <summary>
            ExcelConditionalFormattingThisMonth
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThisMonth.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThisMonth.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThisMonth.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThisWeek">
            <summary>
            ExcelConditionalFormattingThisWeek
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThisWeek.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThisWeek.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThisWeek.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThreeColorScale">
            <summary>
            ExcelConditionalFormattingThreeColorScale
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThreeColorScale._lowValue">
            <summary>
            Private Low Value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThreeColorScale._middleValue">
            <summary>
            Private Middle Value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThreeColorScale._highValue">
            <summary>
            Private High Value
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThreeColorScale.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThreeColorScale.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThreeColorScale.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThreeColorScale.LowValue">
            <summary>
            Low Value for Three Color Scale Object Value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThreeColorScale.MiddleValue">
            <summary>
            Middle Value for Three Color Scale Object Value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThreeColorScale.HighValue">
            <summary>
            High Value for Three Color Scale Object Value
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThreeIconSet">
            <summary>
            Conditional formatting with a three icon set
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconSetBase`1">
            <summary>
            ExcelConditionalFormattingThreeIconSet
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconSetBase`1.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconSetBase`1.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
             <summary>
             
             </summary>
            <param name="type"></param>
             <param name="priority"></param>
             <param name="address"></param>
             <param name="worksheet"></param>
             <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconSetBase`1.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
             <summary>
             
             </summary>
            <param name="type"></param>
             <param name="priority"></param>
             <param name="address"></param>
             <param name="worksheet"></param>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconSetBase`1.Icon1">
            <summary>
            Settings for icon 1 in the iconset
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconSetBase`1.Icon2">
            <summary>
            Settings for icon 2 in the iconset
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconSetBase`1.Icon3">
            <summary>
            Settings for icon 2 in the iconset
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconSetBase`1.Reverse">
            <summary>
            Reverse the order of the icons
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconSetBase`1.ShowValue">
            <summary>
            If the cell values are visible
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconSetBase`1.IconSet">
            <summary>
            Type of iconset
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTimePeriodGroup">
            <summary>
            ExcelConditionalFormattingTimePeriodGroup
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTimePeriodGroup.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTimePeriodGroup.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTimePeriodGroup.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingToday">
            <summary>
            ExcelConditionalFormattingToday
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingToday.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingToday.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingToday.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTomorrow">
            <summary>
            ExcelConditionalFormattingTomorrow
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTomorrow.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTomorrow.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTomorrow.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTop">
            <summary>
            ExcelConditionalFormattingTop
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTop.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTop.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTop.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTopPercent">
            <summary>
            ExcelConditionalFormattingTopPercent
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTopPercent.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTopPercent.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTopPercent.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTwoColorScale">
            <summary>
            ExcelConditionalFormattingTwoColorScale
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTwoColorScale._lowValue">
            <summary>
            Private Low Value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTwoColorScale._highValue">
            <summary>
            Private High Value
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTwoColorScale.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTwoColorScale.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTwoColorScale.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTwoColorScale.LowValue">
            <summary>
            Low Value for Two Color Scale Object Value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTwoColorScale.HighValue">
            <summary>
            High Value for Two Color Scale Object Value
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingUniqueValues">
            <summary>
            ExcelConditionalFormattingUniqueValues
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingUniqueValues.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingUniqueValues.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingUniqueValues.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingYesterday">
            <summary>
            ExcelConditionalFormattingYesterday
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingYesterday.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingYesterday.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingYesterday.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.Configuration.ExcelPackageConfiguration">
            <summary>
            Parameters for configuring the <see cref="T:OfficeOpenXml.ExcelPackage"/> class before usage
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Configuration.ExcelPackageConfiguration.SuppressInitializationExceptions">
            <summary>
            If set to true errors/exceptions that occurs during initialization of the ExcelPackage class will
            be suppressed and logged in <see cref="P:OfficeOpenXml.ExcelPackage.InitializationErrors"/>.
            
            If set to false these Exceptions will be rethrown.
            
            Default value of this property is false.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Configuration.ExcelPackageConfiguration.JsonConfigBasePath">
            <summary>
            Path of the directory where the json configuration file is located.
            Default value is the path returned from <see cref="M:System.IO.Directory.GetCurrentDirectory"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Configuration.ExcelPackageConfiguration.JsonConfigFileName">
            <summary>
            File name of the json configuration file.
            Default value is appsettings.json
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Configuration.ExcelPackageConfiguration.Default">
            <summary>
            Configuration with default values.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Configuration.ExcelPackageConfiguration.Reset">
            <summary>
            Resets configuration to its default values
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Core.CellStore.ArrayUtil">
            <summary>
            These binary search functions are identical, except that one uses a struc and the other a class.
            Structs consume less memory and are also faster.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Core.CellStore.ArrayUtil.OptimizedBinarySearch(OfficeOpenXml.Core.CellStore.IndexItem[],System.Int32,System.Int32)">
            <summary>
            For the struct.
            </summary>
            <param name="store"></param>
            <param name="pos"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Core.CellStore.CellStoreSettings">
            <summary>
            For testing purpose only. Can be removed when cells store is fully optimized.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Core.CellStore.CellStore`1">
            <summary>
            This is the store for all Rows, Columns and Cells.
            It is a Dictionary implementation that allows you to change the Key.
            Rows and Column data is stored in column with index 0(row data) and row with index 0 (column data).
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Core.CellStore.CellStore`1.#ctor">
            <summary>
            For internal use only. 
            Must be set before any instance of the CellStore is created.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Core.CellStore.CellStore`1.DeleteRows(OfficeOpenXml.Core.CellStore.ColumnIndex{`0},System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Delete a number of rows from a specific row
            </summary>
            <param name="fromRow">The first row to delete</param>
            <param name="rows">Number of rows</param>
            <param name="shift">If rows are shifted upwards</param>
            <param name="column">The column index</param>
            <param name="pagePos">The page position</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Core.CellStore.CellStore`1.DeletePages(System.Int32,System.Int32,OfficeOpenXml.Core.CellStore.ColumnIndex{`0},System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="fromRow">From row</param>
            <param name="rows">Number of rows</param>
            <param name="column">The column index</param>
            <param name="pagePos">The page position</param>
            <param name="shift">Shift cells or not</param>
            <returns>Return rows left to delete, for DeleteCells</returns>
        </member>
        <member name="M:OfficeOpenXml.Core.CellStore.CellStore`1.DeleteRowsInsidePage(OfficeOpenXml.Core.CellStore.ColumnIndex{`0},System.Int32,System.Int32,System.Int32,System.Boolean)">
            
        </member>
        <member name="M:OfficeOpenXml.Core.CellStore.CellStore`1.AddPage(OfficeOpenXml.Core.CellStore.ColumnIndex{`0},OfficeOpenXml.Core.CellStore.PageIndex,System.Int32)">
            <summary>
            Add a new page to the collection
            </summary>
            <param name="column">The column</param>
            <param name="pos">Position</param>
            <param name="page">The new page object to add</param>
        </member>
        <member name="M:OfficeOpenXml.Core.CellStore.CellStore`1.AddPage(OfficeOpenXml.Core.CellStore.ColumnIndex{`0},System.Int32)">
            <summary>
            Add a new page to the collection
            </summary>
            <param name="column">The column</param>
            <param name="pos">Position</param>
        </member>
        <member name="M:OfficeOpenXml.Core.CellStore.CellStore`1.EnsureColumnsExists(System.Int32,System.Int32)">
            <summary>
            Before enumerating columns where values are set to the cells store, 
            this method makes sure the columns are created before the enumerator is created, so the positions will not get out of sync when a new column is added.
            </summary>
            <param name="fromCol">From column</param>
            <param name="toCol">To Column</param>
        </member>
        <member name="T:OfficeOpenXml.Core.CellStore.CellStoreValue">
            <summary>
            This class represents
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Core.CellStore.ExcelValue">
            <summary>
            For cell value structure (for memory optimization of huge sheet)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Core.CellStore.PageIndex.RowCount">
            <summary>
            Rows in the rows collection. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Core.CellStore.PageIndex.RowSpan">
            <summary>
            First row index minus last row index
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Core.CellStore.RangeDictionary`1">
            <summary>
            This class stores ranges to keep track if they have been accessed before and adds a reference to <see cref="!:T"/>.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Core.EPPlusReadOnlyList`1">
            <summary>
            A readonly collection of a generic type
            </summary>
            <typeparam name="T">The generic type</typeparam>
        </member>
        <member name="M:OfficeOpenXml.Core.EPPlusReadOnlyList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return the enumerator for the collection
            </summary>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Core.EPPlusReadOnlyList`1.Item(System.Int32)">
            <summary>
            The indexer for the collection
            </summary>
            <param name="index">The index</param>
            <returns>Returns the object at the index</returns>
        </member>
        <member name="M:OfficeOpenXml.Core.EPPlusReadOnlyList`1.GetIndexByValue(`0)">
            <summary>
            Retrives the index of the supplied value
            </summary>
            <param name="value"></param>
            <returns>The index</returns>
        </member>
        <member name="P:OfficeOpenXml.Core.EPPlusReadOnlyList`1.Count">
            <summary>
            Number of items in the collection.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Core.R1C1Translator">
            <summary>
            Translate addresses between the R1C1 and A1 notation
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Core.R1C1Translator.FromR1C1Formula(System.String,System.Int32,System.Int32)">
            <summary>
            Translate addresses in a formula from R1C1 to A1
            </summary>
            <param name="formula">The formula</param>
            <param name="row">The row of the cell to calculate from</param>
            <param name="col">The column of the cell to calculate from</param>
            <returns>The formula in A1 notation</returns>
        </member>
        <member name="M:OfficeOpenXml.Core.R1C1Translator.ToR1C1Formula(System.String,System.Int32,System.Int32)">
            <summary>
            Translate addresses in a formula from A1 to R1C1
            </summary>
            <param name="formula">The formula</param>
            <param name="row">The row of the cell to calculate from</param>
            <param name="col">The column of the cell to calculate from</param>
            <returns>The formula in R1C1 notation</returns>        
        </member>
        <member name="M:OfficeOpenXml.Core.R1C1Translator.FromR1C1(System.String,System.Int32,System.Int32)">
            <summary>
            Translate an address from R1C1 to A1
            </summary>
            <param name="r1C1Address">The address</param>
            <param name="row">The row of the cell to calculate from</param>
            <param name="col">The column of the cell to calculate from</param>
            <returns>The address in A1 notation</returns>        
        </member>
        <member name="M:OfficeOpenXml.Core.R1C1Translator.ToR1C1(OfficeOpenXml.ExcelAddressBase,System.Int32,System.Int32)">
            <summary>
            Translate an address from A1 to R1C1
            </summary>
            <param name="address">The address</param>
            <param name="row">The row of the cell to calculate from</param>
            <param name="col">The column of the cell to calculate from</param>
            <returns>The address in R1C1 notation</returns>        
        </member>
        <member name="T:OfficeOpenXml.Core.Worksheet.Fill.FillDateParams">
            <summary>
            Parameters for the <see cref="M:OfficeOpenXml.ExcelRangeBase.FillDateTime(System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillDateParams})" /> method 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Core.Worksheet.Fill.FillDateParams.StartValue">
            <summary>
            The start value. If null, the first value in the row/column is used. 
            <seealso cref="P:OfficeOpenXml.Core.Worksheet.Fill.FillParams.Direction"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Core.Worksheet.Fill.FillDateParams.EndValue">
            <summary>
            When this value is exceeded the fill stops
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Core.Worksheet.Fill.FillDateParams.StepValue">
            <summary>
            The value to add for each step. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Core.Worksheet.Fill.FillDateParams.DateTimeUnit">
            <summary>
            The date unit added per cell
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Core.Worksheet.Fill.FillDateParams._excludedWeekdays">
            <summary>
            Only fill weekdays
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Core.Worksheet.Fill.FillDateParams.SetExcludedWeekdays(System.DayOfWeek[])">
            <summary>
            Excludes the week days supplied
            </summary>
            <param name="weekdays">The excluded week days</param>
        </member>
        <member name="P:OfficeOpenXml.Core.Worksheet.Fill.FillDateParams._holidayCalendar">
            <summary>
            A list with week days treated as holidays.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Core.Worksheet.Fill.FillDateParams.SetExcludedDates(System.DateTime[])">
            <summary>
            Excludes the dates supplied
            </summary>
            <param name="holidayDates">The dates treated as week days</param>
        </member>
        <member name="M:OfficeOpenXml.Core.Worksheet.Fill.FillDateParams.SetExcludedDates(System.Collections.Generic.IEnumerable{System.DateTime})">
            <summary>
            Excludes the dates supplied
            </summary>
            <param name="holidayDates">The dates treated as week days</param>
        </member>
        <member name="T:OfficeOpenXml.Core.Worksheet.Fill.FillListParams">
            <summary>
            Parameters for the <see cref="M:OfficeOpenXml.ExcelRangeBase.FillList``1(System.Collections.Generic.IEnumerable{``0},System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillListParams})" /> method 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Core.Worksheet.Fill.FillListParams.StartIndex">
            <summary>
            The start index in the list. 
            <seealso cref="P:OfficeOpenXml.Core.Worksheet.Fill.FillParams.Direction"/>
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams">
            <summary>
            Parameters for the <see cref="M:OfficeOpenXml.ExcelRangeBase.FillNumber(System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams})" /> method 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams.StartValue">
            <summary>
            The start value. If null, the first value in the row/column is used. 
            <seealso cref="P:OfficeOpenXml.Core.Worksheet.Fill.FillParams.Direction"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams.EndValue">
            <summary>
            When this value is exceeded the fill stops
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams.StepValue">
            <summary>
            The value to use in the calculation for each step. 
            <seealso cref="P:OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams.CalculationMethod"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams.CalculationMethod">
            <summary>
            The calculation method to use 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Core.Worksheet.Fill.FillParams">
            <summary>
            Shared base class for <see cref="T:OfficeOpenXml.ExcelRangeBase"/> Fill-methods
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Core.Worksheet.Fill.FillParams.StartPosition">
            <summary>
            If the fill starts from the top-left cell or the bottom right cell.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Core.Worksheet.Fill.FillParams.Direction">
            <summary>
            The direction of the fill
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Core.Worksheet.Fill.FillParams.NumberFormat">
            <summary>
            The number format to be appled to the range.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Core.Worksheet.Fonts.GenericFontMetrics.FontScaleFactors">
            <summary>
            The binary files created for text measurements of various font families just contains
            approximations of the characters where the carachters are divided into a number of width
            classes. This alone is not enough to get close enough to a good result.
            This class contains various scaling factors used to get the text measurements as close
            as the spreadsheet applications GUI as possible.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Core.Worksheet.Fonts.GenericFontMetrics.UniCodeRange.JapaneseKanji">
            <summary>
            Unicode ranges to cover Japanese/Kanji characters
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Core.Worksheet.Core.Worksheet.Fonts.GenericMeasurements.GenericFontMetricsLoader">
            <summary>
            Loads serialized font metrics
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Core.Worksheet.Core.Worksheet.Fonts.GenericMeasurements.GenericFontMetricsLoader.LoadFontMetrics">
            <summary>
            Loads all serialized font metrics from the resources/SerializedFonts.zip archive
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Core.Worksheet.Core.Worksheet.Fonts.GenericMeasurements.GenericFontMetricsTextMeasurer.MeasureText(System.String,OfficeOpenXml.Interfaces.Drawing.Text.MeasurementFont)">
            <summary>
            Measures the supplied text
            </summary>
            <param name="text">The text to measure</param>
            <param name="font">Font of the text to measure</param>
            <returns>A <see cref="T:OfficeOpenXml.Interfaces.Drawing.Text.TextMeasurement"/></returns>
        </member>
        <member name="T:OfficeOpenXml.eCalculationMethod">
            <summary>
            Calculation Method for number fill operations
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eCalculationMethod.Add">
            <summary>
            Add the value to the next fill
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eCalculationMethod.Multiply">
            <summary>
            Multiply the value to the next fill
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eDateTimeUnit">
            <summary>
            The date units for date fill operations
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDateTimeUnit.Year">
            <summary>
            Adds a Year
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDateTimeUnit.Month">
            <summary>
            Adds a Month
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDateTimeUnit.Week">
            <summary>
            Adds 7 Days
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDateTimeUnit.Day">
            <summary>
            Adds a Day
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDateTimeUnit.Hour">
            <summary>
            Adds an Hour
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDateTimeUnit.Minute">
            <summary>
            Adds a Minute
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDateTimeUnit.Second">
            <summary>
            Adds a Second
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDateTimeUnit.Ticks">
            <summary>
            Adds ticks
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eFillDirection">
            <summary>
            If the fill is performed Down/Up (Column) or Left/Right (Row).
            Also see <see cref="T:OfficeOpenXml.eFillStartPosition"/>
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eFillDirection.Row">
            <summary>
            The fill is performed row-wise
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eFillDirection.Column">
            <summary>
            The fill is performed column-wise
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eFillStartPosition">
            <summary>
            If the fill starts from the top-left cell or the bottom-right cell.
            Also see <seealso cref="T:OfficeOpenXml.eFillDirection"/>
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eFillStartPosition.TopLeft">
            <summary>
            The fill starts from the top-left cell and fills to the left and down depending on the <see cref="T:OfficeOpenXml.eFillDirection"/>
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eFillStartPosition.BottomRight">
            <summary>
            The fill starts from the bottom-right cell and fills to the right and up depending on the <see cref="T:OfficeOpenXml.eFillDirection"/>
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation">
            <summary>
            A generic interface for all data validations. Specialized implementation interfaces should inherit this interface.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.Uid">
            <summary>
            Unique id of the data validation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.Address">
            <summary>
            Address of data validation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.ValidationType">
            <summary>
            Validation type
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.ErrorStyle">
            <summary>
            Controls how Excel will handle invalid values.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.AllowBlank">
            <summary>
            True if input message should be shown
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.ShowInputMessage">
            <summary>
            True if input message should be shown
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.ShowErrorMessage">
            <summary>
            True if error message should be shown.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.ErrorTitle">
            <summary>
            Title of error message box (see property ShowErrorMessage)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.Error">
            <summary>
            Error message box text (see property ShowErrorMessage)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.PromptTitle">
            <summary>
            Title of info box if input message should be shown (see property ShowInputMessage)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.Prompt">
            <summary>
            Info message text (see property ShowErrorMessage)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.AllowsOperator">
            <summary>
            True if the current validation type allows operator.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.Validate">
            <summary>
            Validates the state of the validation.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.As">
            <summary>
            Use this property to cast an instance of <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation"/> to its subtype, see <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidationAsType"/>.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.ImeMode">
            <summary>
            Defines mode for Input Method Editor used in east-asian languages
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.IsStale">
            <summary>
            Indicates whether this instance is stale, see https://github.com/EPPlusSoftware/EPPlus/wiki/Data-validation-Exceptions
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationAny">
            <summary>
            Data validation interface for Any value validation.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationCustom">
            <summary>
            Data validation interface for custom validation.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationDateTime">
            <summary>
            Validation interface for datetime validations
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationDecimal">
            <summary>
            Data validation interface for decimal values
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationInt">
            <summary>
            Interface for a datavalidation for an integer value (whole validation in Excel)
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationList">
            <summary>
            Interface for a data validation list
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationList.HideDropDown">
            <summary>
            True if an in-cell dropdown should be hidden.
            </summary>
            <remarks>
            This property corresponds to the showDropDown attribute of a data validation in Office Open Xml. Strangely enough this
            attributes hides the in-cell dropdown if it is true and shows the dropdown if it is not present or false. We have checked
            this in both Ms Excel and Google sheets and it seems like this is how it is implemented in both applications. Hence why we have
            renamed this property to HideDropDown since that better corresponds to the functionality.
            </remarks>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationTime">
            <summary>
            Data validation interface for time validation.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationWithFormula`1">
            <summary>
            Interface for a datavalidation with an excel formula
            </summary>
            <typeparam name="T">An instance implementing the <see cref="T:OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormula"></see> interface.</typeparam>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationWithFormula`1.Formula">
            <summary>
            Formula of the validation
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationWithFormula2`1">
            <summary>
            Interface for a data validation with two formulas
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationWithFormula2`1.Formula2">
            <summary>
            Formula 2
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationWithOperator">
            <summary>
            Represents a validation with an operator
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationWithOperator.Operator">
            <summary>
            Operator type
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidation">
            <summary>
            Abstract base class for all Excel datavalidations. Contains functionlity which is common for all these different validation types.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidation.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="uid">Id for validation</param>
            <param name="address">adress validation is applied to</param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidation.#ctor(System.Xml.XmlReader)">
            <summary>
            Read-File Constructor
            </summary>
            <param name="xr"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidation.#ctor(OfficeOpenXml.DataValidation.ExcelDataValidation)">
            <summary>
            Copy-Constructor
            </summary>
            <param name="validation">Validation to copy from</param>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.Uid">
            <summary>
            Uid of the data validation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.Address">
            <summary>
            Address of data validation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.ValidationType">
            <summary>
            Validation type
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.ErrorStyle">
            <summary>
            Warning style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.AllowBlank">
            <summary>
            True if blanks should be allowed
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.ShowInputMessage">
            <summary>
            True if input message should be shown
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.ShowErrorMessage">
            <summary>
            True if error message should be shown
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.ErrorTitle">
            <summary>
            Title of error message box
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.Error">
            <summary>
            Error message box text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.PromptTitle">
            <summary>
            Title of the validation message box.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.Prompt">
            <summary>
            Text of the validation message box.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.AllowsOperator">
            <summary>
            True if the current validation type allows operator.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidation.Validate">
            <summary>
            This method will validate the state of the validation
            </summary>
            <exception cref="T:System.InvalidOperationException">If the state breaks the rules of the validation</exception>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.As">
            <summary>
            Us this property to case <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation"/>s to its subtypes
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.IsStale">
            <summary>
            Indicates whether this instance is stale, see https://github.com/EPPlusSoftware/EPPlus/wiki/Data-validation-Exceptions
            DEPRECATED as of Epplus 6.2.
            This as validations can no longer be stale since all attributes are now always fresh and held in the system.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.Operator">
            <summary>
            Operator for comparison between the entered value and Formula/Formulas.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.InternalValidationType">
            <summary>
            Type to determine if extLst or not
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.OnFormulaChanged">
            <summary>
            Event method for changing internal type when referring to an external worksheet.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidation.GetClone">
            <summary>
            Create a Deep-Copy of this validation.
            Note that one should also implement a separate clone() method casting to the child class
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationAny">
            <summary>
            Any value validation.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationAny.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationAny.#ctor(System.Xml.XmlReader)">
            <summary>
            Constructor for reading data
            </summary>
            <param name="xr">The XmlReader to read from</param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationAny.#ctor(OfficeOpenXml.DataValidation.ExcelDataValidationAny)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy"></param>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationAny.AllowsOperator">
            <summary>
            True if the current validation type allows operator.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationAny.ValidationType">
            <summary>
            Validation type
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationAsType">
            <summary>
            Provides a simple way to type cast a data validation object to its actual class.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationAsType.Type``1">
            <summary>
            Converts the data validation object to it's implementing class or any of the abstract classes/interfaces inheriting the <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation"/> interface.        
            </summary>
            <typeparam name="T">The type of datavalidation object. T must be inherited from <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation"/></typeparam>
            <returns>An instance of <typeparamref name="T"/> or null if type casting fails.</returns>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationAsType.ListValidation">
            <summary>
            Returns the data validation object as <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationList"/>
            </summary>
            <returns>The data validation as an <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationList"/> or null if typecasting fails</returns>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationAsType.IntegerValidation">
            <summary>
            Returns the data validation object as <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationInt"/>
            </summary>
            <returns>The data validation as an <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationInt"/> or null if typecasting fails</returns>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationAsType.DateTimeValidation">
            <summary>
            Returns the data validation object as <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationDateTime"/>
            </summary>
            <returns>The data validation as an <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationDateTime"/> or null if typecasting fails</returns>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationAsType.TimeValidation">
            <summary>
            Returns the data validation object as <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationTime"/>
            </summary>
            <returns>The data validation as an <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationTime"/> or null if typecasting fails</returns>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationAsType.DecimalValidation">
            <summary>
            Returns the data validation object as <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationDecimal"/>
            </summary>
            <returns>The data validation as an <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationDecimal"/> or null if typecasting fails</returns>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationAsType.AnyValidation">
            <summary>
            Returns the data validation object as <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationAny"/>
            </summary>
            <returns>The data validation as an <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationAny"/> or null if typecasting fails</returns>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationAsType.CustomValidation">
            <summary>
            Returns the data validation object as <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationCustom"/>
            </summary>
            <returns>The data validation as an <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationCustom"/> or null if typecasting fails</returns>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationCollection">
            <summary>
            <para>
            Collection of <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidation"/>. This class is providing the API for EPPlus data validation.
            </para>
            <para>
            The public methods of this class (Add[...]Validation) will create a datavalidation entry in the worksheet. When this
            validation has been created changes to the properties will affect the workbook immediately.
            </para>
            <para>
            Each type of validation has either a formula or a typed value/values, except for custom validation which has a formula only.
            </para>
            <code>
            // Add a date time validation
            var validation = worksheet.DataValidation.AddDateTimeValidation("A1");
            // set validation properties
            validation.ShowErrorMessage = true;
            validation.ErrorTitle = "An invalid date was entered";
            validation.Error = "The date must be between 2011-01-31 and 2011-12-31";
            validation.Prompt = "Enter date here";
            validation.Formula.Value = DateTime.Parse("2011-01-01");
            validation.Formula2.Value = DateTime.Parse("2011-12-31");
            validation.Operator = ExcelDataValidationOperator.between;
            </code>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.ReadDataValidations(System.Xml.XmlReader)">
            <summary>
            Read data validation from xml via xr reader
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.ValidateAddress(System.String,OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation)">
            <summary>
            Validates address - not empty, collisions
            </summary>
            <param name="address"></param>
            <param name="validatingValidation"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.ValidateAll">
            <summary>
            Validates all data validations.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.AddCopyOfDataValidation(OfficeOpenXml.DataValidation.ExcelDataValidation,System.String)">
            <summary>
            Optionally add address at end for new copy with address in range
            </summary>
            <param name="dv"></param>
            <param name="address"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.AddAnyValidation(System.String)">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidationAny"/> to the worksheet.
            </summary>
            <param name="address">The range/address to validate</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.AddIntegerValidation(System.String)">
            <summary>
            Adds an <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationInt"/> to the worksheet. Whole means that the only accepted values
            are integer values.
            </summary>
            <param name="address">the range/address to validate</param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.AddTextLengthValidation(System.String)">
            <summary>
            Adds an <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationInt"/> regarding text length to the worksheet.
            </summary>
            <param name="address">The range/address to validate</param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.AddDecimalValidation(System.String)">
            <summary>
            Addes an <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationDecimal"/> to the worksheet. The only accepted values are
            decimal values.
            </summary>
            <param name="address">The range/address to validate</param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.AddListValidation(System.String)">
            <summary>
            Adds an <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationList"/> to the worksheet. The accepted values are defined
            in a list.
            </summary>
            <param name="address">The range/address to validate</param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.AddDateTimeValidation(System.String)">
            <summary>
            Adds an <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationDateTime"/> to the worksheet.
            </summary>
            <param name="address">The range/address to validate</param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.AddTimeValidation(System.String)">
            <summary>
            Adds an <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationDateTime"/> to the worksheet.
            </summary>
            <param name="address">The range/address to validate</param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.AddCustomValidation(System.String)">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidationCustom"/> to the worksheet.
            </summary>
            <param name="address">The range/address to validate</param>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.Count">
            <summary>
            Number of validations
            </summary>3
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.InternalValidationEnabled">
            <summary>
            Epplus validates that all data validations are consistend and valid
            when they are added and when a workbook is saved. Since this takes some
            resources, it can be disabled for improve performance. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.Item(System.Int32)">
            <summary>
            Index operator, returns by 0-based index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.Item(System.String)">
            <summary>
            Index operator, returns a data validation which address partly or exactly matches the searched address.
            </summary>
            <param name="address">A cell address or range</param>
            <returns>A <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidation"/> or null if no match</returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.FindAll(System.Predicate{OfficeOpenXml.DataValidation.ExcelDataValidation})">
            <summary>
            Returns all validations that matches the supplied predicate <paramref name="match"/>.
            </summary>
            <param name="match">predicate to filter out matching validations</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.Remove(OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation)">
            <summary>
            Removes an <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidation"/> from the collection.
            </summary>
            <param name="item">The item to remove</param>
            <returns>True if remove succeeds, otherwise false</returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="item"/> is null</exception>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.Find(System.Predicate{OfficeOpenXml.DataValidation.ExcelDataValidation})">
            <summary>
            Returns the first matching validation.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.Clear">
            <summary>
            Removes all validations from the collection.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.RemoveAll(System.Predicate{OfficeOpenXml.DataValidation.ExcelDataValidation})">
            <summary>
            Removes the validations that matches the predicate
            </summary>
            <param name="match"></param>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationCustom">
            <summary>
            Custom validation, i.e. a formula.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCustom.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="worksheetName"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCustom.#ctor(System.Xml.XmlReader)">
            <summary>
            Constructor for reading data
            </summary>
            <param name="xr">The XmlReader to read from</param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCustom.#ctor(OfficeOpenXml.DataValidation.ExcelDataValidationCustom)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy"></param>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationCustom.ValidationType">
            <summary>
            Property for determining type of validation
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationDateTime">
            <summary>
            Validation for <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationDateTime.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="worksheetName"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationDateTime.#ctor(System.Xml.XmlReader)">
            <summary>
            Constructor for reading data
            </summary>
            <param name="xr">The XmlReader to read from</param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationDateTime.#ctor(OfficeOpenXml.DataValidation.ExcelDataValidationDateTime)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy"></param>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationDateTime.ValidationType">
            <summary>
            Property for determining type of validation
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationDecimal">
            <summary>
            Data validation for decimal values
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationDecimal.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="worksheetName"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationDecimal.#ctor(System.Xml.XmlReader)">
            <summary>
            Constructor for reading data
            </summary>
            <param name="xr">The XmlReader to read from</param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationDecimal.#ctor(OfficeOpenXml.DataValidation.ExcelDataValidationDecimal)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy"></param>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationDecimal.ValidationType">
            <summary>
            Property for determining type of validation
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationFactory">
            <summary>
            Factory class for ExcelDataValidation.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationFactory.Create(System.Xml.XmlReader)">
            <summary>
            Creates an instance of <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidation"/> out of the reader.
            </summary>
            <param name="xr"></param>
            <returns>"</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationImeMode">
            <summary>
            Mode for east-asian languages who use Input Method Editors(IME)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationImeMode.NoControl">
            <summary>
            Default. Has no effect on IME
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationImeMode.Off">
            <summary>
            Forces IME mode to OFF
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationImeMode.On">
            <summary>
            Forces the IMEmode to be on when first selecting the cell
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationImeMode.Disabled">
            <summary>
            IME mode is disabled when cell is selected
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationImeMode.Hiragana">
            <summary>
            Forces on and Hiragana (only applies if Japanese IME)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationImeMode.FullKatakana">
            <summary>
            Forces on and full-width katakana
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationImeMode.HalfKatakana">
            <summary>
            Forces on and half-width katakana
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationImeMode.FullAlpha">
            <summary>
            Forces on and Alpha-Numeric IME
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationImeMode.HalfAlpha">
            <summary>
            Forces on and half-width alpha-numeric
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationImeMode.FullHangul">
            <summary>
            Forces on and Full-width Hangul if Korean IME
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationImeMode.HalfHangul">
            <summary>
            Forces on and half-width Hangul
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationInt">
            <summary>
            Data validation for integer values.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationInt.#ctor(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Constructor for reading data
            </summary>
            <param name="xr">The XmlReader to read from</param>
             <param name="isTextLength">Bool to define type of int validation</param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationInt.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="worksheetName"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="isTextLength">Bool to define type of int validation</param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationInt.#ctor(OfficeOpenXml.DataValidation.ExcelDataValidationInt)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy"></param>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationInt.ValidationType">
            <summary>
            Property for determining type of validation
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationInt.Clone">
            <summary>
            Return a deep-copy clone of validation
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationList">
            <summary>
            This class represents an List data validation.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationList.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationList.#ctor(System.Xml.XmlReader)">
            <summary>
            Constructor for reading data
            </summary>
            <param name="xr">The XmlReader to read from</param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationList.#ctor(OfficeOpenXml.DataValidation.ExcelDataValidationList)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy"></param>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationList.AllowsOperator">
            <summary>
            Read-Only property for seeing if this dataValidation type has an operator.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationList.ValidationType">
            <summary>
            Property for determining type of validation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationList.HideDropDown">
            <summary>
            True if an in-cell dropdown should be hidden.
            </summary>
            <remarks>
            This property corresponds to the showDropDown attribute of a data validation in Office Open Xml. Strangely enough this
            attributes hides the in-cell dropdown if it is true and shows the dropdown if it is not present or false. We have checked
            this in both Ms Excel and Google sheets and it seems like this is how it is implemented in both applications. Hence why we have
            renamed this property to HideDropDown since that better corresponds to the functionality.
            </remarks>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationOperator">
            <summary>
            Operator for comparison between Formula and Formula2 in a validation.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationOperator.between">
            <summary>
            The value of the validated cell should be between two values
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationOperator.equal">
            <summary>
            The value of the validated cell should be eqal to a specific value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationOperator.greaterThan">
            <summary>
            The value of the validated cell should be greater than a specific value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationOperator.greaterThanOrEqual">
            <summary>
            The value of the validated cell should be greater than or equal to a specific value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationOperator.lessThan">
            <summary>
            The value of the validated cell should be less than a specific value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationOperator.lessThanOrEqual">
            <summary>
            The value of the validated cell should be less than or equal to a specific value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationOperator.notBetween">
            <summary>
            The value of the validated cell should not be between two specified values
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationOperator.notEqual">
            <summary>
            The value of the validated cell should not be eqal to a specific value
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationTime">
            <summary>
            Validation for times (<see cref="T:OfficeOpenXml.DataValidation.ExcelTime"/>).
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationTime.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationTime.#ctor(System.Xml.XmlReader)">
            <summary>
            Constructor for reading data
            </summary>
            <param name="xr">The XmlReader to read from</param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationTime.#ctor(OfficeOpenXml.DataValidation.ExcelDataValidationTime)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy"></param>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationTime.ValidationType">
            <summary>
            Property for determining type of validation
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.eDataValidationType">
            <summary>
            Enum for available data validation types
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.eDataValidationType.Any">
            <summary>
            Any value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.eDataValidationType.Whole">
            <summary>
            Integer value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.eDataValidationType.Decimal">
            <summary>
            Decimal values
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.eDataValidationType.List">
            <summary>
            List of values
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.eDataValidationType.TextLength">
            <summary>
            Text length validation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.eDataValidationType.DateTime">
            <summary>
            DateTime validation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.eDataValidationType.Time">
            <summary>
            Time validation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.eDataValidationType.Custom">
            <summary>
            Custom validation
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationType">
            <summary>
            Types of datavalidation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationType.Type">
            <summary>
            Validation type
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationType.TypeToXmlString">
            <summary>
            Returns a validation type by <see cref="T:OfficeOpenXml.DataValidation.eDataValidationType"/>
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationWarningStyle">
            <summary>
            warning style, controls how Excel will handle invalid changes.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationWarningStyle.undefined">
            <summary>
            warning style will be excluded.
            Excel will default this to Stop warning style.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationWarningStyle.stop">
            <summary>
            stop warning style, invalid changes will not be accepted
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationWarningStyle.warning">
            <summary>
            warning will be presented when an attempt to an invalid change is done, but the change will be accepted.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationWarningStyle.information">
            <summary>
            information warning style.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationWithFormula`1">
            <summary>
            A validation containing a formula
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationWithFormula`1.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="workSheetName"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationWithFormula`1.#ctor(System.Xml.XmlReader)">
            <summary>
            Constructor for reading data
            </summary>
            <param name="xr">The XmlReader to read from</param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationWithFormula`1.#ctor(OfficeOpenXml.DataValidation.ExcelDataValidation)">
            <summary>
            Copy Constructor
            </summary>
            <param name="copy"></param>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationWithFormula`1.Formula">
            <summary>
            Formula - Either a {T} value (except for custom validation) or a spreadsheet formula
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationWithFormula`1.Validate">
            <summary>
            Validates the configuration of the validation.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Will be thrown if invalid configuration of the validation. Details will be in the message of the exception.
            </exception>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationWithFormula2`1">
            <summary>
            Represents a data validation with two formulas
            </summary>
            <typeparam name="T">An instance implementing the <see cref="T:OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormula"></see></typeparam>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationWithFormula2`1.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="workSheetName"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationWithFormula2`1.#ctor(System.Xml.XmlReader)">
            <summary>
            Constructor for reading data
            </summary>
            <param name="xr">The XmlReader to read from</param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationWithFormula2`1.#ctor(OfficeOpenXml.DataValidation.ExcelDataValidation)">
            <summary>
            Copy Constructor
            </summary>
            <param name="copy"></param>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationWithFormula2`1.Formula2">
            <summary>
            Formula - Either a {T} value or a spreadsheet formula
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelTime">
            <summary>
            Represents a time between 00:00:00 and 23:59:59
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelTime.NumberOfDecimals">
            <summary>
            Max number of decimals when rounding.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelTime.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelTime.#ctor(System.Decimal)">
            <summary>
            Constructor
            </summary>
            <param name="value">An existing time for initialization</param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelTime.SetSecond(System.Int32)">
            <summary>
            If we are unlucky second might be rounded up to 60. This will have the minute to be raised and might affect the hour.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelTime.Hour">
            <summary>
            Hour between 0 and 23
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelTime.Minute">
            <summary>
            Minute between 0 and 59
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelTime.Second">
            <summary>
            Second between 0 and 59
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelTime.ToExcelTime">
            <summary>
            Returns the excel decimal representation of a time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelTime.ToExcelString">
            <summary>
            Returns the excel decimal representation of a time as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelTime.ToString">
            <summary>
            Converts the object to a string
            </summary>
            <returns>The string</returns>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Exceptions.DataValidationFormulaTooLongException">
            <summary>
            Thrown if a formula exceeds the maximum number of characters.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.Exceptions.DataValidationFormulaTooLongException.#ctor(System.String)">
            <summary>
            Initiaize a new <see cref="T:OfficeOpenXml.DataValidation.Exceptions.DataValidationFormulaTooLongException"/>
            </summary>
            <param name="message">The exception message</param>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Exceptions.DataValidationStaleException">
            <summary>
            This exception is thrown by an instance of <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidation"/> if it is stale and should not allow setting of properties.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormula">
            <summary>
            Interface for a data validation formula
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormula.ExcelFormula">
            <summary>
            An excel formula
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormulaDateTime">
            <summary>
            Validation formula interface for <see cref="T:System.DateTime"/>
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormulaDecimal">
            <summary>
            Interface for a data validation formula of <see cref="T:System.Single">float</see> value
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormulaInt">
            <summary>
            Interface for a data validation formula of <see cref="T:System.Int32"/> value
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormulaList">
            <summary>
            Interface for a data validation of list type
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormulaList.Values">
            <summary>
            A list of value strings.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormulaTime">
            <summary>
            Interface for a time data validation
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormulaWithValue`1">
            <summary>
            Interface for a formula with a value
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormulaWithValue`1.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Formulas.FormulaState">
            <summary>
            Enumeration representing the state of an <see cref="T:OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormulaValue`1"/>
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.Formulas.FormulaState.Value">
            <summary>
            Value is set
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.Formulas.FormulaState.Formula">
            <summary>
            Formula is set
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormula">
            <summary>
            Base class for a formula
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormula.#ctor(System.String,System.String,System.Action{OfficeOpenXml.DataValidation.Events.OnFormulaChangedEventArgs})">
            <summary>
            Constructor
            </summary>
            <param name="validationUid">id of the data validation containing this formula</param>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormula.State">
            <summary>
            State of the validationformula, i.e. tells if value or formula is set
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormula.ExcelFormula">
            <summary>
            A formula which output must match the current validation type
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormula.GetXmlValue">
            <summary>
            This value will be stored in the xml. Can be overridden by subclasses
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormula.GetValueAsString">
            <summary>
            Returns the value as a string. Must be implemented by subclasses
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormulaCustom">
            <summary>
            
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormulaDecimal">
            <summary>
            
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormulaValue`1">
            <summary>
            This class represents a validation formula. Its value can be specified as a value of the specified datatype or as a formula.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormulaValue`1.#ctor(System.String,System.String,System.Action{OfficeOpenXml.DataValidation.Events.OnFormulaChangedEventArgs})">
            <summary>
            Constructor
            </summary>
            <param name="validationUid">Uid for the data validation</param>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormulaValue`1.Value">
            <summary>
            Typed value
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.IRangeDataValidation">
            <summary>
            Provides functionality for adding datavalidation to a range (<see cref="T:OfficeOpenXml.ExcelRangeBase"/>). Each method will
            return a configurable validation.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.IRangeDataValidation.AddAnyDataValidation">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationAny"/> to the range.
            </summary>
            <returns>A <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidationAny"/> that can be configured for any validation</returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.IRangeDataValidation.AddIntegerDataValidation">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidationInt"/> to the range
            </summary>
            <returns>A <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidationInt"/> that can be configured for integer data validation</returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.IRangeDataValidation.AddDecimalDataValidation">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidationDecimal"/> to the range
            </summary>
            <returns>A <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidationDecimal"/> that can be configured for decimal data validation</returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.IRangeDataValidation.AddDateTimeDataValidation">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidationDateTime"/> to the range
            </summary>
            <returns>A <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidationDecimal"/> that can be configured for datetime data validation</returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.IRangeDataValidation.AddListDataValidation">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationList"/> to the range
            </summary>
            <returns>A <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidationList"/> that can be configured for datetime data validation</returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.IRangeDataValidation.AddTextLengthDataValidation">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidationInt"/> regarding text length validation to the range.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.IRangeDataValidation.AddTimeDataValidation">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationTime"/> to the range.
            </summary>
            <returns>A <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationTime"/> that can be configured for time data validation</returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.IRangeDataValidation.AddCustomDataValidation">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationCustom"/> to the range.
            </summary>
            <returns>A <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationCustom"/> that can be configured for custom validation</returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.eColorBy">
            <summary>
            How to color a region map chart serie
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eColorBy.Value">
            <summary>
            Region map chart is colored by values
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eColorBy.CategoryNames">
            <summary>
            Region map chart is colored by secondary category names
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.eColorValuePositionType">
            <summary>
            The color type for a region map charts color variation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eColorValuePositionType.Number">
            <summary>
            The position’s location on the gradient is determined the numerical value in the <see cref="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExValueColor.PositionValue"/> property.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eColorValuePositionType.Percent">
            <summary>
            The position’s location on the gradient is determined by a fixed percent value in the <see cref="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExValueColor.PositionValue"/> property, represented by the gradient. Ranges from 1 to 100 percent.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eColorValuePositionType.Extreme">
            <summary>
            The position is the minimum or maximum stop of the gradient.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.eFormulaDirection">
            <summary>
            Side positions for a chart element
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eFormulaDirection.Column">
            <summary>
            The formula is interpreted column-wise
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eFormulaDirection.Row">
            <summary>
            The formula is interpreted row-wise
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.eGeoMappingLevel">
            <summary>
            Geomapping level
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eGeoMappingLevel.Automatic">
            <summary>
            Geomapping level is handled automatic
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eGeoMappingLevel.DataOnly">
            <summary>
            Only regions which correspond to data points in the geographical category of a geospatial series are in view.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eGeoMappingLevel.PostalCode">
            <summary>
            The level of view for the series is set to postal code.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eGeoMappingLevel.County">
            <summary>
            The level of view for the series is set to county.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eGeoMappingLevel.State">
            <summary>
            The level of view for the series is set to state or province.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eGeoMappingLevel.CountryRegion">
            <summary>
            The level of view for series is set to country/region.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eGeoMappingLevel.CountryRegionList">
            <summary>
            The level of view for the series is set to continent.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eGeoMappingLevel.World">
            <summary>
            The level of view for the series is set to the entire world.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.eIntervalClosed">
            <summary>
            The interval closed side.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eIntervalClosed.None">
            <summary>
            The IntervalClosed is not specified.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eIntervalClosed.Left">
            <summary>
            The interval is closed on the left side
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eIntervalClosed.Right">
            <summary>
            The interval is closed on the right side
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.eNumberOfColors">
            <summary>
            The number of colors used to create the series gradient color scale in a extended chart.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eNumberOfColors.TwoColor">
            <summary>
            Uses two colors to create the gradient color scale
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eNumberOfColors.ThreeColor">
            <summary>
            Diverging. Uses three colors to create the gradient color scale
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.eNumericDataType">
            <summary>
            Side positions for a chart element
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eNumericDataType.Value">
            <summary>
            The dimension is a value.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eNumericDataType.X">
            <summary>
            The dimension is an x-coordinate.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eNumericDataType.Y">
            <summary>
            The dimension is a y-coordinate.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eNumericDataType.Size">
            <summary>
            The dimension is a size.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eNumericDataType.ColorValue">
            <summary>
            The dimension is a value determining a color.        
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.eParentLabelLayout">
            <summary>
            The layout type for the parent labels
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eParentLabelLayout.None">
            <summary>
            No parent labels are shown
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eParentLabelLayout.Banner">
            <summary>
            Parent label layout is a banner above the category
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eParentLabelLayout.Overlapping">
            <summary>
            Parent label is laid out within the category
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ePositionAlign">
            <summary>
            The side position alignment of a chart element
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.ePositionAlign.Min">
            <summary>
            The chart element is positioned at the top of the side.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.ePositionAlign.Center">
            <summary>
            The chart element is positioned at the center of the side.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.ePositionAlign.Max">
            <summary>
            The chart element is positioned at the bottom of the side.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.eProjectionType">
            <summary>
            The cartographic map projection for a region map chart series
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eProjectionType.Automatic">
            <summary>
            Automatic
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eProjectionType.Mercator">
            <summary>
            A Mercator projection.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eProjectionType.Miller">
            <summary>
            a Miller cylindrical projection.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eProjectionType.Robinson">
            <summary>
            A Robinson projection.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eProjectionType.Albers">
            <summary>
            An Albers equal-area conic projection.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.eQuartileMethod">
            <summary>
            The quartile calculation methods
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eQuartileMethod.Inclusive">
            <summary>
            The quartile calculation includes the median when splitting the dataset into quartiles
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eQuartileMethod.Exclusive">
            <summary>
            The quartile calculation excludes the median when splitting the dataset into quartiles
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.eRegionLabelLayout">
            <summary>
            The layout type for region labels of a geospatial series
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eRegionLabelLayout.None">
            <summary>
            No region labels appear in a geospatial series
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eRegionLabelLayout.BestFitOnly">
            <summary>
            Region labels only appear if they can fit in their respective containing geometries in a geospatial series
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eRegionLabelLayout.All">
            <summary>
            All region labels appear
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.eSidePositions">
            <summary>
            Side positions for a chart element
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eSidePositions.Left">
            <summary>
            The title or legend is on the left side.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eSidePositions.Top">
            <summary>
            The title or legend is on the top.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eSidePositions.Right">
            <summary>
            The title or legend is on the right side.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eSidePositions.Bottom">
            <summary>
            The title or legend is on the bottom.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.eStringDataType">
            <summary>
            Side positions for a chart element
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eStringDataType.Category">
            <summary>
            The category string dimension data type.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eStringDataType.ColorString">
            <summary>
            The string dimension associated with a color.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eStringDataType.EntityId">
            <summary>
            The geographical entity identifier string dimension data type. 
            This dimension can be used to provide locations to a geospatial series in a Geographic chart. 
            Refer to the usage of entityId in Geo Cache and Data.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelBoxWhiskerChart">
            <summary>
            Represents a Box &amp; Whisker Chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelBoxWhiskerChart.Series">
            <summary>
            The series for a Box &amp; Whisker chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelBoxWhiskerChartSerie">
            <summary>
            A series for an Box &amp; Whisker Chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelBoxWhiskerChartSerie.ParentLabelLayout">
            <summary>
            The layout type for the parent labels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelBoxWhiskerChartSerie.QuartileMethod">
            <summary>
            The quartile calculation methods
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelBoxWhiskerChartSerie.ShowMeanLine">
            <summary>
            The visibility of connector lines between data points
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelBoxWhiskerChartSerie.ShowMeanMarker">
            <summary>
            The visibility of markers denoting the mean
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelBoxWhiskerChartSerie.ShowNonOutliers">
            <summary>
            The visibility of non-outlier data points
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelBoxWhiskerChartSerie.ShowOutliers">
            <summary>
            The visibility of outlier data points
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx">
            <summary>
            Base class for all extention charts
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.DeleteTitle">
            <summary>
            Delete the charts title
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.PlotArea">
            <summary>
            Plotarea properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.Axis">
            <summary>
            An array containg all axis of all Charttypes
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.Title">
            <summary>
            The titel of the chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.Legend">
            <summary>
            Legend
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.Border">
            <summary>
            Border
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.Fill">
            <summary>
            Access to Fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.Font">
            <summary>
            Access to font properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.TextBody">
            <summary>
            Access to text body properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.Series">
            <summary>
            Chart series
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.VaryColors">
            <summary>
            Is not applied to Extension charts
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.Style">
            <summary>
            Cannot be set for extension charts. Please use <see cref="P:OfficeOpenXml.Drawing.Chart.ExcelChart.StyleManager"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.HasTitle">
            <summary>
            If the chart has a title or not
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.HasLegend">
            <summary>
            If the chart has legend or not
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.View3D">
            <summary>
            3D settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.DisplayBlanksAs">
            <summary>
            This property does not apply to extended charts.
            This property will always return eDisplayBlanksAs.Zero.
            Setting this property on an extended chart will result in an InvalidOperationException
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.RoundedCorners">
            <summary>
            This property does not apply to extended charts.
            Setting this property on an extended chart will result in an InvalidOperationException
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.ShowDataLabelsOverMaximum">
            <summary>
            This property does not apply to extended charts.
            Setting this property on an extended chart will result in an InvalidOperationException
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.ShowHiddenData">
            <summary>
            This property does not apply to extended charts.
            Setting this property on an extended chart will result in an InvalidOperationException
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.XAxis">
            <summary>
            The X Axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.YAxis">
            <summary>
            The Y Axis
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis">
            <summary>
            An axis for an extended chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.MajorTickMark">
            <summary>
            Major tickmarks settings for the axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.MinorTickMark">
            <summary>
            Minor tickmarks settings for the axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.AxisPosition">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.Crosses">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.CrossBetween">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.CrossesAt">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.LabelPosition">
            <summary>
            Labelposition. This property does not apply to extended charts.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.Deleted">
            <summary>
            If the axis is hidden. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.TickLabelPosition">
            <summary>
            Tick label position. This property does not apply to extended charts.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.DisplayUnit">
            <summary>
            Display units. Please only use values in <see cref="T:OfficeOpenXml.Drawing.Chart.eBuildInUnits"/> or 0 for none.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.Title">
            <summary>
            The title of the chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.MinValue">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.MaxValue">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.MajorUnit">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.MajorTimeUnit">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.MinorUnit">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.MinorTimeUnit">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.LogBase">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.Orientation">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExData">
            <summary>
            The data used as source for the chart. Only spreadsheet internal data is supported at this point.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExData.Formula">
            <summary>
            Data formula
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExData.FormulaDirection">
            <summary>
            The direction of the formula
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExData.NameFormula">
            <summary>
            The dimensions name formula. Return null if the element does not exist
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExData.NameFormulaDirection">
            <summary>
            Direction for the name formula
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataCollection">
            <summary>
            A collection of chart data.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataCollection.Id">
            <summary>
            The id of the data
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataCollection.AddNumericDimension(System.String)">
            <summary>
            Adds a numeric dimension
            </summary>
            <param name="formula">The formula or address</param>
            <returns>The numeric data</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataCollection.AddStringDimension(System.String)">
            <summary>
            Adds a string dimension
            </summary>
            <param name="formula">The formula or address</param>
            <returns>The string data</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataCollection.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index">The index</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataCollection.GetEnumerator">
            <summary>
            Get the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabel">
            <summary>
            Datalabel on chart level. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabel.Position">
            <summary>
            The datalabel position
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabel.ShowValue">
            <summary>
            Show values in the datalabels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabel.ShowCategory">
            <summary>
            Show category names in the datalabels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabel.ShowSeriesName">
            <summary>
            Show series names in the datalabels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabel.ShowPercent">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabel.ShowLeaderLines">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabel.ShowBubbleSize">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabel.ShowLegendKey">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabel.Separator">
            <summary>
            The separator between items in the datalabel
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabelCollection">
            <summary>
            A collection of individual data labels
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabelCollection.Add(System.Int32)">
            <summary>
            Adds an individual data label for customization.
            </summary>
            <param name="index">The zero based index</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabelCollection.Item(System.Int32)">
            <summary>
            Returns tje data label at the specific position.  
            </summary>
            <param name="index">The index of the datalabel. 0-base.</param>
            <returns>Returns null if the data label does not exist in the collection</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabelCollection.GetEnumerator">
            <summary>
            Get the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabelItem">
            <summary>
            An individual datalabel item
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabelItem.Index">
            <summary>
            The index of the datapoint the label is attached to
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataPoint">
            <summary>
            An individual data point
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataPoint.Index">
            <summary>
            The index of the datapoint
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataPoint.SubTotal">
            <summary>
            The data point is a subtotal. Applies for waterfall charts.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataPoint.Fill">
            <summary>
            A reference to fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataPoint.Border">
            <summary>
            A reference to line properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataPoint.Effect">
            <summary>
            A reference to line properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataPoint.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataPointCollection">
            <summary>
            A collection of datapoints for a chart
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataPointCollection.Add(System.Int32)">
            <summary>
            Adds a new datapoint to the collection
            </summary>
            <param name="index">The zero based index</param>
            <returns>The datapoint</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataPointCollection.ContainsKey(System.Int32)">
            <summary>
            Checkes if the index exists in the collection
            </summary>
            <param name="index">The index</param>
            <returns>true if exists</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataPointCollection.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index">The index</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataPointCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataPointCollection.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExLegend">
            <summary>
            A legend for an Extended chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExLegend.PositionAlignment">
            <summary>
            The side position alignment of the legend
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExLegend.Position">
            <summary>
            The position of the Legend.
            </summary>
            <remarks>Setting the Position to TopRight will set the <see cref="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExLegend.Position"/> to Right and the <see cref="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExLegend.PositionAlignment" /> to Min</remarks>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExLegend.Add">
            <summary>
            Adds a legend to the chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExNumericData">
            <summary>
            Numeric data reference for an extended chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExNumericData.Type">
            <summary>
            The type of data.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExParetoLine">
            <summary>
            A pareto line for a histogram chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExParetoLine.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExPlotarea">
            <summary>
            A plotarea for an extended chart
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExPlotarea.CreateDataTable">
            <summary>
            Not applicable on extended charts. Will throw <see cref="T:System.InvalidOperationException"/>
            </summary>
            <exception cref="T:System.InvalidOperationException">Will always be thrown</exception>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExPlotarea.RemoveDataTable">
            <summary>
            Not applicable on extended charts. Will throw <see cref="T:System.InvalidOperationException"/>
            </summary>
            <exception cref="T:System.InvalidOperationException">Will always be thrown</exception>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerie">
            <summary>
            A chart serie
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerie.#ctor(OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx,System.Xml.XmlNamespaceManager,System.Xml.XmlNode)">
            <summary>
            Default constructor
            </summary>
            <param name="chart">The chart</param>
            <param name="ns">Namespacemanager</param>
            <param name="node">Topnode</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerie.DataDimensions">
            <summary>
            The dimensions of the serie
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerie.HeaderAddress">
            <summary>
            Header address for the serie.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerie.Header">
            <summary>
            The header text for the serie.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerie.Series">
            <summary>
            Set this to a valid address or the drawing will be invalid.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerie.XSeries">
            <summary>
            Set an address for the horizontal labels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerie.DataLabel">
            <summary>
            Data label properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerie.DataPoints">
            <summary>
            A collection of individual data points
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerie.Hidden">
            <summary>
            If the serie is hidden
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerie.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerie.NumberOfItems">
            <summary>
            Number of items. Will always return 0, as no item data is stored.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerie.TrendLines">
            <summary>
            Trendline do not apply to extended charts.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieBinning">
            <summary>
            Data binning properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieBinning.Size">
            <summary>
            The binning by bin size. Setting this property clears the <see cref="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieBinning.Count"/> property
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieBinning.Count">
            <summary>
            The binning by bin count. Setting this property clears the <see cref="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieBinning.Size"/> property
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieBinning.IntervalClosed">
            <summary>
            The interval closed side.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieBinning.UnderflowAutomatic">
            <summary>
            The custom value for underflow bin is set to automatic.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieBinning.Underflow">
            <summary>
            A custom value for underflow bin.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieBinning.OverflowAutomatic">
            <summary>
            The custom value for overflow bin is set to automatic.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieBinning.Overflow">
            <summary>
            A custom value for overflow bin.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieDataLabel">
            <summary>
            Datalabel properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieDataLabel.DataLabels">
            <summary>
            Individually formatted data labels.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieDataLabel.Add(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds data labels to the series.
            </summary>
            <param name="showCategory">Show the category name</param>
            <param name="showValue">Show values</param>
            <param name="showSeriesName">Show series name</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieDataLabel.Remove">
            <summary>
            Removes data labels from the series
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExStringData">
            <summary>
            String data reference for an extended chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExStringData.Type">
            <summary>
            The type of data
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExTitle">
            <summary>
            
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExTitle.PositionAlignment">
            <summary>
            The side position alignment of the title
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExTitle.Position">
            <summary>
            The position if the title
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExValueColor">
            <summary>
            Individual color settings for a region map charts series colors
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExValueColor.Color">
            <summary>
            The color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExValueColor.ValueType">
            <summary>
            The color variation type.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExValueColor.PositionValue">
            <summary>
            The color variation value.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExValueColors">
            <summary>
            Color variation for a region map chart series
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExValueColors.NumberOfColors">
            <summary>
            Number of colors to create the series gradient color scale.
            If two colors, the mid color is null.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExValueColors.MinColor">
            <summary>
            The minimum color value.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExValueColors.MidColor">
            <summary>
            The mid color value. Null if NumberOfcolors is set to TwoColors
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExValueColors.MaxColor">
            <summary>
            The maximum color value.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelFunnelChart">
            <summary>
            Represents a Funnel Chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelHistogramChart">
            <summary>
            Represents a Histogram Chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelHistogramChart.Series">
            <summary>
            The series for a histogram chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelHistogramChartSerie">
            <summary>
            A series for an Histogram Chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelHistogramChartSerie.Binning">
            <summary>
            The data binning properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelHistogramChartSerie.Aggregation">
            <summary>
            If x-axis is per category
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelHistogramChartSerie.ParetoLine">
            <summary>
            Properties for the pareto line.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelRegionMapChart">
            <summary>
            Represents a Region Map Chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelRegionMapChart.Series">
            <summary>
            The series for a region map chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelRegionMapChartSerie">
            <summary>
            A chart series for a region map chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelRegionMapChartSerie.Attribution">
            <summary>
            The provider or source of the geographical data. Default is Bing.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelRegionMapChartSerie.Region">
            <summary>
            Specifies the country code. Uses the TwoLetterISOLanguageName property of the CultureInfo object.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelRegionMapChartSerie.Language">
            <summary>
            Specifies the language. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelRegionMapChartSerie.ProjectionType">
            <summary>
            The cartographic map projection for the series
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelRegionMapChartSerie.ViewedRegionType">
            <summary>
            The level of view for the series
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelRegionMapChartSerie.Colors">
            <summary>
            Colors for the gradient scale of the region map series. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelRegionMapChartSerie.RegionLableLayout">
            <summary>
            Layout type for region labels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelRegionMapChartSerie.ColorBy">
            <summary>
            How to color a region maps chart serie
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelSunburstChart">
            <summary>
            Represents a Sunburst Chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelTreemapChart">
            <summary>
            Represents a Treemap Chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelTreemapChart.Series">
            <summary>
            The series for a treemap chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelTreemapChartSerie">
            <summary>
            A series for an Treemap Chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelTreemapChartSerie.ParentLabelLayout">
            <summary>
            The layout type for the parent labels
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelWaterfallChart">
            <summary>
            Represents an Waterfall Chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelWaterfallChart.Series">
            <summary>
            The series for a waterfall chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelWaterfallChartSerie">
            <summary>
            A series for an Waterfall Chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelWaterfallChartSerie.ShowConnectorLines">
            <summary>
            The visibility of connector lines between data points
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eAreaChartType">
            <summary>
            Area chart type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAreaChartType.Area">
            <summary>
            An area chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAreaChartType.AreaStacked">
            <summary>
            A stacked area chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAreaChartType.AreaStacked100">
            <summary>
            A stacked 100 percent area chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAreaChartType.Area3D">
            <summary>
            An 3D area chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAreaChartType.AreaStacked3D">
            <summary>
            A stacked area 3D chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAreaChartType.AreaStacked1003D">
            <summary>
            A stacked 100 percent 3D area chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eAxisOrientation">
            <summary>
            Axis orientaion
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAxisOrientation.MaxMin">
            <summary>
            Max to min
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAxisOrientation.MinMax">
            <summary>
            Min to max
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eAxisPosition">
            <summary>
            Position of the axis.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAxisPosition.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAxisPosition.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAxisPosition.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAxisPosition.Top">
            <summary>
            Top
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eAxisTickMark">
            <summary>
            Tickmarks
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAxisTickMark.Cross">
            <summary>
            The tick marks will cross the axis. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAxisTickMark.In">
            <summary>
            The tick marks will be inside the plot area. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAxisTickMark.None">
            <summary>
            There will be no tick marks.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAxisTickMark.Out">
            <summary>
            The tick marks will be outside the plot area.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAxisType.Val">
            <summary>
            Value axis
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAxisType.Cat">
            <summary>
            Category axis
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAxisType.Date">
            <summary>
            Date axis
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAxisType.Serie">
            <summary>
            Series axis
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eBarChartType">
            <summary>
            Bar chart type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.BarClustered3D">
            <summary>
            A clustered 3D bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.BarStacked3D">
            <summary>
            A stacked 3D bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.BarStacked1003D">
            <summary>
            A Stacked 100 percent 3D bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.Column3D">
            <summary>
            A 3D column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.ColumnClustered3D">
            <summary>
            A clustered 3D column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.ColumnStacked3D">
            <summary>
            A stacked 3D column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.ColumnStacked1003D">
            <summary>
            A stacked 100 percent 3D column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.BarClustered">
            <summary>
            A clustered bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.BarStacked">
            <summary>
            A stacked bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.BarStacked100">
            <summary>
            A stacked 100 percent bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.ColumnClustered">
            <summary>
            A clustered column chart 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.ColumnStacked">
            <summary>
            A stacked column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.ColumnStacked100">
            <summary>
            A stacked column 100 percent chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.ConeBarClustered">
            <summary>
            A clustered cone bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.ConeBarStacked">
            <summary>
            A stacked cone bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.ConeBarStacked100">
            <summary>
            A stacked 100 percent cone bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.ConeCol">
            <summary>
            A cone column chart 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.ConeColClustered">
            <summary>
            A clustered cone column chart 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.ConeColStacked">
            <summary>
            A stacked cone column chart 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.ConeColStacked100">
            <summary>
            A stacked 100 percent cone column chart 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.CylinderBarClustered">
            <summary>
            A clustered cylinder bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.CylinderBarStacked">
            <summary>
            A stacked cylinder bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.CylinderBarStacked100">
            <summary>
            A stacked 100 percent cylinder bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.CylinderCol">
            <summary>
            A cylinder column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.CylinderColClustered">
            <summary>
            A clustered cylinder column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.CylinderColStacked">
            <summary>
            A stacked cylinder column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.CylinderColStacked100">
            <summary>
            A stacked 100 percent cylinder column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.PyramidBarClustered">
            <summary>
            A clustered pyramid bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.PyramidBarStacked">
            <summary>
            A stacked pyramid bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.PyramidBarStacked100">
            <summary>
            A stacked 100 percent pyramid bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.PyramidCol">
            <summary>
            A stacked pyramid column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.PyramidColClustered">
            <summary>
            A clustered pyramid column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.PyramidColStacked">
            <summary>
            A stacked pyramid column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.PyramidColStacked100">
            <summary>
            A stacked 100 percent pyramid column chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eBubbleChartType">
            <summary>
            Bubble chart types
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBubbleChartType.Bubble">
            <summary>
            A bubble chart 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBubbleChartType.Bubble3DEffect">
            <summary>
            A 3D bubble chart 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eBuildInUnits">
            <summary>
            Build in units for a chart axis
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBuildInUnits.hundreds">
            <summary>
            100
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBuildInUnits.thousands">
            <summary>
            1,000
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBuildInUnits.tenThousands">
            <summary>
            10,000
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBuildInUnits.hundredThousands">
            <summary>
            100,000
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBuildInUnits.millions">
            <summary>
            1,000,000
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBuildInUnits.tenMillions">
            <summary>
            10,000,000
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBuildInUnits.hundredMillions">
            <summary>
            10,000,000
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBuildInUnits.billions">
            <summary>
            1,000,000,000
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBuildInUnits.trillions">
            <summary>
            1,000,000,000,000
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eChartExType">
            <summary>
            Chart type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartExType.Treemap">
            <summary>
            A treemap chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartExType.Histogram">
            <summary>
            A histogram chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartExType.Waterfall">
            <summary>
            A waterfall chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartExType.Sunburst">
            <summary>
            A sunburst chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartExType.BoxWhisker">
            <summary>
            A box whisker
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartExType.Pareto">
            <summary>
            A Histogram Pareto chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartExType.Funnel">
            <summary>
            A funnel chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartExType.RegionMap">
            <summary>
            A region map chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eChartStyle">
            <summary>
            The build in style of the chart.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.None">
            <summary>
            No style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style1">
            <summary>
            Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style2">
            <summary>
            Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style3">
            <summary>
            Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style4">
            <summary>
            Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style5">
            <summary>
            Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style6">
            <summary>
            Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style7">
            <summary>
            Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style8">
            <summary>
            Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style9">
            <summary>
            Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style10">
            <summary>
            Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style11">
            <summary>
            Style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style12">
            <summary>
            Style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style13">
            <summary>
            Style 13
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style14">
            <summary>
            Style 14
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style15">
            <summary>
            Style 15
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style16">
            <summary>
            Style 16
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style17">
            <summary>
            Style 17
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style18">
            <summary>
            Style 18
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style19">
            <summary>
            Style 19
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style20">
            <summary>
            Style 20
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style21">
            <summary>
            Style 21
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style22">
            <summary>
            Style 22
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style23">
            <summary>
            Style 23
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style24">
            <summary>
            Style 24
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style25">
            <summary>
            Style 25
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style26">
            <summary>
            Style 26
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style27">
            <summary>
            Style 27
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style28">
            <summary>
            Style 28
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style29">
            <summary>
            Style 29
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style30">
            <summary>
            Style 30
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style31">
            <summary>
            Style 31
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style32">
            <summary>
            Style 32
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style33">
            <summary>
            Style 33
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style34">
            <summary>
            Style 34
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style35">
            <summary>
            Style 35
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style36">
            <summary>
            Style 36
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style37">
            <summary>
            Style 37
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style38">
            <summary>
            Style 38
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style39">
            <summary>
            Style 39
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style40">
            <summary>
            Style 40
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style41">
            <summary>
            Style 41
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style42">
            <summary>
            Style 42
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style43">
            <summary>
            Style 43
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style44">
            <summary>
            Style 44
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style45">
            <summary>
            Style 45
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style46">
            <summary>
            Style 46
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style47">
            <summary>
            Style 47
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style48">
            <summary>
            Style 48
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style102">
            <summary>
            Style 102
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eChartType">
            <summary>
            Chart type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Area3D">
            <summary>
            An 3D area chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.AreaStacked3D">
            <summary>
            A stacked area 3D chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.AreaStacked1003D">
            <summary>
            A 100% stacked 3D area chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.BarClustered3D">
            <summary>
            A clustered 3D bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.BarStacked3D">
            <summary>
            A stacked 3D bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.BarStacked1003D">
            <summary>
            A 100% stacked 3D bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Column3D">
            <summary>
            A 3D column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.ColumnClustered3D">
            <summary>
            A clustered 3D column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.ColumnStacked3D">
            <summary>
            A stacked 3D column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.ColumnStacked1003D">
            <summary>
            A 100% stacked 3D column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Line3D">
            <summary>
            A 3D line chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Pie3D">
            <summary>
            A 3D pie chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.PieExploded3D">
            <summary>
            A exploded 3D pie chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Area">
            <summary>
            An area chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.AreaStacked">
            <summary>
            A stacked area chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.AreaStacked100">
            <summary>
            A 100% stacked area chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.BarClustered">
            <summary>
            A clustered bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.BarOfPie">
            <summary>
            A bar of pie chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.BarStacked">
            <summary>
            A stacked bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.BarStacked100">
            <summary>
            A 100% stacked bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Bubble">
            <summary>
            A bubble chart 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Bubble3DEffect">
            <summary>
            A 3D bubble chart 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.ColumnClustered">
            <summary>
            A clustered column chart 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.ColumnStacked">
            <summary>
            A stacked column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.ColumnStacked100">
            <summary>
            A 100% stacked column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.ConeBarClustered">
            <summary>
            A clustered cone bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.ConeBarStacked">
            <summary>
            A stacked cone bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.ConeBarStacked100">
            <summary>
            A 100% stacked cone bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.ConeCol">
            <summary>
            A cone column chart 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.ConeColClustered">
            <summary>
            A clustered cone column chart 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.ConeColStacked">
            <summary>
            A stacked cone column chart 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.ConeColStacked100">
            <summary>
            A 100% stacked cone column chart 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.CylinderBarClustered">
            <summary>
            A clustered cylinder bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.CylinderBarStacked">
            <summary>
            A stacked cylinder bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.CylinderBarStacked100">
            <summary>
            A 100% stacked cylinder bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.CylinderCol">
            <summary>
            A cylinder column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.CylinderColClustered">
            <summary>
            A clustered cylinder column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.CylinderColStacked">
            <summary>
            A stacked cylinder column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.CylinderColStacked100">
            <summary>
            A 100% stacked cylinder column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Doughnut">
            <summary>
            A doughnut chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.DoughnutExploded">
            <summary>
            An exploded doughnut chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Line">
            <summary>
            A line chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.LineMarkers">
            <summary>
            A line chart with markers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.LineMarkersStacked">
            <summary>
            A stacked line chart with markers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.LineMarkersStacked100">
            <summary>
            A 100% stacked line chart with markers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.LineStacked">
            <summary>
            A stacked line chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.LineStacked100">
            <summary>
            A 100% stacked line chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Pie">
            <summary>
            A pie chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.PieExploded">
            <summary>
            An exploded pie chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.PieOfPie">
            <summary>
            A pie of pie chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.PyramidBarClustered">
            <summary>
            A clustered pyramid bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.PyramidBarStacked">
            <summary>
            A stacked pyramid bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.PyramidBarStacked100">
            <summary>
            A 100% stacked pyramid bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.PyramidCol">
            <summary>
            A stacked pyramid column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.PyramidColClustered">
            <summary>
            A clustered pyramid column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.PyramidColStacked">
            <summary>
            A stacked pyramid column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.PyramidColStacked100">
            <summary>
            A 100% stacked pyramid column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Radar">
            <summary>
            A radar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.RadarFilled">
            <summary>
            A filled radar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.RadarMarkers">
            <summary>
            A radar chart with markers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.StockHLC">
            <summary>
            Stock chart with a High, Low and Close serie
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.StockOHLC">
            <summary>
            Stock chart with an Open, High, Low and Close serie
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.StockVHLC">
            <summary>
            Stock chart with an Volume, High, Low and Close serie
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.StockVOHLC">
            <summary>
            Stock chart with an Volume, Open, High, Low and Close serie
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Surface">
            <summary>
            A surface chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.SurfaceTopView">
            <summary>
            A surface chart, top view
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.SurfaceTopViewWireframe">
            <summary>
            A surface chart, top view and wireframe
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.SurfaceWireframe">
            <summary>
            A surface chart, wireframe
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.XYScatter">
            <summary>
            A XY scatter chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.XYScatterLines">
            <summary>
            A scatter line chart with markers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.XYScatterLinesNoMarkers">
            <summary>
            A scatter line chart with no markers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.XYScatterSmooth">
            <summary>
            A scatter line chart with markers and smooth lines
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.XYScatterSmoothNoMarkers">
            <summary>
            A scatter line chart with no markers and smooth lines
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Treemap">
            <summary>
            A treemap chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Histogram">
            <summary>
            A histogram chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Waterfall">
            <summary>
            A waterfall chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Sunburst">
            <summary>
            A sunburst chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.BoxWhisker">
            <summary>
            A box &amp; whisker chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Pareto">
            <summary>
            A histogram chart with a pareto line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Funnel">
            <summary>
            A funnel chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.RegionMap">
            <summary>
            A region map chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eCrossBetween">
            <summary>
            How the axis are crossed
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eCrossBetween.Between">
            <summary>
            The value axis will cross the category axis between data markers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eCrossBetween.MidCat">
            <summary>
            The value axis will cross the category axis at the middle of a category.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eCrosses">
            <summary>
            Where the axis cross. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eCrosses.AutoZero">
            <summary>
            The category axis crosses at the zero point of the valueaxis or the lowest or higest value if scale is over or below zero.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eCrosses.Max">
            <summary>
            The axis crosses at the maximum value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eCrosses.Min">
            <summary>
            Axis crosses at the minimum value
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eDirection">
            <summary>
            Bar or column
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eDirection.Column">
            <summary>
            A column
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eDirection.Bar">
            <summary>
            A bar
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eDisplayBlanksAs">
            <summary>
            How to display blanks in a chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eDisplayBlanksAs.Gap">
            <summary>
            Blank values will be left as a gap
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eDisplayBlanksAs.Span">
            <summary>
            Blank values will be spanned with a line for line charts
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eDisplayBlanksAs.Zero">
            <summary>
            Blank values will be treated as zero
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eDoughnutChartType">
            <summary>
            Doughnut chart types
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eDoughnutChartType.Doughnut">
            <summary>
            A doughnut chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eDoughnutChartType.DoughnutExploded">
            <summary>
            An exploded doughnut chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eGrouping">
            <summary>
            How the series are grouped
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eGrouping.Standard">
            <summary>
            Standard grouping
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eGrouping.Clustered">
            <summary>
            Clustered grouping
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eGrouping.Stacked">
            <summary>
            Stacked grouping
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eGrouping.PercentStacked">
            <summary>
            100% stacked grouping
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eLabelPosition">
            <summary>
            Position of the labels
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLabelPosition.BestFit">
            <summary>
            Best fit
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLabelPosition.Left">
            <summary>
            Left aligned
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLabelPosition.Right">
            <summary>
            Right aligned
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLabelPosition.Center">
            <summary>
            Center aligned
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLabelPosition.Top">
            <summary>
            Top aligned
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLabelPosition.Bottom">
            <summary>
            Bottom aligned
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLabelPosition.InBase">
            <summary>
            Labels will be displayed inside the data marker
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLabelPosition.InEnd">
            <summary>
            Labels will be displayed inside the end of the data marker
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLabelPosition.OutEnd">
            <summary>
            Labels will be displayed outside the end of the data marker
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eLegendPosition">
            <summary>
            Position of the legend
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLegendPosition.Top">
            <summary>
            Positioned over the chart area
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLegendPosition.Left">
            <summary>
            Positioned to the left the chart area
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLegendPosition.Right">
            <summary>
            Positioned to the right the chart area
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLegendPosition.Bottom">
            <summary>
            Positioned below the chart area
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLegendPosition.TopRight">
            <summary>
            Positioned to the top right of the chart area
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eLineChartType">
            <summary>
            Line chart type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLineChartType.Line3D">
            <summary>
            A 3D line chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLineChartType.Line">
            <summary>
            A line chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLineChartType.LineMarkers">
            <summary>
            A line chart with markers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLineChartType.LineMarkersStacked">
            <summary>
            A stacked line chart with markers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLineChartType.LineMarkersStacked100">
            <summary>
            A 100% stacked line chart with markers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLineChartType.LineStacked">
            <summary>
            A stacked line chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLineChartType.LineStacked100">
            <summary>
            A 100% stacked line chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eMarkerStyle">
            <summary>
            Markerstyle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eMarkerStyle.Circle">
            <summary>
            The shape of a circle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eMarkerStyle.Dash">
            <summary>
            The shape of a dash
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eMarkerStyle.Diamond">
            <summary>
            The shape of a diamond
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eMarkerStyle.Dot">
            <summary>
            The shape of a dot
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eMarkerStyle.None">
            <summary>
            No marker
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eMarkerStyle.Picture">
            <summary>
            A picture, currently unsupported
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eMarkerStyle.Plus">
            <summary>
            The shape of a plus
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eMarkerStyle.Square">
            <summary>
            The shape of a square
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eMarkerStyle.Star">
            <summary>
            The shape of a star
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eMarkerStyle.Triangle">
            <summary>
            The shape of a triangle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eMarkerStyle.X">
            <summary>
            The shape of a X
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eOfPieChartType">
            <summary>
            OfPie chart types
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eOfPieChartType.PieOfPie">
            <summary>
            A pie of pie chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eOfPieChartType.BarOfPie">
            <summary>
            A bar of pie chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ePieChartType">
            <summary>
            Pie and Doughnut chart type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ePieChartType.Pie">
            <summary>
            A pie chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ePieChartType.PieExploded">
            <summary>
            An exploded pie chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ePieChartType.Pie3D">
            <summary>
            A 3D pie chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ePieChartType.PieExploded3D">
            <summary>
            A exploded 3D pie chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ePieType">
            <summary>
            Bar or pie
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ePieType.Bar">
            <summary>
            Represents a bar of pie chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ePieType.Pie">
            <summary>
            Represents a pie of pie chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eRadarChartType">
            <summary>
            Radar chart types
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eRadarChartType.Radar">
            <summary>
            A radar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eRadarChartType.RadarFilled">
            <summary>
            A filled radar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eRadarChartType.RadarMarkers">
            <summary>
            A radar chart with markers
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eRadarStyle">
            <summary>
            Radar chart type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eRadarStyle.Filled">
            <summary>
            The radar chart will be filled and have lines, but will not have markers.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eRadarStyle.Marker">
            <summary>
            The radar chart will have lines and markers, but will not be filled.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eRadarStyle.Standard">
            <summary>
            The radar chart will have lines, but no markers and no filling.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eScatterChartType">
            <summary>
            Scatter chart types
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eScatterChartType.XYScatter">
            <summary>
            A XY scatter chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eScatterChartType.XYScatterLines">
            <summary>
            A scatter line chart with markers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eScatterChartType.XYScatterLinesNoMarkers">
            <summary>
            A scatter line chart with no markers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eScatterChartType.XYScatterSmooth">
            <summary>
            A scatter line chart with markers and smooth lines
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eScatterChartType.XYScatterSmoothNoMarkers">
            <summary>
            A scatter line chart with no markers and smooth lines
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eScatterStyle">
            <summary>
            Smooth or lines markers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eScatterStyle.LineMarker">
            <summary>
            Line and markers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eScatterStyle.SmoothMarker">
            <summary>
            Smooth lines and markers
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eShape">
            <summary>
            Shape for bar charts
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eShape.Box">
            <summary>
            A box shape
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eShape.Cone">
            <summary>
            A cone shape
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eShape.ConeToMax">
            <summary>
            A cone shape, truncated to max
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eShape.Cylinder">
            <summary>
            A cylinder shape
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eShape.Pyramid">
            <summary>
            A pyramid shape
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eShape.PyramidToMax">
            <summary>
            A pyramid shape, truncated to max
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eSizeRepresents">
            <summary>
            How to represent data as bubble chart sizes
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eSizeRepresents.Area">
            <summary>
            The area of the bubbles will be proportional to the bubble size.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eSizeRepresents.Width">
            <summary>
            The radius of the bubbles will be proportional to the bubble size.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eStockChartType">
            <summary>
            The type of stock chart.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eStockChartType.StockHLC">
            <summary>
            Stock chart with a High, Low and Close serie
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eStockChartType.StockOHLC">
            <summary>
            Stock chart with an Open, High, Low and Close serie
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eStockChartType.StockVHLC">
            <summary>
            Stock chart with an Volume, High, Low and Close serie
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eStockChartType.StockVOHLC">
            <summary>
            Stock chart with an Volume, Open, High, Low and Close serie
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eSurfaceChartType">
            <summary>
            Surface chart type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eSurfaceChartType.Surface">
            <summary>
            A surface chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eSurfaceChartType.SurfaceTopView">
            <summary>
            A surface chart, top view
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eSurfaceChartType.SurfaceTopViewWireframe">
            <summary>
            A surface chart, top view and wireframe
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eSurfaceChartType.SurfaceWireframe">
            <summary>
            A surface chart, wireframe
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eTickLabelPosition">
            <summary>
            Axis label position
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eTickLabelPosition.High">
            <summary>
            The axis labels will be at the high end of the perpendicular axis
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eTickLabelPosition.Low">
            <summary>
            The axis labels will be at the low end of the perpendicular axis
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eTickLabelPosition.NextTo">
            <summary>
            The axis labels will be next to the axis.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eTickLabelPosition.None">
            <summary>
            No axis labels are drawn
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eTimeUnit">
            <summary>
            The time unit of major and minor datetime axis values
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eTimeUnit.Years">
            <summary>
            Years
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eTimeUnit.Months">
            <summary>
            Months
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eTimeUnit.Days">
            <summary>
            Days
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eTrendLine">
            <summary>
            Type of Trendline for a chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eTrendLine.Exponential">
            <summary>
            The trendline will be an exponential curve. y = abx
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eTrendLine.Linear">
            <summary>
            The trendline will be a linear curve. y = mx + b
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eTrendLine.Logarithmic">
            <summary>
            The trendline will be a logarithmic curve y = a log x + b
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eTrendLine.MovingAvgerage">
            <summary>
            The trendline will be the moving average.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eTrendLine.Polynomial">
            <summary>
            The trendline will be a polynomial curve.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eTrendLine.Power">
            <summary>
            The trendline will be a power curve. y = axb
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eXAxisPosition">
            <summary>
            Position of the X-Axis
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eXAxisPosition.Bottom">
            <summary>
            To the bottom
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eXAxisPosition.Top">
            <summary>
            To the top
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eYAxisPosition">
            <summary>
            Position of the Y-Axis
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eYAxisPosition.Left">
            <summary>
            To the left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eYAxisPosition.Right">
            <summary>
            To the right
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelAreaChart">
            <summary>
            Represents an Area Chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelAreaChart.DataLabel">
            <summary>
            Access to datalabel properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelAreaChart.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelAreaChart.Series">
            <summary>
            The series for the Area Chart
            </summary>s
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelAreaChartSerie">
            <summary>
            A series for an Area Chart
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelAreaChartSerie.#ctor(OfficeOpenXml.Drawing.Chart.ExcelChart,System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="chart">Chart series</param>
            <param name="ns">Namespacemanager</param>
            <param name="node">Topnode</param>
            <param name="isPivot">Is pivotchart</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelAreaChartSerie.DataLabel">
            <summary>
            Datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelAreaChartSerie.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelAreaChartSerie.DataPoints">
            <summary>
            A collection of the individual datapoints
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelBarChart">
            <summary>
            Represents a Bar Chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBarChart.Direction">
            <summary>
            Direction, Bar or columns
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBarChart.Shape">
            <summary>
            The shape of the bar/columns
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBarChart.DataLabel">
            <summary>
            Access to datalabel properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBarChart.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBarChart.GapWidth">
            <summary>
            The size of the gap between two adjacent bars/columns
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBarChart.Overlap">
            <summary>
            Specifies how much bars and columns shall overlap
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBarChart.Series">
            <summary>
            Series for a bar chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelBarChartSerie">
            <summary>
            A serie for a Bar Chart
            </summary>s
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelBarChartSerie.#ctor(OfficeOpenXml.Drawing.Chart.ExcelChart,System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="chart">Chart series</param>
            <param name="ns">Namespacemanager</param>
            <param name="node">Topnode</param>
            <param name="isPivot">Is pivotchart</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBarChartSerie.DataLabel">
            <summary>
            Datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBarChartSerie.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBarChartSerie.DataPoints">
            <summary>
            A collection of the individual datapoints
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelBubbleChart">
            <summary>
            Represents a Bar Chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBubbleChart.BubbleScale">
            <summary>
            Specifies the scale factor of the bubble chart. Can range from 0 to 300, corresponding to a percentage of the default size,
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBubbleChart.ShowNegativeBubbles">
            <summary>
            If negative sized bubbles will be shown on a bubble chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBubbleChart.Bubble3D">
             <summary>
            If the bubblechart is three dimensional
             </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBubbleChart.SizeRepresents">
            <summary>
            The scale factor for the bubble chart. Can range from 0 to 300, corresponding to a percentage of the default size,
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBubbleChart.DataLabel">
            <summary>
            Access to datalabel properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBubbleChart.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBubbleChart.Series">
            <summary>
            The series for a bubble charts
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelBubbleChartSerie">
            <summary>
            A serie for a bubble chart
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelBubbleChartSerie.#ctor(OfficeOpenXml.Drawing.Chart.ExcelChart,System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="chart">The chart</param>
            <param name="ns">Namespacemanager</param>
            <param name="node">Topnode</param>
            <param name="isPivot">Is pivotchart</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBubbleChartSerie.DataLabel">
            <summary>
            Datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBubbleChartSerie.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBubbleChartSerie.Series">
            <summary>
            The dataseries for the Bubble Chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBubbleChartSerie.BubbleSize">
            <summary>
            The size of the bubbles
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBubbleChartSerie.DataPoints">
            <summary>
            A collection of the individual datapoints
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelBubbleChartSeries">
            <summary>
            Represents a collection of bubble chart series
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelBubbleChartSeries.Add(OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase)">
            <summary>
            Adds a new serie to a bubble chart
            </summary>
            <param name="Serie">The Y-Axis range</param>
            <param name="XSerie">The X-Axis range</param>
            <param name="BubbleSize">The size of the bubbles range. If set to null, a size of 1 is used</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelBubbleChartSeries.Add(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="SerieAddress">The Y-Axis range</param>
            <param name="XSerieAddress">The X-Axis range</param>
            <param name="BubbleSizeAddress">The size of the bubbles range. If set to null or String.Empty, a size of 1 is used</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChart">
            <summary>
            Base class for Chart object.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ExcelChart._chartXmlHelper">
            <summary>
            The Xml helper for the chart xml
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.StyleManager">
            <summary>
            Manage style settings for the chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.UseSecondaryAxis">
            <summary>
            If true the charttype will use the secondary axis.
            The chart must contain a least one other charttype that uses the primary axis.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.WorkSheet">
            <summary>
            Reference to the worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.ChartXml">
            <summary>
            The chart xml document
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.DrawingType">
            <summary>
            The type of drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.ChartType">
            <summary>
            Type of chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ExcelChart._chartNode">
            <summary>
            The chart element
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.Title">
            <summary>
            The titel of the chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.HasTitle">
            <summary>
            True if the chart has a title
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.HasLegend">
            <summary>
            If the chart has a legend
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.DeleteTitle">
            <summary>
            Remove the title from the chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.Series">
            <summary>
            Chart series
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.Axis">
            <summary>
            An array containg all axis of all Charttypes
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.XAxis">
            <summary>
            The X Axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.YAxis">
            <summary>
            The Y Axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.Style">
            <summary>
            The build-in chart styles. 
            Use <see cref="P:OfficeOpenXml.Drawing.Chart.ExcelChart.StyleManager"/> for the more modern styling.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.PlotArea">
            <summary>
            Plotarea
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.Legend">
            <summary>
            Legend
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.Border">
            <summary>
            Border
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.Fill">
            <summary>
            Access to Fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.Font">
            <summary>
            Access to font properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.TextBody">
            <summary>
            Access to text body properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.PivotTableSource">
            <summary>
            If the chart is a pivochart this is the pivotable used as source.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.UriChart">
            <summary>
            Package internal URI
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsType3D(OfficeOpenXml.Drawing.Chart.eChartType)">
            <summary>
            Returns true if the chart is a 3D chart
            </summary>
            <param name="chartType">The charttype to tests</param>
            <returns>True if the chart is a 3D chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsType3D">
            <summary>
            Returns true if the chart is a 3D chart
            </summary>
            <returns>True if the chart is a 3D chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeLine">
            <summary>
            Returns true if the chart is a line chart
            </summary>
            <returns>True if the chart is a line chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeRadar">
            <summary>
            Returns true if the chart is a radar chart
            </summary>
            <returns>True if the chart is a radar chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeScatter">
            <summary>
            Returns true if the chart is a scatter chart
            </summary>
            <returns>True if the chart is a scatter chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeBubble">
            <summary>
            Returns true if the chart is a bubble chart
            </summary>
            <returns>True if the chart is a bubble chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeArea">
            <summary>
            Returns true if the chart is a scatter chart
            </summary>
            <returns>True if the chart is a scatter chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeSurface">
            <summary>
            Returns true if the chart is a sureface chart
            </summary>
            <returns>True if the chart is a sureface chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.HasThirdAxis">
            <summary>
            Returns true if the chart is a sureface chart
            </summary>
            <returns>True if the chart is a sureface chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeShape">
            <summary>
            Returns true if the chart has shapes, like bars and columns
            </summary>
            <returns>True if the chart has shapes</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePercentStacked">
            <summary>
            Returns true if the chart is of type stacked percentage
            </summary>
            <returns>True if the chart is of type stacked percentage</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeStacked">
            <summary>
            Returns true if the chart is of type stacked 
            </summary>
            <returns>True if the chart is of type stacked</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeClustered">
            <summary>
            Returns true if the chart is of type clustered
            </summary>
            <returns>True if the chart is of type clustered</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePieDoughnut">
            <summary>
            Returns true if the chart is a pie or Doughnut chart
            </summary>
            <returns>True if the chart is a pie or Doughnut chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeDoughnut">
            <summary>
            Returns true if the chart is a Doughnut chart
            </summary>
            <returns>True if the chart is a Doughnut chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePie">
            <summary>
            Returns true if the chart is a pie chart
            </summary>
            <returns>true if the chart is a pie chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeStock">
            <summary>
            Return true if the chart is a stock chart.
            </summary>
            <returns>true if the chart is a stock chart.</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.VaryColors">
            <summary>
            If the chart has only one serie this varies the colors for each point.
            This property does not apply to extention charts.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.Floor">
            <summary>
            Formatting for the floor of a 3D chart. 
            <note type="note">This property is null for non 3D charts</note>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.SideWall">
            <summary>
            Formatting for the sidewall of a 3D chart. 
            <note type="note">This property is null for non 3D charts</note>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.BackWall">
            <summary>
            Formatting for the backwall of a 3D chart. 
            <note type="note">This property is null for non 3D charts</note>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.RoundedCorners">
            <summary>
            Border rounded corners
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.ShowHiddenData">
            <summary>
            Show data in hidden rows and columns
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.DisplayBlanksAs">
            <summary>
            Specifies the possible ways to display blanks
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.ShowDataLabelsOverMaximum">
            <summary>
            Specifies data labels over the maximum of the chart shall be shown
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.View3D">
            <summary>
            3D-settings
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartAxis">
            <summary>
            An axis for a chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ExcelChartAxis._chart">
            <summary>
            Type of axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.MajorTickMark">
            <summary>
            Get or Sets the major tick marks for the axis. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.MinorTickMark">
            <summary>
            Get or Sets the minor tick marks for the axis. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.AxisType">
            <summary>
            The type of axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.AxisPosition">
            <summary>
            Where the axis is located
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.Crosses">
            <summary>
            Where the axis crosses
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.CrossBetween">
            <summary>
            How the axis are crossed
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.CrossesAt">
            <summary>
            The value where the axis cross. 
            Null is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.Format">
            <summary>
            The Numberformat used
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.SourceLinked">
            <summary>
            The Numberformats are linked to the source data.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.LabelPosition">
            <summary>
            The Position of the labels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.Fill">
            <summary>
            Access to fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.Border">
            <summary>
            Access to border properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.Font">
            <summary>
            Access to font properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.TextBody">
            <summary>
            Access to text body properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.Deleted">
            <summary>
            If the axis is deleted
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.TickLabelPosition">
            <summary>
            Position of the Lables
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.DisplayUnit">
            <summary>
            The scaling value of the display units for the value axis
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ExcelChartAxis._title">
            <summary>
            Chart axis title
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.Title">
            <summary>
            Gives access to the charts title properties.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.MinValue">
            <summary>
            Minimum value for the axis.
            Null is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.MaxValue">
            <summary>
            Max value for the axis.
            Null is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.MajorUnit">
            <summary>
            Major unit for the axis.
            Null is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.MajorTimeUnit">
            <summary>
            Major time unit for the axis.
            Null is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.MinorUnit">
            <summary>
            Minor unit for the axis.
            Null is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.MinorTimeUnit">
            <summary>
            Minor time unit for the axis.
            Null is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.LogBase">
            <summary>
            The base for a logaritmic scale
            Null for a normal scale
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.Orientation">
            <summary>
            Axis orientation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.MajorGridlines">
            <summary> 
            Major gridlines for the axis 
            </summary> 
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.MajorGridlineEffects">
            <summary> 
            Effects for major gridlines for the axis 
            </summary> 
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.MinorGridlines">
            <summary> 
            Minor gridlines for the axis 
            </summary> 
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.MinorGridlineEffects">
            <summary> 
            Effects for minor gridlines for the axis 
            </summary> 
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.HasMajorGridlines">
            <summary>
            True if the axis has major Gridlines
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.HasMinorGridlines">
            <summary>
            True if the axis has minor Gridlines
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.RemoveGridlines">
            <summary> 
            Removes Major and Minor gridlines from the Axis 
            </summary> 
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.RemoveGridlines(System.Boolean,System.Boolean)">
            <summary>
             Removes gridlines from the Axis
            </summary>
            <param name="removeMajor">Indicates if the Major gridlines should be removed</param>
            <param name="removeMinor">Indicates if the Minor gridlines should be removed</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.AddGridlines(System.Boolean,System.Boolean)">
            <summary>
            Adds gridlines and styles them according to the style selected in the StyleManager
            </summary>
            <param name="addMajor">Indicates if the Major gridlines should be added</param>
            <param name="addMinor">Indicates if the Minor gridlines should be added</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.AddTitle(System.String)">
            <summary>
            Adds the axis title and styles it according to the style selected in the StyleManager
            </summary>
            <param name="title"></param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.RemoveTitle">
            <summary>
            Removes the axis title
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.ChangeAxisType(OfficeOpenXml.Drawing.Chart.eAxisType)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard">
            <summary>
            An axis for a standard chart. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.MajorTickMark">
            <summary>
            Get or Sets the major tick marks for the axis. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.MinorTickMark">
            <summary>
            Get or Sets the minor tick marks for the axis. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.AxisPosition">
            <summary>
            Where the axis is located
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.Title">
            <summary>
            Chart axis title
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.MinValue">
            <summary>
            Minimum value for the axis.
            Null is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.MaxValue">
            <summary>
            Max value for the axis.
            Null is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.LabelPosition">
            <summary>
            The Position of the labels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.Crosses">
            <summary>
            Where the axis crosses
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.CrossBetween">
            <summary>
            How the axis are crossed
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.CrossesAt">
            <summary>
            The value where the axis cross. 
            Null is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.Deleted">
            <summary>
            If the axis is deleted
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.TickLabelPosition">
            <summary>
            Position of the Lables
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.DisplayUnit">
            <summary>
            The scaling value of the display units for the value axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.MajorUnit">
            <summary>
            Major unit for the axis.
            Null is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.MajorTimeUnit">
            <summary>
            Major time unit for the axis.
            Null is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.MinorUnit">
            <summary>
            Minor unit for the axis.
            Null is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.MinorTimeUnit">
            <summary>
            Minor time unit for the axis.
            Null is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.LogBase">
            <summary>
            The base for a logaritmic scale
            Null for a normal scale
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.Orientation">
            <summary>
            Axis orientation
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.AddTitle(OfficeOpenXml.ExcelRangeBase)">
            <summary>
            Adds the axis title and styles it according to the style selected in the StyleManager
            </summary>
            <param name="title"></param>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartCollection">
            <summary>
            Enumerates charttypes 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartCollection.Add(OfficeOpenXml.Drawing.Chart.eChartType)">
            <summary>
            Add a new charttype to the chart
            </summary>
            <param name="chartType">The type of the new chart</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartCollection.AddLineChart(OfficeOpenXml.Drawing.Chart.eLineChartType)">
            <summary>
            Adds a new line chart to the chart
            </summary>
            <param name="chartType">The type of the new chart</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartCollection.AddBarChart(OfficeOpenXml.Drawing.Chart.eBarChartType)">
            <summary>
            Adds a new bar chart to the chart
            </summary>
            <param name="chartType">The type of the new chart</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartCollection.AddAreaChart(OfficeOpenXml.Drawing.Chart.eAreaChartType)">
            <summary>
            Adds a new area chart to the chart
            </summary>
            <param name="chartType">The type of the new chart</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartCollection.AddPieChart(OfficeOpenXml.Drawing.Chart.ePieChartType)">
            <summary>
            Adds a new pie chart to the chart
            </summary>
            <param name="chartType">The type of the new chart</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartCollection.AddOfPieChart(OfficeOpenXml.Drawing.Chart.eOfPieChartType)">
            <summary>
            Adds a new column of pie- or bar of pie chart to the chart
            </summary>
            <param name="chartType">The type of the new chart</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartCollection.AddDoughnutChart(OfficeOpenXml.Drawing.Chart.eDoughnutChartType)">
            <summary>
            Adds a new doughnut chart to the chart
            </summary>
            <param name="chartType">The type of the new chart</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartCollection.AddRadarChart(OfficeOpenXml.Drawing.Chart.eRadarChartType)">
            <summary>
            Adds a new radar chart to the chart
            </summary>
            <param name="chartType">The type of the new chart</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartCollection.AddScatterChart(OfficeOpenXml.Drawing.Chart.eScatterChartType)">
            <summary>
            Adds a new scatter chart to the chart
            </summary>
            <param name="chartType">The type of the new chart</param>
            <returns>The chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartCollection.Item(System.Int32)">
            <summary>
            Returns a chart at the specific position.  
            </summary>
            <param name="PositionID">The position of the chart. 0-base</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel">
            <summary>
            Datalabel on chart level. 
            This class is inherited by ExcelChartSerieDataLabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.Position">
            <summary>
            The position of the data labels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.ShowValue">
            <summary>
            Show the values 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.ShowCategory">
            <summary>
            Show category names  
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.ShowSeriesName">
            <summary>
            Show series names
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.ShowPercent">
            <summary>
            Show percent values
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.ShowLeaderLines">
            <summary>
            Show the leader lines
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.ShowBubbleSize">
            <summary>
            Show Bubble Size
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.ShowLegendKey">
            <summary>
            Show the Lengend Key
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.Separator">
            <summary>
            Separator string 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.Format">
            <summary>
            The Numberformat string.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.SourceLinked">
            <summary>
            The Numberformats are linked to the source data.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.Fill">
            <summary>
            Access fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.Border">
            <summary>
            Access border properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.Font">
            <summary>
            Access font properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.TextBody">
            <summary>
            Access to text body properties
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.GetPosText(OfficeOpenXml.Drawing.Chart.eLabelPosition)">
            <summary>
            Translates the label position
            </summary>
            <param name="pos">The position enum</param>
            <returns>The string</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.GetPosEnum(System.String)">
            <summary>
            Translates the enum position
            </summary>
            <param name="pos">The string value to translate</param>
            <returns>The enum value</returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelCollection">
            <summary>
            A collection of individually formatted datalabels
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelCollection.Add(System.Int32)">
            <summary>
            Adds a new chart label to the collection
            </summary>
            <param name="index">The index</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelCollection.Item(System.Int32)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="index">The index</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelCollection.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelItem">
            <summary>
            Represents an individual datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelItem.Index">
            <summary>
            The index of an individual datalabel
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelStandard">
            <summary>
            Settings for a charts data lables
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelStandard.Position">
            <summary>
            Position of the labels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelStandard.ShowValue">
            <summary>
            Show the values 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelStandard.ShowCategory">
            <summary>
            Show category names  
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelStandard.ShowSeriesName">
            <summary>
            Show series names
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelStandard.ShowPercent">
            <summary>
            Show percent values
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelStandard.ShowLeaderLines">
            <summary>
            Show the leader lines
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelStandard.ShowBubbleSize">
            <summary>
            Show Bubble Size
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelStandard.ShowLegendKey">
            <summary>
            Show the Lengend Key
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelStandard.Separator">
            <summary>
            Separator string 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartDataPoint">
            <summary>
            Represents an individual datapoint in a chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataPoint.Index">
            <summary>
            The index of the datapoint
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataPoint.Bubble3D">
            <summary>
            The sizes of the bubbles on the bubble chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataPoint.InvertIfNegative">
            <summary>
            Invert if negative. Default true.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataPoint.Marker">
            <summary>
            A reference to marker properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataPoint.Fill">
            <summary>
            A reference to fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataPoint.Border">
            <summary>
            A reference to line properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataPoint.Effect">
            <summary>
            A reference to line properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataPoint.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartDataPoint.HasMarker">
            <summary>
            Returns true if the datapoint has a marker
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartDataPoint.Dispose">
            <summary>
            Dispose the object
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartDataPointCollection">
            <summary>
            A collection of datapoints
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartDataPointCollection.ContainsKey(System.Int32)">
            <summary>
            Checkes if the index exists in the collection
            </summary>
            <param name="index">The index</param>
            <returns>true if exists</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartDataPointCollection.Add(System.Int32)">
            <summary>
            Adds a new datapoint to the collection
            </summary>
            <param name="index">The index</param>
            <returns>The datapoint</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataPointCollection.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index">The index</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataPointCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartDataPointCollection.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartDataTable">
            <summary>
            Data table on chart level. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataTable.ShowHorizontalBorder">
            <summary>
            The horizontal borders will be shown in the data table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataTable.ShowVerticalBorder">
            <summary>
            The vertical borders will be shown in the data table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataTable.ShowOutline">
            <summary>
            The outline will be shown on the data table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataTable.ShowKeys">
            <summary>
            The legend keys will be shown in the data table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataTable.Fill">
            <summary>
            Access fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataTable.Border">
            <summary>
            Access border properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataTable.Font">
            <summary>
            Access font properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataTable.TextBody">
            <summary>
            Access to text body properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataTable.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataTable.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartErrorBars">
            <summary>
            The title of a chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartErrorBars.Direction">
            <summary>
            The directions for the error bars. For scatter-, bubble- and area charts this property can't be changed. Please use the ErrorBars property for Y direction and ErrorBarsX for the X direction.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartErrorBars.BarType">
            <summary>
            The ways to draw an error bar
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartErrorBars.ValueType">
            <summary>
            The ways to determine the length of the error bars
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartErrorBars.NoEndCap">
            <summary>
            If true, no end cap is drawn on the error bars 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartErrorBars.Value">
            <summary>
            The value which used to determine the length of the error bars when <c>ValueType</c> is FixedValue
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartErrorBars.Plus">
            <summary>
            Numeric Source for plus errorbars when <c>ValueType</c> is set to Custom
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartErrorBars.Minus">
            <summary>
            Numeric Source for minus errorbars when <c>ValueType</c> is set to Custom
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartErrorBars.Fill">
            <summary>
            Fill style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartErrorBars.Border">
            <summary>
            Border style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartErrorBars.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartErrorBars.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartErrorBars.Remove">
            <summary>
            Remove the error bars
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartLegend">
            <summary>
            A chart legend
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegend.Entries">
            <summary>
            A list of individual settings for legend entries.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegend.Position">
            <summary>
            The position of the Legend
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegend.Overlay">
            <summary>
            If the legend overlays other objects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegend.Fill">
            <summary>
            The Fill style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegend.Border">
            <summary>
            The Border style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegend.Font">
            <summary>
            The Font properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegend.TextBody">
            <summary>
            Access to text body properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegend.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegend.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartLegend.Remove">
            <summary>
            Remove the legend
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartLegend.Add">
            <summary>
            Adds a legend to the chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartLegendEntry">
            <summary>
            An individual serie item within the chart legend
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegendEntry.Index">
            <summary>
            The index of the item
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegendEntry.Deleted">
            <summary>
            If the items has been deleted or is visible.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegendEntry.Font">
            <summary>
            The Font properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegendEntry.TextBody">
            <summary>
            Access to text body properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegendEntry.Border">
            <summary>
            Access to border properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegendEntry.Effect">
            <summary>
            Access to effects styling properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegendEntry.Fill">
            <summary>
            Access to fill styling properties.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegendEntry.ThreeD">
            <summary>
            Access to 3D properties.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartStyleItem">
            <summary>
            Represents a up-down bar, dropline or hi-low line in a chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStyleItem.Fill">
            <summary>
            Access to fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStyleItem.Border">
            <summary>
            Access to border properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStyleItem.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStyleItem.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartStyleItem.Remove">
            <summary>
            Removes the item
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartMarker">
            <summary>
            Represents a marker on a chart serie
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartMarker.Style">
            <summary>
            The marker style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartMarker.Size">
            <summary>
            The size of the marker.
            Ranges from 2 to 72.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartMarker.Fill">
            <summary>
            A reference to the fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartMarker.Border">
            <summary>
            A reference to border properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartMarker.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartMarker.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartNumericSource">
            <summary>
            A numeric source for a chart.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartNumericSource.ValuesSource">
            <summary>
            This can be an address, function or litterals.
            Litternals are formatted as a comma separated list surrounded by curly brackets, for example {1.0,2.0,3}. Please use a dot(.) as decimal sign.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartNumericSource.FormatCode">
            <summary>
            The format code for the numeric source
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartPlotArea">
            <summary>
            A charts plot area
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartPlotArea.ChartTypes">
            <summary>
            If a chart contains multiple chart types (e.g lineChart,BarChart), they end up here.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartPlotArea.CreateDataTable">
            <summary>
            Creates a data table in the plotarea
            The datatable can also be accessed via the DataTable propery
            <see cref="P:OfficeOpenXml.Drawing.Chart.ExcelChartPlotArea.DataTable"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartPlotArea.RemoveDataTable">
            <summary>
            Remove the data table if it's created in the plotarea
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartPlotArea.DataTable">
            <summary>
            The data table object.
            Use the CreateDataTable method to create a datatable if it does not exist.
            <see cref="M:OfficeOpenXml.Drawing.Chart.ExcelChartPlotArea.CreateDataTable"/>
            <see cref="M:OfficeOpenXml.Drawing.Chart.ExcelChartPlotArea.RemoveDataTable"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartPlotArea.Fill">
            <summary>
            Access to fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartPlotArea.Border">
            <summary>
            Access to border properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartPlotArea.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartPlotArea.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartSerie">
            <summary>
            Base class for chart series for standard charts
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerie.Header">
            <summary>
            The header for the chart serie
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerie.NumberLiteralsY">
            <summary>
            Literals for the Y serie, if the literal values are numeric
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerie.NumberLiteralsX">
            <summary>
            Literals for the X serie, if the literal values are numeric
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerie.StringLiteralsX">
            <summary>
            Literals for the X serie, if the literal values are strings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerie.HeaderAddress">
            <summary>
            The header address for the serie.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerie.Series">
            <summary>
            The address for the vertical series.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerie.XSeries">
            <summary>
            The address for the horizontal series.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerie.Fill">
            <summary>
            Access to fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerie.Border">
            <summary>
            Access to border properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerie.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerie.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerie.NumberOfItems">
            <summary>
            Number of items in the serie.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerie.TrendLines">
            <summary>
            A collection of trend lines for the chart serie.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartSerieDataLabel">
            <summary>
            Datalabel properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerieDataLabel.DataLabels">
            <summary>
            Individually formatted datalabels.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1">
            <summary>
            Collection class for chart series
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1.Item(System.Int32)">
            <summary>
            Returns the serie at the specified position.  
            </summary>
            <param name="PositionID">The position of the series.</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1.Delete(System.Int32)">
            <summary>
            Delete the chart at the specific position
            </summary>
            <param name="PositionID">Zero based</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1.Chart">
            <summary>
            A reference to the chart object
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1.Add(OfficeOpenXml.ExcelRangeBase)">
            <summary>
            Adds a new serie to the chart. Do not apply to pivotcharts.
            </summary>
            <param name="Serie">The value serie range</param>
            <returns>The serie</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1.Add(System.String)">
            <summary>
            Adds a new serie to the chart. Do not apply to pivotcharts.
            </summary>
            <param name="Serie">The value serie range</param>
            <returns>The serie</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1.Add(OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase)">
            <summary>
            Adds a new serie to the chart. Do not apply to pivotcharts.
            </summary>
            <param name="Serie">The Y-Axis range</param>
            <param name="XSerie">The X-Axis range</param>
            <returns>The serie</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1.Add(System.String,System.String)">
            <summary>
            Adds a new serie to the chart.Do not apply to pivotcharts.
            </summary>
            <param name="SerieAddress">The Y-Axis range</param>
            <param name="XSerieAddress">The X-Axis range</param>
            <returns>The serie</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1.AddSeries(System.String,System.String,System.String)">
            <summary>
            Adds a new serie to the chart
            </summary>
            <param name="SerieAddress">The Y-Axis range</param>
            <param name="XSerieAddress">The X-Axis range</param>
            <param name="bubbleSizeAddress">Bubble chart size</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartSerieWithErrorBars">
            <summary>
            A base class used for chart series that support ErrorBars
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartSerieWithErrorBars.#ctor(OfficeOpenXml.Drawing.Chart.ExcelChart,System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="chart">Chart series</param>
            <param name="ns">Namespacemanager</param>
            <param name="node">Topnode</param>
            <param name="isPivot">Is pivotchart</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerieWithErrorBars.ErrorBars">
            <summary>
            A collection of error bars
            <seealso cref="M:OfficeOpenXml.Drawing.Chart.ExcelChartSerieWithErrorBars.AddErrorBars(OfficeOpenXml.Drawing.eErrorBarType,OfficeOpenXml.Drawing.eErrorValueType)"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartSerieWithErrorBars.AddErrorBars(OfficeOpenXml.Drawing.eErrorBarType,OfficeOpenXml.Drawing.eErrorValueType)">
            <summary>
            Adds a errorbars to the chart serie
            </summary>
            <param name="barType"></param>
            <param name="valueType"></param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartSerieWithErrorBars.HasErrorBars">
            <summary>
            Returns true if the serie has Error Bars
            </summary>
            <returns>True if the serie has Error Bars</returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartSerieWithHorizontalErrorBars">
            <summary>
            A base class used for chart series that support ErrorBars
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartSerieWithHorizontalErrorBars.#ctor(OfficeOpenXml.Drawing.Chart.ExcelChart,System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="chart">Chart series</param>
            <param name="ns">Namespacemanager</param>
            <param name="node">Topnode</param>
            <param name="isPivot">Is pivotchart</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerieWithHorizontalErrorBars.ErrorBarsX">
            <summary>
            Horizontal error bars
            <seealso cref="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerieWithHorizontalErrorBars.ErrorBarsX"/>
            <seealso cref="M:OfficeOpenXml.Drawing.Chart.ExcelChartSerieWithHorizontalErrorBars.AddErrorBars(OfficeOpenXml.Drawing.eErrorBarType,OfficeOpenXml.Drawing.eErrorValueType)"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartSerieWithHorizontalErrorBars.AddErrorBars(OfficeOpenXml.Drawing.eErrorBarType,OfficeOpenXml.Drawing.eErrorValueType)">
            <summary>
            Adds error bars to the chart serie for both vertical and horizontal directions.
            </summary>
            <param name="barType">The type of error bars</param>
            <param name="valueType">The type of value the error bars will show</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartSerieWithHorizontalErrorBars.AddErrorBars(OfficeOpenXml.Drawing.eErrorBarType,OfficeOpenXml.Drawing.eErrorValueType,System.Nullable{OfficeOpenXml.Drawing.eErrorBarDirection})">
            <summary>
            Adds error bars to the chart serie for vertical or horizontal directions.
            </summary>
            <param name="barType">The type of error bars</param>
            <param name="valueType">The type of value the error bars will show</param>
            <param name="direction">Direction for the error bars. A value of null will add both horizontal and vertical error bars. </param>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartStandard">
            <summary>
            Base class for Chart object.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.GetChartNodeText">
            <summary>
            Get the name of the chart node
            </summary>
            <returns>The name</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.AddAxis">
            <summary>
            Add a secondary axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.Title">
            <summary>
            Title of the chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.HasTitle">
            <summary>
            True if the chart has a title
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.HasLegend">
            <summary>
            If the chart has a legend
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.DeleteTitle">
            <summary>
            Remove the title from the chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.Style">
            <summary>
            The build-in chart styles. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.RoundedCorners">
            <summary>
            Border rounded corners
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.ShowHiddenData">
            <summary>
            Show data in hidden rows and columns
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.DisplayBlanksAs">
            <summary>
            Specifies the possible ways to display blanks
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.ShowDataLabelsOverMaximum">
            <summary>
            Specifies data labels over the maximum of the chart shall be shown
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.CheckRemoveAxis(OfficeOpenXml.Drawing.Chart.ExcelChartAxis)">
            <summary>
            Remove all axis that are not used any more
            </summary>
            <param name="excelChartAxis"></param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.PlotArea">
            <summary>
            Plotarea
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.Legend">
            <summary>
            Legend
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.Border">
            <summary>
            Border
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.Fill">
            <summary>
            Access to Fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.Font">
            <summary>
            Access to font properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.TextBody">
            <summary>
            Access to text body properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.View3D">
            <summary>
            3D-settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.Grouping">
            <summary>
            Specifies the kind of grouping for a column, line, or area chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.VaryColors">
            <summary>
            If the chart has only one serie this varies the colors for each point.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.XAxis">
            <summary>
            The X Axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.YAxis">
            <summary>
            The Y Axis
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartStandardSerie">
            <summary>
            A chart serie
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartStandardSerie.#ctor(OfficeOpenXml.Drawing.Chart.ExcelChart,System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="chart">The chart</param>
            <param name="ns">Namespacemanager</param>
            <param name="node">Topnode</param>
            <param name="isPivot">Is pivotchart</param>  
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandardSerie.Header">
            <summary>
            Header for the serie.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandardSerie.HeaderAddress">
            <summary>
            Header address for the serie.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandardSerie.Series">
            <summary>
            Set this to a valid address or the drawing will be invalid.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandardSerie.XSeries">
            <summary>
            Set an address for the horisontal labels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandardSerie.TrendLines">
            <summary>
            Access to the trendline collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandardSerie.NumberOfItems">
            <summary>
            Number of items in the serie
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartStandardSerie.CreateCache">
            <summary>
            Creates a num cach for a chart serie.
            Please note that a serie can only have one column to have a cache.        
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartSurface">
            <summary>
            Chart surface settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSurface.Thickness">
            <summary>
            Show the values 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSurface.Fill">
            <summary>
            Access fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSurface.Border">
            <summary>
            Access border properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSurface.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSurface.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartTitle">
            <summary>
            The title of a chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTitle.Text">
            <summary>
            The text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTitle.Border">
            <summary>
            A reference to the border properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTitle.Fill">
            <summary>
            A reference to the fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTitle.Font">
            <summary>
            A reference to the font properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTitle.TextBody">
            <summary>
            Access to text body properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTitle.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTitle.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTitle.RichText">
            <summary>
            Richtext
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTitle.Overlay">
            <summary>
            Show without overlaping the chart.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTitle.AnchorCtr">
            <summary>
            The centering of the text. Centers the text to the smallest possible text container.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTitle.Anchor">
            <summary>
            How the text is anchored
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTitle.TextVertical">
            <summary>
            Vertical text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTitle.Rotation">
            <summary>
            Rotation in degrees (0-360)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTitleStandard.LinkedCell">
            <summary>
            A reference to a cell used as the title text
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline">
            <summary>
            A trendline object
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.Type">
            <summary>
            Type of Trendline
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.Name">
            <summary>
            Name in the legend
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.Order">
            <summary>
            Order for polynominal trendlines
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.Period">
            <summary>
            Period for monthly average trendlines
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.Forward">
            <summary>
            Forcast forward periods
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.Backward">
            <summary>
            Forcast backwards periods
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.Intercept">
            <summary>
            The point where the trendline crosses the vertical axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.DisplayRSquaredValue">
            <summary>
            If to display the R-squared value for a trendline
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.DisplayEquation">
            <summary>
            If to display the trendline equation on the chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.Fill">
            <summary>
            Access to fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.Border">
            <summary>
            Access to border properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.Label">
            <summary>
            Trendline labels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.HasLbl">
            <summary>
            Return true if the trendline has labels.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineCollection">
            <summary>
            A collection of trendlines.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineCollection.Add(OfficeOpenXml.Drawing.Chart.eTrendLine)">
            <summary>
            Add a new trendline
            </summary>
            <param name="Type"></param>
            <returns>The trendline</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineCollection.Count">
            <summary>
            Number of items in the collection.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineCollection.Item(System.Int32)">
            <summary>
            Returns a chart trendline at the specific position.  
            </summary>
            <param name="index">The index in the collection. 0-base</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineLabel">
            <summary>
            Access to trendline label properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineLabel.Fill">
            <summary>
            Access to fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineLabel.Border">
            <summary>
            Access to border properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineLabel.Font">
            <summary>
            Access to font properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineLabel.TextBody">
            <summary>
            Access to text body properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineLabel.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineLabel.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineLabel.RichText">
            <summary>
            Richtext
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineLabel.NumberFormat">
            <summary>
            Numberformat
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineLabel.SourceLinked">
            <summary>
            If the numberformat is linked to the source data
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelDoughnutChart">
            <summary>
            Provides access to doughnut chart specific properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelDoughnutChart.FirstSliceAngle">
            <summary>
            Angle of the first slize
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelDoughnutChart.HoleSize">
            <summary>
            Size of the doubnut hole
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelHistogramChartSeries">
            <summary>
            A collection of chart serie for a Histogram chart.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelHistogramChartSeries.AddParetoLine">
            <summary>
            Adds a pareto line to the serie.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelHistogramChartSeries.RemoveParetoLine">
            <summary>
            Removes the pareto line for the serie
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelStandardChartWithLines">
            <summary>
            Base class for standard charts with line properties.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStandardChartWithLines.Marker">
            <summary>
            If the series has markers
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStandardChartWithLines.Smooth">
            <summary>
            If the series has smooth lines
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStandardChartWithLines.DataLabel">
            <summary>
            Access to datalabel properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStandardChartWithLines.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStandardChartWithLines.UpDownBarGapWidth">
            <summary>
            The gap width between the up and down bars
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStandardChartWithLines.UpBar">
            <summary>
            Format the up bars on the chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStandardChartWithLines.DownBar">
            <summary>
            Format the down bars on the chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStandardChartWithLines.HighLowLine">
            <summary>
            Format the high-low lines for the series.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStandardChartWithLines.DropLine">
            <summary>
            Format the drop lines for the series.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelStandardChartWithLines.AddUpDownBars(System.Boolean,System.Boolean)">
            <summary>
            Adds up and/or down bars to the chart.        
            </summary>
            <param name="upBars">Adds up bars if up bars does not exist.</param>
            <param name="downBars">Adds down bars if down bars does not exist.</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelStandardChartWithLines.AddDropLines">
            <summary>
            Adds droplines to the chart.        
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelStandardChartWithLines.AddHighLowLines">
            <summary>
            Adds High-Low lines to the chart.        
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStandardChartWithLines.Series">
            <summary>
            The series for the chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelLineChart">
            <summary>
            Provides access to line chart specific properties
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelLineChartSerie">
            <summary>
            A serie for a line chart
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelLineChartSerie.#ctor(OfficeOpenXml.Drawing.Chart.ExcelChart,System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="chart">The chart</param>
            <param name="ns">Namespacemanager</param>
            <param name="node">Topnode</param>
            <param name="isPivot">Is pivotchart</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelLineChartSerie.DataLabel">
            <summary>
            Datalabels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelLineChartSerie.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelLineChartSerie.Marker">
            <summary>
            A reference to marker properties
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelLineChartSerie.HasMarker">
            <summary>
            If the serie has markers
            </summary>
            <returns>True if serie has markers</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelLineChartSerie.Smooth">
            <summary>
            Smooth lines
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelLineChartSerie.DataPoints">
            <summary>
            A collection of the individual datapoints
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelLineChartSerie.LineColor">
             <summary>
             Line color.
             </summary>
            
             <value>
             The color of the line.
             </value>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelLineChartSerie.MarkerSize">
             <summary>
             Gets or sets the size of the marker.
             </summary>
            
             <remarks>
             value between 2 and 72.
             </remarks>
            
             <value>
             The size of the marker.
             </value>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelLineChartSerie.LineWidth">
            <summary>
            Gets or sets the width of the line in pt.
            </summary>
            <value>
            The width of the line.
            </value>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelLineChartSerie.MarkerLineColor">
            <summary>
            Marker Line color. 
            (not to be confused with LineColor)
            </summary>
            <value>
            The color of the Marker line.
            </value>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelOfPieChart">
            <summary>
            Provides access to OfPie-Chart specific properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelOfPieChart.OfPieType">
            <summary>
            Type, pie or bar
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelOfPieChart.GapWidth">
            <summary>
            The size of the gap between two adjacent bars/columns
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelPieChart">
            <summary>
            Provides access to pie chart specific properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelPieChart.DataLabel">
            <summary>
            Access to datalabel properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelPieChart.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelPieChart.Series">
            <summary>
            A collection of series for a Pie Chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelPieChartSerie">
            <summary>
            A serie for a pie chart
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelPieChartSerie.#ctor(OfficeOpenXml.Drawing.Chart.ExcelChart,System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="chart">The chart</param>
            <param name="ns">Namespacemanager</param>
            <param name="node">Topnode</param>
            <param name="isPivot">Is pivotchart</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelPieChartSerie.Explosion">
            <summary>
            Explosion for Piecharts
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelPieChartSerie.DataLabel">
            <summary>
            DataLabels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelPieChartSerie.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelPieChartSerie.DataPoints">
            <summary>
            A collection of the individual datapoints
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelRadarChart">
            <summary>
            Provides access to line chart specific properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelRadarChart.RadarStyle">
            <summary>
            The type of radarchart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelRadarChart.DataLabel">
            <summary>
            Access to datalabel properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelRadarChart.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelRadarChart.Series">
            <summary>
            A collection of series for a Radar Chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelRadarChartSerie">
            <summary>
            A serie for a scatter chart
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelRadarChartSerie.#ctor(OfficeOpenXml.Drawing.Chart.ExcelChart,System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="chart">The chart</param>
            <param name="ns">Namespacemanager</param>
            <param name="node">Topnode</param>
            <param name="isPivot">Is pivotchart</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelRadarChartSerie.DataLabel">
            <summary>
            Datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelRadarChartSerie.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelRadarChartSerie.Marker">
            <summary>
            A reference to marker properties
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelRadarChartSerie.HasMarker">
            <summary>
            If the serie has markers
            </summary>
            <returns>True if serie has markers</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelRadarChartSerie.DataPoints">
            <summary>
            A collection of the individual datapoints
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelRadarChartSerie.MarkerSize">
            <summary>
            The size of a markers
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelScatterChart">
            <summary>
            Provides access to scatter chart specific properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChart.ScatterStyle">
            <summary>
            If the scatter has LineMarkers or SmoothMarkers
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChart.Marker">
            <summary>
            If the series has markers
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChart.DataLabel">
            <summary>
            Access to datalabel properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChart.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChart.Series">
            <summary>
            A collection of series for a Scatter Chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelScatterChartSerie">
            <summary>
            A serie for a scatter chart
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelScatterChartSerie.#ctor(OfficeOpenXml.Drawing.Chart.ExcelChart,System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="chart">The chart</param>
            <param name="ns">Namespacemanager</param>
            <param name="node">Topnode</param>
            <param name="isPivot">Is pivotchart</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChartSerie.DataLabel">
            <summary>
            Data label properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChartSerie.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChartSerie.Smooth">
            <summary>
            Smooth for scattercharts
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChartSerie.Marker">
            <summary>
            A reference to marker properties
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelScatterChartSerie.HasMarker">
            <summary>
            If the serie has markers
            </summary>
            <returns>True if serie has markers</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChartSerie.DataPoints">
            <summary>
            A collection of the individual datapoints
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChartSerie.LineColor">
             <summary>
             Line color.
             </summary>
            
             <value>
             The color of the line.
             </value>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChartSerie.MarkerSize">
             <summary>
             Gets or sets the size of the marker.
             </summary>
            
             <remarks>
             value between 2 and 72.
             </remarks>
            
             <value>
             The size of the marker.
             </value>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChartSerie.MarkerColor">
            <summary>
            Marker color.
            </summary>
            <value>
            The color of the Marker.
            </value>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChartSerie.LineWidth">
             <summary>
             Gets or sets the width of the line in pt.
             </summary>
            
             <value>
             The width of the line.
             </value>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChartSerie.MarkerLineColor">
             <summary>
             Marker Line color.
             (not to be confused with LineColor)
             </summary>
            
             <value>
             The color of the Marker line.
             </value>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelStockChart">
            <summary>
            Provides access to stock chart specific properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStockChart.Series">
            <summary>
            A collection of series for a Stock Chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelStockChartSerie">
            <summary>
            A serie for a scatter chart
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelStockChartSerie.#ctor(OfficeOpenXml.Drawing.Chart.ExcelChart,System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="chart">The chart</param>
            <param name="ns">Namespacemanager</param>
            <param name="node">Topnode</param>
            <param name="isPivot">Is pivotchart</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStockChartSerie.DataLabel">
            <summary>
            Data label properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStockChartSerie.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStockChartSerie.Smooth">
            <summary>
            Smooth for scattercharts
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStockChartSerie.Marker">
            <summary>
            A reference to marker properties
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelStockChartSerie.HasMarker">
            <summary>
            If the serie has markers
            </summary>
            <returns>True if serie has markers</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStockChartSerie.DataPoints">
            <summary>
            A collection of the individual datapoints
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStockChartSerie.LineColor">
             <summary>
             Line color.
             </summary>
            
             <value>
             The color of the line.
             </value>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStockChartSerie.MarkerSize">
             <summary>
             Gets or sets the size of the marker.
             </summary>
            
             <remarks>
             value between 2 and 72.
             </remarks>
            
             <value>
             The size of the marker.
             </value>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStockChartSerie.MarkerColor">
            <summary>
            Marker color.
            </summary>
            <value>
            The color of the Marker.
            </value>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStockChartSerie.LineWidth">
             <summary>
             Gets or sets the width of the line in pt.
             </summary>
            
             <value>
             The width of the line.
             </value>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStockChartSerie.MarkerLineColor">
             <summary>
             Marker Line color.
             (not to be confused with LineColor)
             </summary>
            
             <value>
             The color of the Marker line.
             </value>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelSurfaceChart">
            <summary>
            A Surface chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelSurfaceChart.Wireframe">
            <summary>
            The surface chart is drawn as a wireframe
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelSurfaceChart.Series">
            <summary>
            A collection of series for a Surface Chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelSurfaceChartSerie">
            <summary>
            A serie for a surface chart
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelSurfaceChartSerie.#ctor(OfficeOpenXml.Drawing.Chart.ExcelChart,System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="chart">The chart</param>
            <param name="ns">Namespacemanager</param>
            <param name="node">Topnode</param>
            <param name="isPivot">Is pivotchart</param>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.Style.eChartColorStyleMethod">
            <summary>
            Method for how colors are picked from the Colors collection
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.eChartColorStyleMethod.Cycle">
            <summary>
            The color picked from Colors is the index modulus the total set of colors in the list.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.eChartColorStyleMethod.WithinLinear">
            <summary>
            The color picked from Colors is the first color with a brightness that varies from darker to lighter.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.eChartColorStyleMethod.AcrossLinear">
            <summary>
            The color picked from Colors is the index modulus the total set of colors in the list. The brightness varies from lighter to darker
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.eChartColorStyleMethod.WithinLinearReversed">
            <summary>
            The color picked from Colors is the first color with a brightness that varies from lighter to darker. The brightness varies from darker to lighter. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.eChartColorStyleMethod.AcrossLinearReversed">
            <summary>
            The color picked from Colors is the index modulus the total set of colors in the list. The brightness varies from darkerlighter. 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors">
            <summary>
            Chart color schemes mapping to the default colors in Excel
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.ColorfulPalette1">
            <summary>
            Colorful Palette 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.ColorfulPalette2">
            <summary>
            Colorful Palette 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.ColorfulPalette3">
            <summary>
            Colorful Palette 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.ColorfulPalette4">
            <summary>
            Colorful Palette 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.MonochromaticPalette1">
            <summary>
            Monochromatic Palette 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.MonochromaticPalette2">
            <summary>
            Monochromatic Palette 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.MonochromaticPalette3">
            <summary>
            Monochromatic Palette 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.MonochromaticPalette4">
            <summary>
            Monochromatic Palette 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.MonochromaticPalette5">
            <summary>
            Monochromatic Palette 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.MonochromaticPalette6">
            <summary>
            Monochromatic Palette 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.MonochromaticPalette7">
            <summary>
            Monochromatic Palette 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.MonochromaticPalette8">
            <summary>
            Monochromatic Palette 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.MonochromaticPalette9">
            <summary>
            Monochromatic Palette 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.MonochromaticPalette10">
            <summary>
            Monochromatic Palette 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.MonochromaticPalette11">
            <summary>
            Monochromatic Palette 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.MonochromaticPalette12">
            <summary>
            Monochromatic Palette 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.MonochromaticPalette13">
            <summary>
            Monochromatic Palette 13
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle">
            <summary>
            Maps to Excel's built-in chart styles, primary for charts with one data serie. 
            Note that Excel changes chart type depending on many parameters, like number of series, axis type and more, so it will not always match the number in Excel.
            To be certain of getting the correct style use the chart style number of the style you want to apply
            For charts with more than one series use <see cref="T:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries"/>
            By default the styles are loaded into the StyleLibrary.You can also load your own with your own id's.
            Styles are fetched from the StyleLibrary by the id provided in this enum. 
            <seealso cref="F:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.StyleLibrary" />
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Area3dChartStyle1">
            <summary>
            3D Area Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Area3dChartStyle2">
            <summary>
            3D Area Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Area3dChartStyle3">
            <summary>
            3D Area Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Area3dChartStyle4">
            <summary>
            3D Area Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Area3dChartStyle5">
            <summary>
            3D Area Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Area3dChartStyle6">
            <summary>
            3D Area Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Area3dChartStyle7">
            <summary>
            3D Area Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Area3dChartStyle8">
            <summary>
            3D Area Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Area3dChartStyle9">
            <summary>
            3D Area Chart style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Area3dChartStyle10">
            <summary>
            3D Area Chart style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.AreaChartStyle1">
            <summary>
            Area Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.AreaChartStyle2">
            <summary>
            Area Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.AreaChartStyle3">
            <summary>
            Area Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.AreaChartStyle4">
            <summary>
            Area Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.AreaChartStyle5">
            <summary>
            Area Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.AreaChartStyle6">
            <summary>
            Area Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.AreaChartStyle7">
            <summary>
            Area Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.AreaChartStyle8">
            <summary>
            Area Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.AreaChartStyle9">
            <summary>
            Area Chart style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.AreaChartStyle10">
            <summary>
            Area Chart style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.AreaChartStyle11">
            <summary>
            Area Chart style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bar3dChartStyle1">
            <summary>
            Bar 3d Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bar3dChartStyle2">
            <summary>
            Bar 3d Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bar3dChartStyle3">
            <summary>
            Bar 3d Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bar3dChartStyle4">
            <summary>
            Bar 3d Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bar3dChartStyle5">
            <summary>
            Bar 3d Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bar3dChartStyle6">
            <summary>
            Bar 3d Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bar3dChartStyle7">
            <summary>
            Bar 3d Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bar3dChartStyle8">
            <summary>
            Bar 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bar3dChartStyle9">
            <summary>
            Bar 3d Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bar3dChartStyle10">
            <summary>
            Bar 3d Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bar3dChartStyle11">
            <summary>
            Bar 3d Chart Style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bar3dChartStyle12">
            <summary>
            Bar 3d Chart Style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BarChartStyle1">
            <summary>
            Bar Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BarChartStyle2">
            <summary>
            Bar Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BarChartStyle3">
            <summary>
            Bar Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BarChartStyle4">
            <summary>
            Bar Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BarChartStyle5">
            <summary>
            Bar Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BarChartStyle6">
            <summary>
            Bar Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BarChartStyle7">
            <summary>
            Bar Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BarChartStyle8">
            <summary>
            Bar Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BarChartStyle9">
            <summary>
            Bar Chart style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BarChartStyle10">
            <summary>
            Bar Chart style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BarChartStyle11">
            <summary>
            Bar Chart style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BarChartStyle12">
            <summary>
            Bar Chart style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BarChartStyle13">
            <summary>
            Bar Chart style 13
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BubbleChartStyle1">
            <summary>
            Bubble Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BubbleChartStyle2">
            <summary>
            Bubble Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bubble3dChartStyle1">
            <summary>
            Bubble 3d Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bubble3dChartStyle2">
            <summary>
            Bubble 3d Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bubble3dChartStyle3">
            <summary>
            Bubble 3d Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bubble3dChartStyle4">
            <summary>
            Bubble 3d Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bubble3dChartStyle5">
            <summary>
            Bubble 3d Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bubble3dChartStyle6">
            <summary>
            Bubble 3d Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bubble3dChartStyle7">
            <summary>
            Bubble 3d Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bubble3dChartStyle8">
            <summary>
            Bubble 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bubble3dChartStyle9">
            <summary>
            Bubble 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BubbleChartStyle3">
            <summary>
            Bubble Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BubbleChartStyle4">
            <summary>
            Bubble Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BubbleChartStyle5">
            <summary>
            Bubble Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BubbleChartStyle6">
            <summary>
            Bubble Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BubbleChartStyle7">
            <summary>
            Bubble Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BubbleChartStyle8">
            <summary>
            Bubble Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BubbleChartStyle9">
            <summary>
            Bubble Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BubbleChartStyle10">
            <summary>
            Bubble Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BubbleChartStyle11">
            <summary>
            Bubble Chart Style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Column3dChartStyle1">
            <summary>
            Column 3d Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Column3dChartStyle2">
            <summary>
            Column 3d Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Column3dChartStyle3">
            <summary>
            Column 3d Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Column3dChartStyle4">
            <summary>
            Column 3d Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Column3dChartStyle5">
            <summary>
            Column 3d Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Column3dChartStyle6">
            <summary>
            Column 3d Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Column3dChartStyle7">
            <summary>
            Column 3d Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Column3dChartStyle8">
            <summary>
            Column 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Column3dChartStyle9">
            <summary>
            Column 3d Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Column3dChartStyle10">
            <summary>
            Column 3d Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Column3dChartStyle11">
            <summary>
            Column 3d Chart Style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Column3dChartStyle12">
            <summary>
            Column 3d Chart Style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle1">
            <summary>
            Column Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle2">
            <summary>
            Column Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle3">
            <summary>
            Column Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle4">
            <summary>
            Column Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle5">
            <summary>
            Column Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle6">
            <summary>
            Column Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle7">
            <summary>
            Column Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle8">
            <summary>
            Column Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle9">
            <summary>
            Column Chart style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle10">
            <summary>
            Column Chart style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle11">
            <summary>
            Column Chart style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle12">
            <summary>
            Column Chart style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle13">
            <summary>
            Column Chart style 13
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle14">
            <summary>
            Column Chart style 14
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle15">
            <summary>
            Column Chart style 15
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle16">
            <summary>
            Column Chart style 16
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ComboChartStyle1">
            <summary>
            Custom Combined Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ComboChartStyle2">
            <summary>
            Custom Combined Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ComboChartStyle3">
            <summary>
            Custom Combined Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ComboChartStyle4">
            <summary>
            Custom Combined Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ComboChartStyle5">
            <summary>
            Custom Combined Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ComboChartStyle6">
            <summary>
            Custom Combined Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ComboChartStyle7">
            <summary>
            Custom Combined Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ComboChartStyle8">
            <summary>
            Custom Combined Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.DoughnutChartStyle1">
            <summary>
            Doughnut Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.DoughnutChartStyle2">
            <summary>
            Doughnut Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.DoughnutChartStyle3">
            <summary>
            Doughnut Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.DoughnutChartStyle4">
            <summary>
            Doughnut Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.DoughnutChartStyle5">
            <summary>
            Doughnut Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.DoughnutChartStyle6">
            <summary>
            Doughnut Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.DoughnutChartStyle7">
            <summary>
            Doughnut Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.DoughnutChartStyle8">
            <summary>
            Doughnut Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.DoughnutChartStyle9">
            <summary>
            Doughnut Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.DoughnutChartStyle10">
            <summary>
            Doughnut Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Line3dChartStyle1">
            <summary>
            Line 3d Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Line3dChartStyle2">
            <summary>
            Line 3d Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Line3dChartStyle3">
            <summary>
            Line 3d Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Line3dChartStyle4">
            <summary>
            Line 3d Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle1">
            <summary>
            Line Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle2">
            <summary>
            Line Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle3">
            <summary>
            Line Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle4">
            <summary>
            Line Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle5">
            <summary>
            Line Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle6">
            <summary>
            Line Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle7">
            <summary>
            Line Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle8">
            <summary>
            Line Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle9">
            <summary>
            Line Chart style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle10">
            <summary>
            Line Chart style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle11">
            <summary>
            Line Chart style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle12">
            <summary>
            Line Chart style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle13">
            <summary>
            Line Chart style 13
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle14">
            <summary>
            Line Chart style 14
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle15">
            <summary>
            Line Chart style 15
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.OfPieChartStyle1">
            <summary>
            Pie- or Bar-of pie Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.OfPieChartStyle2">
            <summary>
            Pie- or Bar-of pie Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.OfPieChartStyle3">
            <summary>
            Pie- or Bar-of pie Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.OfPieChartStyle4">
            <summary>
            Pie- or Bar-of pie Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.OfPieChartStyle5">
            <summary>
            Pie- or Bar-of pie Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.OfPieChartStyle6">
            <summary>
            Pie- or Bar-of pie Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.OfPieChartStyle7">
            <summary>
            Pie- or Bar-of pie Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.OfPieChartStyle8">
            <summary>
            Pie- or Bar-of pie Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.OfPieChartStyle9">
            <summary>
            Pie- or Bar-of pie Chart style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.OfPieChartStyle10">
            <summary>
            Pie- or Bar-of pie Chart style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.OfPieChartStyle11">
            <summary>
            Pie- or Bar-of pie Chart style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.OfPieChartStyle12">
            <summary>
            Pie- or Bar-of pie Chart style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Pie3dChartStyle1">
            <summary>
            Pie 3d Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Pie3dChartStyle2">
            <summary>
            Pie 3d Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Pie3dChartStyle3">
            <summary>
            Pie 3d Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Pie3dChartStyle4">
            <summary>
            Pie 3d Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Pie3dChartStyle5">
            <summary>
            Pie 3d Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Pie3dChartStyle6">
            <summary>
            Pie 3d Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Pie3dChartStyle7">
            <summary>
            Pie 3d Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Pie3dChartStyle8">
            <summary>
            Pie 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Pie3dChartStyle9">
            <summary>
            Pie 3d Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Pie3dChartStyle10">
            <summary>
            Pie 3d Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.PieChartStyle1">
            <summary>
            Pie Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.PieChartStyle2">
            <summary>
            Pie Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.PieChartStyle3">
            <summary>
            Pie Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.PieChartStyle4">
            <summary>
            Pie Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.PieChartStyle5">
            <summary>
            Pie Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.PieChartStyle6">
            <summary>
            Pie Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.PieChartStyle7">
            <summary>
            Pie Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.PieChartStyle8">
            <summary>
            Pie Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.PieChartStyle9">
            <summary>
            Pie Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.PieChartStyle10">
            <summary>
            Pie Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.PieChartStyle11">
            <summary>
            Pie Chart style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.PieChartStyle12">
            <summary>
            Pie Chart style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.RadarChartStyle1">
            <summary>
            Radar Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.RadarChartStyle2">
            <summary>
            Radar Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.RadarChartStyle3">
            <summary>
            Radar Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.RadarChartStyle4">
            <summary>
            Radar Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.RadarChartStyle5">
            <summary>
            Radar Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.RadarChartStyle6">
            <summary>
            Radar Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.RadarChartStyle7">
            <summary>
            Radar Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.RadarChartStyle8">
            <summary>
            Radar Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ScatterChartStyle1">
            <summary>
            Scatter Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ScatterChartStyle2">
            <summary>
            Scatter Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ScatterChartStyle3">
            <summary>
            Scatter Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ScatterChartStyle4">
            <summary>
            Scatter Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ScatterChartStyle5">
            <summary>
            Scatter Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ScatterChartStyle6">
            <summary>
            Scatter Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ScatterChartStyle7">
            <summary>
            Scatter Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ScatterChartStyle8">
            <summary>
            Scatter Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ScatterChartStyle9">
            <summary>
            Scatter Chart style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ScatterChartStyle10">
            <summary>
            Scatter Chart style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ScatterChartStyle11">
            <summary>
            Scatter Chart style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ScatterChartStyle12">
            <summary>
            Scatter Chart style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedArea3dChartStyle1">
            <summary>
            Stacked Area 3d Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedArea3dChartStyle2">
            <summary>
            Stacked Area 3d Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedArea3dChartStyle3">
            <summary>
            Stacked Area 3d Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedArea3dChartStyle4">
            <summary>
            Stacked Area 3d Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedArea3dChartStyle5">
            <summary>
            Stacked Area 3d Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedArea3dChartStyle6">
            <summary>
            Stacked Area 3d Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedArea3dChartStyle7">
            <summary>
            Stacked Area 3d Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedArea3dChartStyle8">
            <summary>
            Stacked Area 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedArea3dChartStyle9">
            <summary>
            Stacked Area 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedArea3dChartStyle10">
            <summary>
            Stacked Area 3d Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedAreaChartStyle1">
            <summary>
            Stacked Area Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedAreaChartStyle2">
            <summary>
            Stacked Area Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedAreaChartStyle3">
            <summary>
            Stacked Area Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedAreaChartStyle4">
            <summary>
            Stacked Area Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedAreaChartStyle5">
            <summary>
            Stacked Area Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedAreaChartStyle6">
            <summary>
            Stacked Area Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedAreaChartStyle7">
            <summary>
            Stacked Area Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedAreaChartStyle8">
            <summary>
            Stacked Area Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedAreaChartStyle9">
            <summary>
            Stacked Area Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedAreaChartStyle10">
            <summary>
            Stacked Area Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedAreaChartStyle11">
            <summary>
            Stacked Area Chart Style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBar3dChartStyle1">
            <summary>
            Stacked Column Stacked 3d Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBar3dChartStyle2">
            <summary>
            Stacked Column 3d Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBar3dChartStyle3">
            <summary>
            Stacked Column 3d Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBar3dChartStyle4">
            <summary>
            Stacked Column 3d Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBar3dChartStyle5">
            <summary>
            Stacked Column 3d Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBar3dChartStyle6">
            <summary>
            Stacked Column 3d Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBar3dChartStyle7">
            <summary>
            Stacked Column 3d Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBar3dChartStyle8">
            <summary>
            Stacked Column 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBarChartStyle1">
            <summary>
            Stacked Bar Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBarChartStyle2">
            <summary>
            Stacked Bar Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBarChartStyle3">
            <summary>
            Stacked Bar Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBarChartStyle4">
            <summary>
            Stacked Bar Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBarChartStyle5">
            <summary>
            Stacked Bar Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBarChartStyle6">
            <summary>
            Stacked Bar Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBarChartStyle7">
            <summary>
            Stacked Bar Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBarChartStyle8">
            <summary>
            Stacked Bar Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBarChartStyle9">
            <summary>
            Stacked Bar Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBarChartStyle10">
            <summary>
            Stacked Bar Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBarChartStyle11">
            <summary>
            Stacked Bar Chart Style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumn3dChartStyle1">
            <summary>
            Stacked Column 3d Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumn3dChartStyle2">
            <summary>
            Stacked Column 3d Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumn3dChartStyle3">
            <summary>
            Stacked Column 3d Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumn3dChartStyle4">
            <summary>
            Stacked Column 3d Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumn3dChartStyle5">
            <summary>
            Stacked Column 3d Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumn3dChartStyle6">
            <summary>
            Stacked Column 3d Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumn3dChartStyle7">
            <summary>
            Stacked Column 3d Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumn3dChartStyle8">
            <summary>
            Stacked Column 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumnChartStyle1">
            <summary>
            Stacked Bar Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumnChartStyle2">
            <summary>
            Stacked Bar Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumnChartStyle3">
            <summary>
            Stacked Bar Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumnChartStyle4">
            <summary>
            Stacked Bar Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumnChartStyle5">
            <summary>
            Stacked Bar Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumnChartStyle6">
            <summary>
            Stacked Bar Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumnChartStyle7">
            <summary>
            Stacked Bar Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumnChartStyle8">
            <summary>
            Stacked Bar Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumnChartStyle9">
            <summary>
            Stacked Bar Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumnChartStyle10">
            <summary>
            Stacked Bar Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumnChartStyle11">
            <summary>
            Stacked Bar Chart Style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StockChartStyle1">
            <summary>
            Stock Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StockChartStyle2">
            <summary>
            Stock Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StockChartStyle3">
            <summary>
            Stock Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StockChartStyle4">
            <summary>
            Stock Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StockChartStyle5">
            <summary>
            Stock Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StockChartStyle6">
            <summary>
            Stock Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StockChartStyle7">
            <summary>
            Stock Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StockChartStyle8">
            <summary>
            Stock Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StockChartStyle9">
            <summary>
            Stock Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StockChartStyle10">
            <summary>
            Stock Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StockChartStyle11">
            <summary>
            Stock Chart Style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.SunburstChartStyle1">
            <summary>
            Sunburst Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.SunburstChartStyle2">
            <summary>
            Sunburst Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.SunburstChartStyle3">
            <summary>
            Sunburst Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.SunburstChartStyle4">
            <summary>
            Sunburst Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.SunburstChartStyle5">
            <summary>
            Sunburst Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.SunburstChartStyle6">
            <summary>
            Sunburst Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.SunburstChartStyle7">
            <summary>
            Sunburst Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.SunburstChartStyle8">
            <summary>
            Sunburst Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.TreemapChartStyle1">
            <summary>
            Treemap Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.TreemapChartStyle2">
            <summary>
            Treemap Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.TreemapChartStyle3">
            <summary>
            Treemap Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.TreemapChartStyle4">
            <summary>
            Treemap Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.TreemapChartStyle5">
            <summary>
            Treemap Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.TreemapChartStyle6">
            <summary>
            Treemap Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.TreemapChartStyle7">
            <summary>
            Treemap Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.TreemapChartStyle8">
            <summary>
            Treemap Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.TreemapChartStyle9">
            <summary>
            Treemap Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BoxWhiskerChartStyle1">
            <summary>
            Box &amp; Whisker Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BoxWhiskerChartStyle2">
            <summary>
            Box &amp; Whisker Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BoxWhiskerChartStyle3">
            <summary>
            Box &amp; Whisker Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BoxWhiskerChartStyle4">
            <summary>
            Box &amp; Whisker Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BoxWhiskerChartStyle5">
            <summary>
            Box &amp; Whisker Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BoxWhiskerChartStyle6">
            <summary>
            Box &amp; Whisker Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.HistogramChartStyle1">
            <summary>
            Histogram Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.HistogramChartStyle2">
            <summary>
            Histogram Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.HistogramChartStyle3">
            <summary>
            Histogram Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.HistogramChartStyle4">
            <summary>
            Histogram Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.HistogramChartStyle5">
            <summary>
            Histogram Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.HistogramChartStyle6">
            <summary>
            Histogram Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.WaterfallChartStyle1">
            <summary>
            Waterfall Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.WaterfallChartStyle2">
            <summary>
            Waterfall Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.WaterfallChartStyle3">
            <summary>
            Waterfall Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.WaterfallChartStyle4">
            <summary>
            Waterfall Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.WaterfallChartStyle5">
            <summary>
            Waterfall Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.WaterfallChartStyle6">
            <summary>
            Waterfall Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.WaterfallChartStyle7">
            <summary>
            Waterfall Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.WaterfallChartStyle8">
            <summary>
            Waterfall Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.FunnelChartStyle1">
            <summary>
            Funnel Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.FunnelChartStyle2">
            <summary>
            Funnel Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.FunnelChartStyle3">
            <summary>
            Funnel Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.FunnelChartStyle4">
            <summary>
            Funnel Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.FunnelChartStyle5">
            <summary>
            Funnel Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.FunnelChartStyle6">
            <summary>
            Funnel Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.FunnelChartStyle7">
            <summary>
            Funnel Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.FunnelChartStyle8">
            <summary>
            Funnel Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.FunnelChartStyle9">
            <summary>
            Funnel Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.RegionMapChartStyle1">
            <summary>
            Regionmap Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.RegionMapChartStyle2">
            <summary>
            Regionmap Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.RegionMapChartStyle3">
            <summary>
            Regionmap Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.RegionMapChartStyle4">
            <summary>
            Regionmap Chart Style 4
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries">
            <summary>
            Maps to Excel's built-in chart styles, for charts with more that one data serie. 
            Note that Excel changes chart type depending on many parameters, like number of series, axis type and more, so it will not always match the number in Excel.
            To be certain of getting the correct style use the chart style number of the style you want to apply
            For charts with only one data serie use <see cref="T:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle"/>
            Styles are fetched from the StyleLibrary by the id provided in this enum. 
            <seealso cref="F:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.StyleLibrary" />
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Area3dChartStyle1">
            <summary>
            3D Area Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Area3dChartStyle2">
            <summary>
            3D Area Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Area3dChartStyle3">
            <summary>
            3D Area Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Area3dChartStyle4">
            <summary>
            3D Area Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Area3dChartStyle5">
            <summary>
            3D Area Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Area3dChartStyle6">
            <summary>
            3D Area Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Area3dChartStyle7">
            <summary>
            3D Area Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Area3dChartStyle8">
            <summary>
            3D Area Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Area3dChartStyle9">
            <summary>
            3D Area Chart style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.AreaChartStyle1">
            <summary>
            Area Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.AreaChartStyle2">
            <summary>
            Area Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.AreaChartStyle3">
            <summary>
            Area Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.AreaChartStyle4">
            <summary>
            Area Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.AreaChartStyle5">
            <summary>
            Area Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.AreaChartStyle6">
            <summary>
            Area Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.AreaChartStyle7">
            <summary>
            Area Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.AreaChartStyle8">
            <summary>
            Area Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.AreaChartStyle9">
            <summary>
            Area Chart style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.AreaChartStyle10">
            <summary>
            Area Chart style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bar3dChartStyle1">
            <summary>
            Bar 3d Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bar3dChartStyle2">
            <summary>
            Bar 3d Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bar3dChartStyle3">
            <summary>
            Bar 3d Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bar3dChartStyle4">
            <summary>
            Bar 3d Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bar3dChartStyle5">
            <summary>
            Bar 3d Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bar3dChartStyle6">
            <summary>
            Bar 3d Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bar3dChartStyle7">
            <summary>
            Bar 3d Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bar3dChartStyle8">
            <summary>
            Bar 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bar3dChartStyle9">
            <summary>
            Bar 3d Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bar3dChartStyle10">
            <summary>
            Bar 3d Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bar3dChartStyle11">
            <summary>
            Bar 3d Chart Style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BarChartStyle1">
            <summary>
            Bar Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BarChartStyle2">
            <summary>
            Bar Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BarChartStyle3">
            <summary>
            Bar Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BarChartStyle4">
            <summary>
            Bar Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BarChartStyle5">
            <summary>
            Bar Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BarChartStyle6">
            <summary>
            Bar Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BarChartStyle7">
            <summary>
            Bar Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BarChartStyle8">
            <summary>
            Bar Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BarChartStyle9">
            <summary>
            Bar Chart style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BarChartStyle10">
            <summary>
            Bar Chart style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BarChartStyle11">
            <summary>
            Bar Chart style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BarChartStyle12">
            <summary>
            Bar Chart style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bubble3dChartStyle1">
            <summary>
            Bubble 3d Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bubble3dChartStyle2">
            <summary>
            Bubble 3d Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bubble3dChartStyle3">
            <summary>
            Bubble 3d Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bubble3dChartStyle4">
            <summary>
            Bubble 3d Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bubble3dChartStyle5">
            <summary>
            Bubble 3d Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bubble3dChartStyle6">
            <summary>
            Bubble 3d Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bubble3dChartStyle7">
            <summary>
            Bubble 3d Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bubble3dChartStyle8">
            <summary>
            Bubble 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BubbleChartStyle1">
            <summary>
            Bubble Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BubbleChartStyle2">
            <summary>
            Bubble Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BubbleChartStyle3">
            <summary>
            Bubble Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BubbleChartStyle4">
            <summary>
            Bubble Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BubbleChartStyle5">
            <summary>
            Bubble Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BubbleChartStyle6">
            <summary>
            Bubble Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BubbleChartStyle7">
            <summary>
            Bubble Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BubbleChartStyle8">
            <summary>
            Bubble Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BubbleChartStyle9">
            <summary>
            Bubble Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BubbleChartStyle10">
            <summary>
            Bubble Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ColumnChartStyle1">
            <summary>
            Column Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ColumnChartStyle2">
            <summary>
            Column Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ColumnChartStyle3">
            <summary>
            Column Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ColumnChartStyle4">
            <summary>
            Column Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ColumnChartStyle5">
            <summary>
            Column Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ColumnChartStyle6">
            <summary>
            Column Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ColumnChartStyle7">
            <summary>
            Column Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ColumnChartStyle8">
            <summary>
            Column Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ColumnChartStyle9">
            <summary>
            Column Chart style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ColumnChartStyle10">
            <summary>
            Column Chart style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ColumnChartStyle11">
            <summary>
            Column Chart style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ColumnChartStyle12">
            <summary>
            Column Chart style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ColumnChartStyle13">
            <summary>
            Column Chart style 13
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ColumnChartStyle14">
            <summary>
            Column Chart style 14
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Column3dChartStyle1">
            <summary>
            Column 3d Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Column3dChartStyle2">
            <summary>
            Column 3d Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Column3dChartStyle3">
            <summary>
            Column 3d Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Column3dChartStyle4">
            <summary>
            Column 3d Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Column3dChartStyle5">
            <summary>
            Column 3d Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Column3dChartStyle6">
            <summary>
            Column 3d Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Column3dChartStyle7">
            <summary>
            Column 3d Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Column3dChartStyle8">
            <summary>
            Column 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Column3dChartStyle9">
            <summary>
            Column 3d Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Column3dChartStyle10">
            <summary>
            Column 3d Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Column3dChartStyle11">
            <summary>
            Column 3d Chart Style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ComboChartStyle1">
            <summary>
            Custom Combined Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ComboChartStyle2">
            <summary>
            Custom Combined Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ComboChartStyle3">
            <summary>
            Custom Combined Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ComboChartStyle4">
            <summary>
            Custom Combined Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ComboChartStyle5">
            <summary>
            Custom Combined Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ComboChartStyle6">
            <summary>
            Custom Combined Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ComboChartStyle7">
            <summary>
            Custom Combined Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ComboChartStyle8">
            <summary>
            Custom Combined Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.DoughnutChartStyle1">
            <summary>
            Doughnut Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.DoughnutChartStyle2">
            <summary>
            Doughnut Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.DoughnutChartStyle3">
            <summary>
            Doughnut Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.DoughnutChartStyle4">
            <summary>
            Doughnut Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.DoughnutChartStyle5">
            <summary>
            Doughnut Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.DoughnutChartStyle6">
            <summary>
            Doughnut Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.DoughnutChartStyle7">
            <summary>
            Doughnut Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.DoughnutChartStyle8">
            <summary>
            Doughnut Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.DoughnutChartStyle9">
            <summary>
            Doughnut Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Line3dChartStyle1">
            <summary>
            Line 3d Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Line3dChartStyle2">
            <summary>
            Line 3d Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Line3dChartStyle3">
            <summary>
            Line 3d Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Line3dChartStyle4">
            <summary>
            Line 3d Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.LineChartStyle1">
            <summary>
            Line Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.LineChartStyle2">
            <summary>
            Line Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.LineChartStyle3">
            <summary>
            Line Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.LineChartStyle4">
            <summary>
            Line Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.LineChartStyle5">
            <summary>
            Line Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.LineChartStyle6">
            <summary>
            Line Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.LineChartStyle7">
            <summary>
            Line Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.LineChartStyle8">
            <summary>
            Line Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.LineChartStyle9">
            <summary>
            Line Chart style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.LineChartStyle10">
            <summary>
            Line Chart style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.LineChartStyle11">
            <summary>
            Line Chart style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.LineChartStyle12">
            <summary>
            Line Chart style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.LineChartStyle13">
            <summary>
            Line Chart style 13
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.OfPieChartStyle1">
            <summary>
            Pie- or Bar-of pie Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.OfPieChartStyle2">
            <summary>
            Pie- or Bar-of pie Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.OfPieChartStyle3">
            <summary>
            Pie- or Bar-of pie Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.OfPieChartStyle4">
            <summary>
            Pie- or Bar-of pie Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.OfPieChartStyle5">
            <summary>
            Pie- or Bar-of pie Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.OfPieChartStyle6">
            <summary>
            Pie- or Bar-of pie Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.OfPieChartStyle7">
            <summary>
            Pie- or Bar-of pie Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.OfPieChartStyle8">
            <summary>
            Pie- or Bar-of pie Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.OfPieChartStyle9">
            <summary>
            Pie- or Bar-of pie Chart style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.OfPieChartStyle10">
            <summary>
            Pie- or Bar-of pie Chart style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.OfPieChartStyle11">
            <summary>
            Pie- or Bar-of pie Chart style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.OfPieChartStyle12">
            <summary>
            Pie- or Bar-of pie Chart style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.PieChartStyle1">
            <summary>
            Pie Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.PieChartStyle2">
            <summary>
            Pie Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.PieChartStyle3">
            <summary>
            Pie Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.PieChartStyle4">
            <summary>
            Pie Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.PieChartStyle5">
            <summary>
            Pie Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.PieChartStyle6">
            <summary>
            Pie Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.PieChartStyle7">
            <summary>
            Pie Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.PieChartStyle8">
            <summary>
            Pie Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.PieChartStyle9">
            <summary>
            Pie Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.PieChartStyle10">
            <summary>
            Pie Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.PieChartStyle11">
            <summary>
            Pie Chart style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.PieChartStyle12">
            <summary>
            Pie Chart style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Pie3dChartStyle1">
            <summary>
            Pie 3d Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Pie3dChartStyle2">
            <summary>
            Pie 3d Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Pie3dChartStyle3">
            <summary>
            Pie 3d Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Pie3dChartStyle4">
            <summary>
            Pie 3d Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Pie3dChartStyle5">
            <summary>
            Pie 3d Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Pie3dChartStyle6">
            <summary>
            Pie 3d Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Pie3dChartStyle7">
            <summary>
            Pie 3d Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Pie3dChartStyle8">
            <summary>
            Pie 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Pie3dChartStyle9">
            <summary>
            Pie 3d Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Pie3dChartStyle10">
            <summary>
            Pie 3d Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.RadarChartStyle1">
            <summary>
            Radar Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.RadarChartStyle2">
            <summary>
            Radar Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.RadarChartStyle3">
            <summary>
            Radar Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.RadarChartStyle4">
            <summary>
            Radar Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.RadarChartStyle5">
            <summary>
            Radar Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.RadarChartStyle6">
            <summary>
            Radar Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.RadarChartStyle7">
            <summary>
            Radar Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.RadarChartStyle8">
            <summary>
            Radar Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ScatterChartStyle1">
            <summary>
            Scatter Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ScatterChartStyle2">
            <summary>
            Scatter Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ScatterChartStyle3">
            <summary>
            Scatter Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ScatterChartStyle4">
            <summary>
            Scatter Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ScatterChartStyle5">
            <summary>
            Scatter Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ScatterChartStyle6">
            <summary>
            Scatter Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ScatterChartStyle7">
            <summary>
            Scatter Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ScatterChartStyle8">
            <summary>
            Scatter Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ScatterChartStyle9">
            <summary>
            Scatter Chart style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ScatterChartStyle10">
            <summary>
            Scatter Chart style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ScatterChartStyle11">
            <summary>
            Scatter Chart style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedArea3dChartStyle1">
            <summary>
            Stacked Area 3d Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedArea3dChartStyle2">
            <summary>
            Stacked Area 3d Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedArea3dChartStyle3">
            <summary>
            Stacked Area 3d Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedArea3dChartStyle4">
            <summary>
            Stacked Area 3d Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedArea3dChartStyle5">
            <summary>
            Stacked Area 3d Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedArea3dChartStyle6">
            <summary>
            Stacked Area 3d Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedArea3dChartStyle7">
            <summary>
            Stacked Area 3d Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedArea3dChartStyle8">
            <summary>
            Stacked Area 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedArea3dChartStyle9">
            <summary>
            Stacked Area 3d Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedAreaChartStyle1">
            <summary>
            Stacked Area Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedAreaChartStyle2">
            <summary>
            Stacked Area Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedAreaChartStyle3">
            <summary>
            Stacked Area Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedAreaChartStyle4">
            <summary>
            Stacked Area Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedAreaChartStyle5">
            <summary>
            Stacked Area Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedAreaChartStyle6">
            <summary>
            Stacked Area Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedAreaChartStyle7">
            <summary>
            Stacked Area Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedAreaChartStyle8">
            <summary>
            Stacked Area Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedAreaChartStyle9">
            <summary>
            Stacked Area Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedAreaChartStyle10">
            <summary>
            Stacked Area Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBar3dChartStyle1">
            <summary>
            Stacked Column Stacked 3d Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBar3dChartStyle2">
            <summary>
            Stacked Column 3d Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBar3dChartStyle3">
            <summary>
            Stacked Column 3d Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBar3dChartStyle4">
            <summary>
            Stacked Column 3d Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBar3dChartStyle5">
            <summary>
            Stacked Column 3d Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBar3dChartStyle6">
            <summary>
            Stacked Column 3d Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBar3dChartStyle7">
            <summary>
            Stacked Column 3d Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBar3dChartStyle8">
            <summary>
            Stacked Column 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBarChartStyle1">
            <summary>
            Stacked Bar Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBarChartStyle2">
            <summary>
            Stacked Bar Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBarChartStyle3">
            <summary>
            Stacked Bar Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBarChartStyle4">
            <summary>
            Stacked Bar Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBarChartStyle5">
            <summary>
            Stacked Bar Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBarChartStyle6">
            <summary>
            Stacked Bar Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBarChartStyle7">
            <summary>
            Stacked Bar Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBarChartStyle8">
            <summary>
            Stacked Bar Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBarChartStyle9">
            <summary>
            Stacked Bar Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBarChartStyle10">
            <summary>
            Stacked Bar Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBarChartStyle11">
            <summary>
            Stacked Bar Chart Style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumn3dChartStyle1">
            <summary>
            Stacked Column 3d Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumn3dChartStyle2">
            <summary>
            Stacked Column 3d Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumn3dChartStyle3">
            <summary>
            Stacked Column 3d Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumn3dChartStyle4">
            <summary>
            Stacked Column 3d Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumn3dChartStyle5">
            <summary>
            Stacked Column 3d Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumn3dChartStyle6">
            <summary>
            Stacked Column 3d Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumn3dChartStyle7">
            <summary>
            Stacked Column 3d Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumn3dChartStyle8">
            <summary>
            Stacked Column 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumnChartStyle1">
            <summary>
            Stacked Bar Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumnChartStyle2">
            <summary>
            Stacked Bar Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumnChartStyle3">
            <summary>
            Stacked Bar Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumnChartStyle4">
            <summary>
            Stacked Bar Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumnChartStyle5">
            <summary>
            Stacked Bar Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumnChartStyle6">
            <summary>
            Stacked Bar Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumnChartStyle7">
            <summary>
            Stacked Bar Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumnChartStyle8">
            <summary>
            Stacked Bar Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumnChartStyle9">
            <summary>
            Stacked Bar Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumnChartStyle10">
            <summary>
            Stacked Bar Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumnChartStyle11">
            <summary>
            Stacked Bar Chart Style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.SunburstChartStyle1">
            <summary>
            Sunburst Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.SunburstChartStyle2">
            <summary>
            Sunburst Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.SunburstChartStyle3">
            <summary>
            Sunburst Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.SunburstChartStyle4">
            <summary>
            Sunburst Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.SunburstChartStyle5">
            <summary>
            Sunburst Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.SunburstChartStyle6">
            <summary>
            Sunburst Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.SunburstChartStyle7">
            <summary>
            Sunburst Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.SunburstChartStyle8">
            <summary>
            Sunburst Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.TreemapChartStyle1">
            <summary>
            Treemap Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.TreemapChartStyle2">
            <summary>
            Treemap Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.TreemapChartStyle3">
            <summary>
            Treemap Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.TreemapChartStyle4">
            <summary>
            Treemap Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.TreemapChartStyle5">
            <summary>
            Treemap Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.TreemapChartStyle6">
            <summary>
            Treemap Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.TreemapChartStyle7">
            <summary>
            Treemap Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.TreemapChartStyle8">
            <summary>
            Treemap Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.TreemapChartStyle9">
            <summary>
            Treemap Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BoxWhiskerChartStyle1">
            <summary>
            Box &amp; Whisker Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BoxWhiskerChartStyle2">
            <summary>
            Box &amp; Whisker Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BoxWhiskerChartStyle3">
            <summary>
            Box &amp; Whisker Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BoxWhiskerChartStyle4">
            <summary>
            Box &amp; Whisker Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BoxWhiskerChartStyle5">
            <summary>
            Box &amp; Whisker Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BoxWhiskerChartStyle6">
            <summary>
            Box &amp; Whisker Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.HistogramChartStyle1">
            <summary>
            Histogram Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.HistogramChartStyle2">
            <summary>
            Histogram Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.HistogramChartStyle3">
            <summary>
            Histogram Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.HistogramChartStyle4">
            <summary>
            Histogram Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.HistogramChartStyle5">
            <summary>
            Histogram Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.HistogramChartStyle6">
            <summary>
            Histogram Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.WaterfallChartStyle1">
            <summary>
            Waterfall Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.WaterfallChartStyle2">
            <summary>
            Waterfall Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.WaterfallChartStyle3">
            <summary>
            Waterfall Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.WaterfallChartStyle4">
            <summary>
            Waterfall Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.WaterfallChartStyle5">
            <summary>
            Waterfall Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.WaterfallChartStyle6">
            <summary>
            Waterfall Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.WaterfallChartStyle7">
            <summary>
            Waterfall Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.WaterfallChartStyle8">
            <summary>
            Waterfall Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.FunnelChartStyle1">
            <summary>
            Funnel Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.FunnelChartStyle2">
            <summary>
            Funnel Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.FunnelChartStyle3">
            <summary>
            Funnel Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.FunnelChartStyle4">
            <summary>
            Funnel Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.FunnelChartStyle5">
            <summary>
            Funnel Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.FunnelChartStyle6">
            <summary>
            Funnel Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.FunnelChartStyle7">
            <summary>
            Funnel Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.FunnelChartStyle8">
            <summary>
            Funnel Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.FunnelChartStyle9">
            <summary>
            Funnel Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.RegionMapChartStyle1">
            <summary>
            Regionmap Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.RegionMapChartStyle2">
            <summary>
            Regionmap Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.RegionMapChartStyle3">
            <summary>
            Regionmap Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.RegionMapChartStyle4">
            <summary>
            Regionmap Chart Style 4
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.Style.ExcelChartColorsManager">
            <summary>
            Represents a color style of a chart.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartColorsManager.Method">
            <summary>
            The method to use to calculate the colors
            </summary>
            <remarks>AcrossLinear is not implemented yet, and will use WithinLinear</remarks>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartColorsManager.Colors">
            <summary>
            The colors to use for the calculation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartColorsManager.Variations">
            <summary>
            The variations to use for the calculation
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle">
            <summary>
            Represents a style for a chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.AxisTitle">
            <summary>
            Default formatting for an axis title.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.CategoryAxis">
            <summary>
            Default formatting for a category axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.ChartArea">
            <summary>
            Default formatting for a chart area
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.DataLabel">
            <summary>
            Default formatting for a data label
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.DataLabelCallout">
            <summary>
            Default formatting for a data label callout
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.DataPoint">
            <summary>
            Default formatting for a data point on a 2-D chart of type column, bar,	filled radar, stock, bubble, pie, doughnut, area and 3-D bubble.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.DataPoint3D">
            <summary>
            Default formatting for a data point on a 3-D chart of type column, bar, line, pie, area and surface.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.DataPointLine">
            <summary>
            Default formatting for a data point on a 2-D chart of type line, scatter and radar
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.DataPointMarker">
            <summary>
            Default formatting for a datapoint marker
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.DataPointMarkerLayout">
            <summary>
            Extended marker properties for a datapoint 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.DataPointWireframe">
            <summary>
            Default formatting for a datapoint on a surface wireframe chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.DataTable">
            <summary>
            Default formatting for a Data table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.DownBar">
            <summary>
            Default formatting for a downbar
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.DropLine">
            <summary>
            Default formatting for a dropline
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.ErrorBar">
            <summary>
            Default formatting for an errorbar
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.Floor">
            <summary>
            Default formatting for a floor
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.GridlineMajor">
            <summary>
            Default formatting for a major gridline
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.GridlineMinor">
            <summary>
            Default formatting for a minor gridline
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.HighLowLine">
            <summary>
            Default formatting for a high low line
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.LeaderLine">
            <summary>
            Default formatting for a leader line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle._legend">
            <summary>
            Default formatting for a legend
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.Legend">
            <summary>
            Default formatting for a chart legend
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.PlotArea">
            <summary>
            Default formatting for a plot area in a 2D chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.PlotArea3D">
            <summary>
            Default formatting for a plot area in a 3D chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.SeriesAxis">
            <summary>
            Default formatting for a series axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.SeriesLine">
            <summary>
            Default formatting for a series line
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.Title">
            <summary>
            Default formatting for a chart title
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.Trendline">
            <summary>
            Default formatting for a trend line
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.TrendlineLabel">
            <summary>
            Default formatting for a trend line label
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.UpBar">
            <summary>
            Default formatting for a up bar
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.ValueAxis">
            <summary>
            Default formatting for a value axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.Wall">
            <summary>
            Default formatting for a wall
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.Id">
            <summary>
            The id of the chart style
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleColor">
            <summary>
            A color for a chart style entry reference
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleColor.Auto">
            <summary>
            Color is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleColor.Index">
            <summary>
            The index, maps to the style matrix in the theme
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleColorManager">
            <summary>
            Manages colors for a chart style
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleColorManager.SetStyleColor(System.Int32)">
            <summary>
            Sets the style color for a chart style
            </summary>
            <param name="index">Is index, maps to the style matrix in the theme</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleColorManager.SetStyleColor(System.Boolean,System.Int32)">
            <summary>
            Sets the style color for a chart style
            </summary>
            <param name="isAuto">Is automatic</param>
            <param name="index">Is index, maps to the style matrix in the theme</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleColorManager.StyleColor">
            <summary>
            The style color object
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleColorManager.ResetColors(System.String)">
            <summary>
            Reset the color
            </summary>
            <param name="newNodeName">The new name</param>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry">
            <summary>
            A style entry for a chart part.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.BorderReference">
            Border reference. 
            Contains an index reference to the theme and a color to be used in border styling
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.FillReference">
            <summary>
            Fill reference. 
            Contains an index reference to the theme and a fill color to be used in fills
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.EffectReference">
            <summary>
            Effect reference. 
            Contains an index reference to the theme and a color to be used in effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.FontReference">
            <summary>
            Font reference. 
            Contains an index reference to the theme and a color to be used for font styling
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.Fill">
            <summary>
            Reference to fill settings for a chart part
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.Border">
            <summary>
            Reference to border settings for a chart part
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.Effect">
            <summary>
            Reference to border settings for a chart part
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.ThreeD">
            <summary>
            Reference to 3D effect settings for a chart part
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.DefaultTextRun">
            <summary>
            Reference to default text run settings for a chart part
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.DefaultTextBody">
            <summary>
            Reference to default text body run settings for a chart part
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.Modifier">
            <summary>
            Modifier for the chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.HasFill">
            <summary>
            True if the entry has fill styles
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.HasBorder">
            <summary>
            True if the entry has border styles
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.HasEffect">
            <summary>
            True if the entry effects styles
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.HasThreeD">
            <summary>
            True if the entry has 3D styles
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.HasTextBody">
            <summary>
            True if the entry has text body styles
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.HasTextRun">
            <summary>
            True if the entry has text run styles
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleFontReference">
            <summary>
            A reference to a theme font collection from the chart style manager
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleFontReference.Index">
            <summary>
            The index to the style matrix.
            This property referes to the theme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleFontReference.Color">
            <summary>
            The color of the font
            This will replace any the StyleClr node in the chart style xml.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleFontReference.HasColor">
            <summary>
            If the reference has a color
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleLibraryItem">
            <summary>
            Represents a chart style xml document in the style library
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleLibraryItem.Id">
            <summary>
            The id of the style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleLibraryItem.XmlString">
            <summary>
            The Xml as string
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleLibraryItem.XmlDocument">
            <summary>
            The style xml document
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager">
            <summary>
            Manages styles for a chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.StyleLibrary">
            <summary>
            A library where chart styles can be loaded for easier access.
            EPPlus loads most buildin styles into this collection.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.ColorsLibrary">
            <summary>
            A library where chart color styles can be loaded for easier access
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.CreateEmptyStyle(OfficeOpenXml.Drawing.Chart.eChartStyle)">
            <summary>
            Creates an empty style and color for chart, ready to be customized 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.LoadStyles">
            <summary>
            Loads the default chart style library from the internal resource library.
            Loads styles, colors and the default theme.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.LoadStyles(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Load all chart style library files (*.ecs) into memory from the supplied directory
            </summary>
            <param name="directory">Load all *.ecs files from the directory</param>
            <param name="clearLibrary">If true, clear the library before load.</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.LoadStyles(System.IO.FileInfo,System.Boolean)">
            <summary>
            Load a single chart style library file (*.ecs) into memory
            </summary>
            <param name="ecsFile">The file to load</param>
            <param name="clearLibrary">If true, clear the library before load.</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.LoadStyles(System.IO.Stream,System.Boolean)">
            <summary>
            Load a single chart style library stream into memory from the supplied directory
            </summary>
            <param name="stream">The stream to load</param>
            <param name="clearLibrary">If true, clear the library before load.</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.LoadStyleXml(System.Xml.XmlDocument,System.Xml.XmlDocument)">
            <summary>
            Loads a chart style xml file, and applies the style.
            </summary>
            <param name="styleXml">The chart style xml document</param>
            <param name="colorXml">The chart color xml document</param>
            <returns>The new Id of the Style loaded</returns>
            <remarks>
            This is the style.xml and colors.xml related to the chart.xml inside a package or chart template, 
            e.g \xl\charts\chart1.xml
                \xl\charts\style1.xml 
                \xl\charts\colors1.xml
            </remarks>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.LoadTemplateStyles(System.IO.FileInfo)">
            <summary>
            Loads a crtx file and applies it to the chart. Crtx files are exported from a Spreadsheet Application like Excel.
            Loading a template will only apply the styles to the chart, not change settings for the chart.
            Please use the <c>AddChartFromTemplate</c> method to add a chart from a template file.
            </summary>
            <param name="crtxFile">A crtx file</param>
            <seealso cref="M:OfficeOpenXml.Drawing.ExcelDrawings.AddChartFromTemplate(System.IO.FileInfo,System.String)"/>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.LoadTemplateStyles(System.IO.Stream)">
            <summary>
            Loads a crtx file and applies it to the chart. Crtx files are exported from a Spreadsheet Application like Excel.
            Loading a template will only apply the styles to the chart, not change settings for the chart, override themes etc.
            Please use the <c>AddChartFromTemplate</c> method to add a chart from a template file.
            </summary>
            <param name="crtxStream">A stream containing a crtx file</param>
            <seealso cref="M:OfficeOpenXml.Drawing.ExcelDrawings.AddChartFromTemplate(System.IO.Stream,System.String)"/>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.LoadStyleXml(System.Xml.XmlDocument,OfficeOpenXml.Drawing.Chart.eChartStyle,System.Xml.XmlDocument)">
            <summary>
            Loads a chart style xml file, and applies the style.
            </summary>
            <param name="fallBackStyle">The build in style to fall back on</param>
            <param name="styleXml">The chart style xml document</param>
            <param name="colorsXml">The chart colord xml document</param>
            <returns>The id of the Style loaded</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.LoadThemeOverrideXml(OfficeOpenXml.Packaging.ZipPackagePart)">
            <summary>
            Loads a theme override xml document for the chart.
            </summary>
            <param name="themePart">The theme part</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.SetChartStyle(OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle)">
            <summary>
            Applies a preset chart style loaded into the StyleLibrary to the chart.
            </summary>
            <param name="style">The style to use</param>
            <seealso cref="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.SetChartStyle(System.Int32,System.Nullable{System.Int32})"/>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.SetChartStyle(OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries)">
            <summary>
            Applies a preset chart style loaded into the StyleLibrary to the chart.
            </summary>
            <param name="style">The style to use</param>
            <seealso cref="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.SetChartStyle(System.Int32,System.Nullable{System.Int32})"/>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.SetChartStyle(OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle,OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors)">
            <summary>
            Applies a preset chart style loaded into the StyleLibrary to the chart. 
            This enums matches Excel's styles for single series for common scenarios. 
            Excel changes chart styles depending on many parameters, like number of series, axis type and more, so it will not always match the number in Excel.       
            To be certain of getting the correct style use the chart style number of the style you want to apply
            </summary>
            <param name="style">The preset style to use</param>
            <param name="colors">The preset color scheme to use</param>
            <seealso cref="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.SetChartStyle(System.Int32,System.Nullable{System.Int32})"/>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.SetChartStyle(OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries,OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors)">
            <summary>
            Applies a preset chart style loaded into the StyleLibrary to the chart.
            This enums matches Excel's styles for multiple series for common scenarios. 
            Excel changes chart styles depending on many parameters, like number of series, axis type and more, so it will not always match the number in Excel.       
            To be certain of getting the correct style use the chart style number of the style you want to apply.
            </summary>
            <param name="style">The preset style to use</param>
            <param name="colors">The preset color scheme to use</param>
            <seealso cref="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.SetChartStyle(System.Int32,System.Nullable{System.Int32})"/>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.SetChartStyle(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Applies a chart style loaded into the StyleLibrary to the chart.
            </summary>
            <param name="style">The chart style id to use</param>
            <param name="colors">The preset color scheme id to use. Null means </param>
            <seealso cref="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.SetChartStyle(OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle)"/>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.LoadColorXml(System.Xml.XmlDocument)">
            <summary>
            Load a color xml documents
            </summary>
            <param name="colorXml">The color xml</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.ApplyStyles">
            <summary>
            Apply the chart and color style to the chart.
            <seealso cref="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.Style"/>
            <seealso cref="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.ColorsManager"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.ApplyStylesEx">
            <summary>
            Apply the chart and color style to the chart.
            <seealso cref="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.Style"/>
            <seealso cref="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.ColorsManager"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.Style">
            <summary>
            A reference to style settings for the chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.ColorsManager">
            <summary>
            A reference to color style settings for the chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.ThemeOverride">
            <summary>
            If the chart has a different theme than the theme in the workbook, this property defines that theme.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.StyleXml">
            <summary>
            The chart style xml document
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.ColorsXml">
            <summary>
            The color xml document
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.ThemeOverrideXml">
            <summary>
            Overrides the current theme for the chart.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleMarkerLayout">
            <summary>
            A layout the marker of the chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleMarkerLayout.Style">
            <summary>
            The marker style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleMarkerLayout.Size">
            <summary>
            The size of the marker.
            Ranges from 2 to 72
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleReference">
            <summary>
            A reference from a chart style to the theme collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleReference.Index">
            <summary>
            The index to the theme style matrix.
            <seealso cref="P:OfficeOpenXml.ExcelWorkbook.ThemeManager"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleReference.Color">
            <summary>
            The color to be used for the reference. 
            This will replace any the StyleClr node in the chart style xml.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleReference.HasColor">
            <summary>
            If the reference has a color
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.eCheckState">
            <summary>
            The state of a check box form control
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eCheckState.Unchecked">
            <summary>
            The checkbox is unchecked
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eCheckState.Checked">
            <summary>
            The checkbox is checked
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eCheckState.Mixed">
            <summary>
            The checkbox is greyed out, neither checked or unchecked
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.eControlType">
            <summary>
            Type of form control
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eControlType.Button">
            <summary>
            A button
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eControlType.CheckBox">
            <summary>
            A check box
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eControlType.DropDown">
            <summary>
            A combo box
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eControlType.GroupBox">
            <summary>
            A group box
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eControlType.Label">
            <summary>
            A label
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eControlType.ListBox">
            <summary>
            A list box
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eControlType.RadioButton">
            <summary>
            A radio button (option button)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eControlType.ScrollBar">
            <summary>
            A scroll bar
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eControlType.SpinButton">
            <summary>
            A spin button
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eControlType.EditBox">
            <summary>
            An edit box. Unsupported. Editboxes can only be used in dialog sheets.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eControlType.Dialog">
            <summary>
            A dialog. Unsupported.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.eDropStyle">
            <summary>
            A style for a form control drop-down.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eDropStyle.Combo">
            <summary>
            A standard combo box
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eDropStyle.ComboEdit">
            <summary>
            An editable combo box
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eDropStyle.Simple">
            <summary>
            A standard combo box with only the drop-down button visible when the box is not expanded
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.eHorizontalAlignmentControl">
            <summary>
            Horizontal alignment for a form control. Unused in Excel 2010, so internal for now.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eHorizontalAlignmentControl.Left">
            <summary>
            Left alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eHorizontalAlignmentControl.Center">
            <summary>
            Center alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eHorizontalAlignmentControl.Right">
            <summary>
            Right alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eHorizontalAlignmentControl.Justify">
            <summary>
            Justify alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eHorizontalAlignmentControl.Distributed">
            <summary>
            Distributed alignment
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.eLayoutFlow">
            <summary>
            Text layout flow.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eLayoutFlow.Horizontal">
            <summary>
            Text is displayed horizontally.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eLayoutFlow.Vertical">
            <summary>
            Text is displayed vertically.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eLayoutFlow.HorizontalIdeographic">
            <summary>
            Ideographic text is displayed horizontally.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eLayoutFlow.VerticalIdeographic">
            <summary>
            Ideographic text is displayed vertically.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.eMeasurementUnits">
            <summary>
            Units of measurement
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eMeasurementUnits.Inches">
            <summary>
            Inches
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eMeasurementUnits.Centimeters">
            <summary>
            Centimeters
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eMeasurementUnits.Millimeters">
            <summary>
            Millimeters
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eMeasurementUnits.Points">
            <summary>
            Points
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eMeasurementUnits.Picas">
            <summary>
            Picas
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eMeasurementUnits.Pixels">
            <summary>
            Pixels
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eMeasurementUnits.EMUs">
            <summary>
            English metric unit
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.eReadingOrder">
            <summary>
            The reading order
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eReadingOrder.ContextDependent">
            <summary>
            Reading order is determined by the first non-whitespace character
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eReadingOrder.LeftToRight">
            <summary>
            Left to Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eReadingOrder.RightToLeft">
            <summary>
            Right to Left
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.eSelectionType">
            <summary>
            Selection type for a list control
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eSelectionType.Single">
            <summary>
            Single selection only.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eSelectionType.Multi">
            <summary>
            Multiple selection is allowed. 
            Clicking any item in the list will select or deselect that item.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eSelectionType.Extended">
            <summary>
            Multiple selection is allowed while ctrl is used. 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.eShapeOrientation">
            <summary>
            Text orientation in a shape
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eShapeOrientation.Auto">
            <summary>
            Auto orientation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eShapeOrientation.TopToBottom">
            <summary>
            Top To Bottom 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eShapeOrientation.BottomToTop">
            <summary>
            Bottom To Top
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.eVerticalAlignmentControl">
            <summary>
            Vertical Alignment for a form control
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eVerticalAlignmentControl.Top">
            <summary>
            Top alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eVerticalAlignmentControl.Center">
            <summary>
            Center alignmet
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eVerticalAlignmentControl.Bottom">
            <summary>
            Bottom alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eVerticalAlignmentControl.Justify">
            <summary>
            Justify alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eVerticalAlignmentControl.Distributed">
            <summary>
            Distributed alignment
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControl">
            <summary>
            An abstract class inherited by form controls
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.ControlPropertiesXml">
            <summary>
            The control property xml associated with the control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.ControlType">
            <summary>
            The type of form control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.Name">
            <summary>
            The name of the control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.AlternativeText">
            <summary>
            Gets or sets the alternative text for the control.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.Macro">
            <summary>
            Gets or sets the macro function assigned.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.Print">
            <summary>
            The object is printed when the document is printed.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.Locked">
            <summary>
            The object is locked when the sheet is protected..
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.AutoFill">
            <summary>
            If the controls fill formatting is provided automatically
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.AutoPict">
            <summary>
            If the controls size is formatted automatically.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.DefaultSize">
            <summary>
            Returns true if the object is at its default size.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.Disabled">
            <summary>
            If true, the object is allowed to run an attached macro
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.ThreeDEffects">
            <summary>
            If the control has 3D effects enabled.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.LinkedCell">
            <summary>
            Gets or sets the address to the cell that is linked to the control. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.FmlaTxbx">
            <summary>
            The source data cell that the control object's data is linked to.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.DrawingType">
            <summary>
            The type of drawing. Always set to <see cref="F:OfficeOpenXml.Drawing.eDrawingType.Control"/>
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlButton">
            <summary>
            Represents a button form control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlButton.ControlType">
            <summary>
            The type of form control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlButton.Margin">
            <summary>
            The buttons margin settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlButton.LayoutFlow">
            <summary>
            The buttons text layout flow
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlButton.Orientation">
            <summary>
            Text orientation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlButton.ReadingOrder">
            <summary>
            The reading order for the text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlButton.AutomaticSize">
            <summary>
            If size is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlButton.TextAnchor">
            <summary>
            Text Anchoring for the text body
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlButton.TextAlignment">
            <summary>
            How the text is aligned
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlCheckBox">
            <summary>
            Represents a check box form control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlCheckBox.ControlType">
            <summary>
            The type of form control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlCheckBox.Checked">
            <summary>
            Gets or sets the state of a check box 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlDialog">
            <summary>
            Represents a dialog form control. Unsupported
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlDialog.ControlType">
            <summary>
            The type of form control
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlDropDown">
            <summary>
            Represents a drop down form control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlDropDown.ControlType">
            <summary>
            The type of form control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlDropDown.Colored">
            <summary>
            Gets or sets whether a drop-down object has a color applied to it
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlDropDown.DropLines">
            <summary>
            Gets or sets the number of lines before a scroll bar is added to the drop-down.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlDropDown.DropStyle">
            <summary>
            The style of the drop-down.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlDropDown.MinimumWidth">
            <summary>
            Minimum width 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlEditBox">
            <summary>
            Represents an edit box form control. Unsupported.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlEditBox.ControlType">
            <summary>
            The type of form control
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlGroupBox">
            <summary>
            Represents a group box form control. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlGroupBox.ControlType">
            <summary>
            The type of form control
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlLabel">
            <summary>
            Represents a label form control.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlLabel.ControlType">
            <summary>
            The type of form control
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlList">
            <summary>
            An abstract class used by form control list objects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlList.InputRange">
            <summary>
            The range to the items populating the list.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlList.SelectedIndex">
            <summary>
            The index of a selected item in the list. 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlListBox">
            <summary>
            Represents a list box form control.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlListBox.ControlType">
            <summary>
            The type of form control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlListBox.SelectionType">
            <summary>
            The type of selection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlListBox.MultiSelection">
            <summary>
            If <see cref="P:OfficeOpenXml.Drawing.Controls.ExcelControlListBox.SelectionType"/> is Multi or Extended this array contains the selected indicies. Index is zero based. 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlMargin">
            <summary>
            Margin setting for a vml drawing
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Controls.ExcelControlMargin.SetValue(System.Double,OfficeOpenXml.Drawing.Controls.eMeasurementUnits)">
            <summary>
            Sets the margin value and unit of measurement for all margins.
            </summary>
            <param name="marginValue">Margin value to set for all margins</param>
            <param name="unit">The unit to set for all margins. Default <see cref="F:OfficeOpenXml.Drawing.Controls.eMeasurementUnits.Points" /></param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Controls.ExcelControlMargin.SetUnit(OfficeOpenXml.Drawing.Controls.eMeasurementUnits)">
            <summary>
            Sets the margin unit of measurement for all margins.
            </summary>
            <param name="unit">The unit to set for all margins.</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlMargin.Automatic">
            <summary>
            Margin is autiomatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlMargin.LeftMargin">
            <summary>
            Left Margin
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlMargin.RightMargin">
            <summary>
            Right Margin
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlMargin.TopMargin">
            <summary>
            Top Margin
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlMargin.BottomMargin">
            <summary>
            Bottom margin
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlRadioButton">
            <summary>
            Represents a radio button form control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlRadioButton.ControlType">
            <summary>
            The type of form control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlRadioButton.Checked">
            <summary>
            Gets or sets the state of the radio box.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlRadioButton.LinkedCell">
            <summary>
            Gets or sets the address to the cell that is linked to the control. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlRadioButton.FirstButton">
            <summary>
            Gets or sets if the radio button is the first button in a set of radio buttons
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlScrollBar">
            <summary>
            Represents a scroll bar form control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlScrollBar.ControlType">
            <summary>
            The type of form control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlScrollBar.Horizontal">
            <summary>
            Gets or sets if scroll bar is horizontal or vertical
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlScrollBar.Increment">
            <summary>
            How much the scroll bar is incremented for each click
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlScrollBar.Page">
            <summary>
            The number of items to move the scroll bar on a page click. Null is default
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlScrollBar.MinValue">
            <summary>
            The value when a scroll bar is at it's minimum
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlScrollBar.MaxValue">
            <summary>
            The value when a scroll bar is at it's maximum
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlScrollBar.Value">
            <summary>
            The value of the scroll bar.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlSpinButton">
            <summary>
            Represents a spin button form control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlSpinButton.ControlType">
            <summary>
            The type of form control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlSpinButton.Increment">
            <summary>
            How much the spin button is incremented for each click
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlSpinButton.MinValue">
            <summary>
            The value when a spin button is at it's minimum
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlSpinButton.MaxValue">
            <summary>
            The value when a spin button is at it's maximum
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlSpinButton.Value">
            <summary>
            The value when a spin button is at it's maximum
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlWithColorsAndLines">
            <summary>
            An abstract class used by form controls with color and line settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlWithColorsAndLines.Fill">
            <summary>
            Fill settings for the control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlWithColorsAndLines.Border">
            <summary>
            Border settings for the control
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlWithText">
            <summary>
            An abstract class used for formcontrols with text properties.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlWithText.Text">
            <summary>
            Text inside the shape
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlWithText.RichText">
            <summary>
            Richtext collection. Used to format specific parts of the text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlWithText.LockedText">
            <summary>
            Gets or sets whether a controls text is locked when the worksheet is protected.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlWithText.TextBody">
            <summary>
            Access to text body properties.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eBevelPresetType">
            <summary>
            A preset bevel that can be applied to a shape.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBevelPresetType.None">
            <summary>
            No Bevel
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBevelPresetType.Angle">
            <summary>
            Angle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBevelPresetType.ArtDeco">
            <summary>
            Round Convex
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBevelPresetType.Circle">
            <summary>
            Round
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBevelPresetType.Convex">
            <summary>
            Convex
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBevelPresetType.CoolSlant">
            <summary>
            Cool slant
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBevelPresetType.Cross">
            <summary>
            Cross
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBevelPresetType.Divot">
            <summary>
            Divot
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBevelPresetType.HardEdge">
            <summary>
            Hard Edge
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBevelPresetType.RelaxedInset">
            <summary>
            Relaxed Inset
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBevelPresetType.Riblet">
            <summary>
            Riblet
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBevelPresetType.Slope">
            <summary>
            Slope
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBevelPresetType.SoftRound">
            <summary>
            Soft Round
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eBlendMode">
            <summary>
            How to render effects one on top of another
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBlendMode.Over">
            <summary>
            Overlay
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBlendMode.Mult">
            <summary>
            Multiply
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBlendMode.Screen">
            <summary>
            Screen
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBlendMode.Darken">
            <summary>
            Darken
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBlendMode.Lighten">
            <summary>
            Lighten
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eCompundLineStyle">
            <summary>
            The compound line type. Used for underlining text
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eCompundLineStyle.Double">
            <summary>
            Double lines with equal width
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eCompundLineStyle.Single">
            <summary>
            Single line normal width
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eCompundLineStyle.DoubleThickThin">
            <summary>
            Double lines, one thick, one thin
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eCompundLineStyle.DoubleThinThick">
            <summary>
            Double lines, one thin, one thick
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eCompundLineStyle.TripleThinThickThin">
            <summary>
            Three lines, thin, thick, thin
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eDrawingColorType">
            <summary>
            The color type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingColorType.None">
            <summary>
            Not specified
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingColorType.RgbPercentage">
            <summary>
            RGB specified in percentage
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingColorType.Rgb">
            <summary>
            Red Green Blue
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingColorType.Hsl">
            <summary>
            Hue, Saturation, Luminance
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingColorType.System">
            <summary>
            A system color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingColorType.Scheme">
            <summary>
            A color bound to a user's theme
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingColorType.Preset">
            <summary>
            A preset Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingColorType.ChartStyleColor">
            <summary>
            A Color refering to a charts color style
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eDrawingType">
            <summary>
            The type of drawing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingType.Drawing">
            <summary>
            A unspecified drawing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingType.Shape">
            <summary>
            A Shape drawing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingType.Picture">
            <summary>
            A Picture drawing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingType.Chart">
            <summary>
            A Chart drawing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingType.Slicer">
            <summary>
            A slicer drawing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingType.Control">
            <summary>
            A form control drawing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingType.GroupShape">
            <summary>
            A drawing grouping other drawings together.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eEditAs">
            <summary>
            How the drawing will be resized.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eEditAs.Absolute">
            <summary>
            The Drawing is positioned absolute to the top left corner of the worksheet and is NOT resized when rows and columns are resized. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eEditAs.OneCell">
            <summary>
            The Drawing will move with the worksheet but is NOT resized when rows and columns are resized. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eEditAs.TwoCell">
            <summary>
            The Drawing will move and resize when rows and columns are resized. 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eEndSize">
            <summary>
            Lend end size
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eEndSize.Small">
            <summary>
            Small
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eEndSize.Medium">
            <summary>
            Medium
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eEndSize.Large">
            <summary>
            Large
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eEndStyle">
            <summary>
            Line end style.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eEndStyle.None">
            <summary>
            No end
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eEndStyle.Triangle">
            <summary>
            Triangle arrow head
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eEndStyle.Stealth">
            <summary>
            Stealth arrow head
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eEndStyle.Diamond">
            <summary>
            Diamond
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eEndStyle.Oval">
            <summary>
            Oval
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eEndStyle.Arrow">
            <summary>
            Line arrow head
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eErrorBarDirection">
            <summary>
            The possible directions for error bars
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eErrorBarDirection.X">
            <summary>
            Error bars will be shown in the x direction
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eErrorBarDirection.Y">
            <summary>
            Error bars will be shown in the y direction
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eErrorBarType">
            <summary>
            The possible ways to draw an error bar
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eErrorBarType.Both">
            <summary>
            The error bars will be shown in both the positive and negative directions.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eErrorBarType.Minus">
            <summary>
            The error bars will be shown in the negative direction only.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eErrorBarType.Plus">
            <summary>
            The error bars will be shown in the positive direction only
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eErrorValueType">
            <summary>
            The ways to determine the length of the error bars
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eErrorValueType.Custom">
            <summary>
            The length of the error bars will be determined by the Plus and Minus properties.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eErrorValueType.FixedValue">
            <summary>
            The length of the error bars will be the fixed value determined by Error Bar Value property.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eErrorValueType.Percentage">
            <summary>
            The length of the error bars will be Error Bar Value percent of the data.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eErrorValueType.StandardDeviation">
            <summary>
            The length of the error bars will be Error Bar Value standard deviations of the data.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eErrorValueType.StandardError">
            <summary>
            The length of the error bars will be Error Bar Value standard errors of the data.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eFillPatternStyle">
            <summary>
            Pattern styles for drawing fills
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Pct5">
            <summary>
            5 Percent
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Pct10">
            <summary>
            10 Percent
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Pct20">
            <summary>
            20 Percent
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Pct25">
            <summary>
            25 Percent
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Pct30">
            <summary>
            30 Percent
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Pct40">
            <summary>
            40 Percent
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Pct50">
            <summary>
            50 Percent
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Pct60">
            <summary>
            60 Percent
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Pct70">
            <summary>
            70 Percent
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Pct75">
            <summary>
            75 Percent
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Pct80">
            <summary>
            80 Percent
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Pct90">
            <summary>
            90 Percent
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Horz">
            <summary>
            Horizontal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Vert">
            <summary>
            Vertical
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.LtHorz">
            <summary>
            Light Horizontal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.LtVert">
            <summary>
            Light Vertical
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.DkHorz">
            <summary>
            Dark Horizontal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.DkVert">
            <summary>
            Dark Vertical
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.NarHorz">
            <summary>
            Narrow Horizontal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.NarVert">
            <summary>
            Narrow Vertical
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.DashHorz">
            <summary>
            Dashed Horizontal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.DashVert">
            <summary>
            Dashed Vertical
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Cross">
            <summary>
            Cross
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.DnDiag">
            <summary>
            Downward Diagonal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.UpDiag">
            <summary>
            Upward Diagonal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.LtDnDiag">
            <summary>
            Light Downward Diagonal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.LtUpDiag">
            <summary>
            Light Upward Diagonal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.DkDnDiag">
            <summary>
            Dark Downward Diagonal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.DkUpDiag">
            <summary>
            Dark Upward Diagonal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.WdDnDiag">
            <summary>
            Wide Downward Diagonal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.WdUpDiag">
            <summary>
            Wide Upward Diagonal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.DashDnDiag">
            <summary>
            Dashed Downward Diagonal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.DashUpDiag">
            <summary>
            Dashed Upward DIagonal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.DiagCross">
            <summary>
            Diagonal Cross
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.SmCheck">
            <summary>
            Small Checker Board
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.LgCheck">
            <summary>
            Large Checker Board
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.SmGrid">
            <summary>
            Small Grid
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.LgGrid">
            <summary>
            Large Grid
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.DotGrid">
            <summary>
            Dotted Grid
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.SmConfetti">
            <summary>
            Small Confetti
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.LgConfetti">
            <summary>
            Large Confetti
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.HorzBrick">
            <summary>
            Horizontal Brick
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.DiagBrick">
            <summary>
            Diagonal Brick
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.SolidDmnd">
            <summary>
            Solid Diamond
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.OpenDmnd">
            <summary>
            Open Diamond
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.DotDmnd">
            <summary>
            Dotted Diamond
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Plaid">
            <summary>
            Plaid
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Sphere">
            <summary>
            Sphere
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Weave">
            <summary>
            Weave
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Divot">
            <summary>
            Divot
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Shingle">
            <summary>
            Shingle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Wave">
            <summary>
            Wave
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Trellis">
            <summary>
            Trellis
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.ZigZag">
            <summary>
            Zig Zag
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eFillStyle">
            <summary>
            The Fillstyle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillStyle.NoFill">
            <summary>
            No fill
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillStyle.SolidFill">
            <summary>
            A solid fill
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillStyle.GradientFill">
            <summary>
            A smooth gradual transition from one color to the next
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillStyle.PatternFill">
            <summary>
            A preset pattern  fill
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillStyle.BlipFill">
            <summary>
            Picturefill
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillStyle.GroupFill">
            <summary>
            Inherited fill from the parent in the group.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eFontType">
            <summary>
            Type of font
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFontType.Latin">
            <summary>
            A latin font
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFontType.EastAsian">
            <summary>
            An East Asian font
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFontType.Complex">
            <summary>
            An complex font
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFontType.Symbol">
            <summary>
            A symbol font
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eLightRigDirection">
            <summary>
            The direction from which the light rig is oriented in relation to the scene.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLightRigDirection.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLightRigDirection.BottomLeft">
            <summary>
            Bottom Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLightRigDirection.BottomRight">
            <summary>
            Bottom Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLightRigDirection.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLightRigDirection.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLightRigDirection.Top">
            <summary>
            Top
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLightRigDirection.TopLeft">
            <summary>
            Top Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLightRigDirection.TopRight">
            <summary>
            Top Right
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eLineCap">
            <summary>
            The Type of Line cap
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineCap.Flat">
            <summary>
            A flat line cap
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineCap.Round">
            <summary>
            A round line cap
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineCap.Square">
            <summary>
            A Square line cap
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eLineJoin">
            <summary>
            The shape that lines joined together have
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineJoin.Bevel">
            <summary>
            A bevel join
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineJoin.Round">
            <summary>
            A round join
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineJoin.Miter">
            <summary>
            A Mitered join
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eLineStyle">
            <summary>
            Preset line dash
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineStyle.Dash">
            <summary>
            Dash 1111000
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineStyle.DashDot">
            <summary>
            Dash Dot
            11110001000
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineStyle.Dot">
            <summary>
            Dot 1000
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineStyle.LongDash">
             <summary>
             Large Dash 
            11111111000
             </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineStyle.LongDashDot">
            <summary>
             Large Dash Dot 
             111111110001000
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineStyle.LongDashDotDot">
            <summary>
            Large Dash Dot Dot
            1111111100010001000
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineStyle.Solid">
            <summary>
            Solid 
            1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineStyle.SystemDash">
            <summary>
            System Dash
            1110
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineStyle.SystemDashDot">
            <summary>
            System Dash Dot
            111010
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineStyle.SystemDashDotDot">
            <summary>
            System Dash Dot Dot
            11101010
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineStyle.SystemDot">
            <summary>
            System Dot 
            10
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.eLineStyleVml">
            <summary>
            Linestyle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eLineStyleVml.Solid">
            <summary>
            Solid
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eLineStyleVml.Round">
            <summary>
            Round
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eLineStyleVml.Square">
            <summary>
            Square
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eLineStyleVml.Dash">
            <summary>
            Dash
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eLineStyleVml.DashDot">
            <summary>
            Dash dot
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eLineStyleVml.LongDash">
            <summary>
            Long dash
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eLineStyleVml.LongDashDot">
            <summary>
            Long dash dot
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eLineStyleVml.LongDashDotDot">
            <summary>
            Long dash dot dot
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.eTextAlignHorizontalVml">
            <summary>
            Horizontal Alingment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eTextAlignHorizontalVml.Left">
            <summary>
            Left alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eTextAlignHorizontalVml.Center">
            <summary>
            Center alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eTextAlignHorizontalVml.Right">
            <summary>
            Right alignment
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.eTextAlignVerticalVml">
            <summary>
            Vertical Alingment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eTextAlignVerticalVml.Top">
            <summary>
            Top alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eTextAlignVerticalVml.Center">
            <summary>
            Center alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eTextAlignVerticalVml.Bottom">
            <summary>
            Bottom alignment
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.eVmlAspectRatio">
            <summary>
            Aspect ratio handling for a picture in a fill
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlAspectRatio.Ignore">
            <summary>
            Ignore aspect issues. Default.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlAspectRatio.AtLeast">
            <summary>
            Image is at least as big as Size.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlAspectRatio.AtMost">
            <summary>
            Image is no bigger than Size.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.eVmlFillType">
            <summary>
            Type of fill style for a vml drawing.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlFillType.NoFill">
            <summary>
            No fill is applied.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlFillType.Solid">
            <summary>
            The fill pattern is solid.Default
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlFillType.Gradient">
            <summary>
            The fill colors blend together in a linear gradient from bottom to top.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlFillType.GradientRadial">
            <summary>
             The fill colors blend together in a radial gradient.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlFillType.Tile">
            <summary>
             The fill image is tiled.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlFillType.Pattern">
            <summary>
            The image is used to create a pattern using the fill colors.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlFillType.Frame">
            <summary>
            The image is stretched to fill the shape.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.eVmlGradientMethod">
            <summary>
            The fill method used in a gradient fill
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlGradientMethod.None">
            <summary>
            No sigma fill.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlGradientMethod.Linear">
            <summary>
            Linear fill.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlGradientMethod.LinearSigma">
            <summary>
            Linear sigma fill.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlGradientMethod.Sigma">
            <summary>
            Sigma fill. Default.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlGradientMethod.Any">
            <summary>
            Any sigma fill.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingBase">
            <summary>
            Drawing object used for comments
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingBase.Id">
            <summary>
            The Id of the vml drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingBase.SpId">
            <summary>
            The Id of the shape drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingBase.AlternativeText">
            <summary>
            Alternative text to be displayed instead of a graphic.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingBase.Anchor">
            <summary>
            Anchor coordinates for the drawing
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingBase.GetStyle(System.String,System.String,System.String@)">
            <summary>
            Gets a style from the semi-colo separated list with the specifik key
            </summary>
            <param name="style">The list</param>
            <param name="key">The key to search for</param>
            <param name="value">The value to return</param>
            <returns>True if found</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingBase.SetStyle(System.String,System.String,System.String)">
            <summary>
            Sets the style in a semicolon separated list
            </summary>
            <param name="style">The list</param>
            <param name="key">The key</param>
            <param name="value">The value</param>
            <returns>The new list</returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingBaseCollection">
            <summary>
            Base collection for VML drawings
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingBorder">
            <summary>
            Border line settings for a vml drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingBorder.LineStyle">
            <summary>
            The style of the border
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingBorder.DashStyle">
            <summary>
            Dash style for the border 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingBorder.CustomDashStyle">
            <summary>
            Custom dash style.
            A series on numbers representing the width followed by the space between.        
            Example 1 : 8 2 1 2 1 2 --> Long dash dot dot. Space is twice the line width (2). LongDash (8) Dot (1). 
            Example 2 : 0 2 --> 0 implies a circular dot. 2 is the space between.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingBorder.Width">
            <summary>
            The width of the border
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingCollection.GetNewId">
            <summary>
            returns the next drawing id.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingColor">
            <summary>
            Represents a color in a vml.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingColor.ColorString">
            <summary>
            A color string representing a color. Uses the HTML 4.0 color names, rgb decimal triplets or rgb hex triplets
            Example: 
            ColorString = "rgb(200,100, 0)"
            ColorString = "#FF0000"
            ColorString = "Red"
            ColorString = "#345" //This is the same as #334455
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingColor.SetColor(System.Drawing.Color)">
            <summary>
            Sets the Color string with the color supplied.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingColor.GetColor">
            <summary>
            Gets the color for the color string
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment">
            <summary>
            Drawing object used for comments
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.Address">
            <summary>
            Address in the worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.VerticalAlignment">
            <summary>
            Vertical alignment for text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.HorizontalAlignment">
            <summary>
            Horizontal alignment for text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.Visible">
            <summary>
            If the drawing object is visible.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.BackgroundColor">
            <summary>
            Background color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.LineStyle">
            <summary>
            Linestyle for border
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.LineColor">
            <summary>
            Line color 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.LineWidth">
            <summary>
            Width of the border
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.AutoFit">
            <summary>
            Autofits the drawingobject 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.Locked">
            <summary>
            If the object is locked when the sheet is protected
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.LockText">
            <summary>
            Specifies that the object's text is locked
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.From">
            <summary>
            From position. For comments only when Visible=true.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.To">
            <summary>
            To position. For comments only when Visible=true.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.Row">
            <summary>
            Row position for a comment
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.Column">
            <summary>
            Column position for a comment
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.Fill">
            <summary>
            Fill properties for the comment
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingControl">
            <summary>
            Base class for vml form controls
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingControl.Text">
            <summary>
            The Text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingControl.Dx">
            <summary>
            Item height for an individual item
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingControl.Page">
            <summary>
            Number of items in a listbox.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill">
            <summary>
            Fill settings for a vml drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.Style">
            <summary>
            The type of fill used in the vml drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.Color">
            <summary>
            The primary color used for filling the drawing.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.Opacity">
            <summary>
            Opacity for fill color 1. Spans 0-100%. 
            Transparency is is 100-Opacity
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.SecondColor">
            <summary>
            Fill color 2. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.SecondColorOpacity">
            <summary>
            Opacity for fill color 2. Spans 0-100%
            Transparency is is 100-Opacity
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.GradientSettings">
            <summary>
            Gradient specific settings used when <see cref="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.Style"/> is set to Gradient or GradientRadial.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.PatternPictureSettings">
            <summary>
            Image and pattern specific settings used when <see cref="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.Style"/> is set to Pattern, Tile or Frame.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.Recolor">
            <summary>
            Recolor with picture
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.Rotate">
            <summary>
            Rotate fill with shape
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingGradientFill">
            <summary>
            Fill settings for a vml gradient fill
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingGradientFill.ColorsString">
            <summary>
            A semicolon separated list of colors used for gradient fill. 
            Each color item starts with a percent and a color. Starting from 0% and ending and 100%.
            Use <seealso cref="M:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingGradientFill.SetGradientColors(OfficeOpenXml.Drawing.Vml.VmlGradiantColor[])"/>  to set this property.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingGradientFill.SetGradientColors(OfficeOpenXml.Drawing.Vml.VmlGradiantColor[])">
            <summary>
            Sets the <see cref="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingGradientFill.ColorsString"/> with the colors supplied and optionally 
            <see cref="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.Color"/> and <see cref="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.SecondColor"/>.
            Each color item starts with a percent and a color. 
            Percent values must be sorted, starting from 0% and ending and 100%.
            If 0% is omitted, <see cref="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.Color"/> is used.
            If 100% is omitted, <see cref="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.SecondColor"/> is used.
            </summary>
            <param name="colors">The colors with a percent value for the gradient fill</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingGradientFill.Angle">
            <summary>
            Gradient angle
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingGradientFill.Focus">
            <summary>
            Gradient center
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingGradientFill.Method">
            <summary>
            Gradient method
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPicture">
            <summary>
            Drawing object used for header and footer pictures
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPicture.Position">
            <summary>
            Position ID
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPicture.Width">
            <summary>
            The width in points
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPicture.Height">
            <summary>
            The height in points
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPicture.Left">
            <summary>
            Margin Left in points
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPicture.Top">
            <summary>
            Margin top in points
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPicture.Title">
            <summary>
            The Title of the image
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPicture.Image">
            <summary>
            The Image
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPicture.BiLevel">
            <summary>
            Determines whether an image will be displayed in black and white
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPicture.GrayScale">
            <summary>
            Determines whether a picture will be displayed in grayscale mode
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPicture.Gain">
            <summary>
            Defines the intensity of all colors in an image
            Default value is 1
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPicture.Gamma">
            <summary>
            Defines the amount of contrast for an image
            Default value is 0;
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPicture.BlackLevel">
            <summary>
            Defines the intensity of black in an image
            Default value is 0
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPictureCollection">
            <summary>
            A collection of vml drawings used for header and footer picturess
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPictureCollection.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="Index">Index</param>
            <returns>The VML Drawing Picture object</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPictureCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPictureCollection.GetNewId">
            <summary>
            returns the next drawing id.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPictureFill">
            <summary>
            Fill settings for a vml pattern or picture fill
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPictureFill.SecondColor">
            <summary>
            Fill color 2. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPictureFill.SecondColorOpacity">
            <summary>
            Opacity for fill color 2. Spans 0-100%
            Transparency is is 100-Opacity
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPictureFill.AspectRatio">
            <summary>
            The aspect ratio 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPictureFill.Size">
            <summary>
            A string representing the pictures Size. 
            For Example: 0,0
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPictureFill.Origin">
            <summary>
            A string representing the pictures Origin
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPictureFill.Position">
            <summary>
            A string representing the pictures position
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPictureFill.Title">
            <summary>
            The title for the fill
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPictureFill.Image">
            <summary>
            The image is used when <see cref="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.Style"/> is set to  Pattern, Tile or Frame.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPosition">
            <summary>
            The position of a VML drawing. Used for comments
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPosition.Row">
            <summary>
            Row. Zero based
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPosition.RowOffset">
            <summary>
            Row offset in pixels. Zero based
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPosition.Column">
            <summary>
            Column. Zero based
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPosition.ColumnOffset">
            <summary>
            Column offset. Zero based
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.ExcelVmlMeasurementUnit">
            <summary>
            Handles values with different measurement units. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlMeasurementUnit.Value">
            <summary>
            The value of the specified unit.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlMeasurementUnit.Unit">
            <summary>
            The unit of measurement.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.VmlGradiantColor">
            <summary>
            A color used in a vml gradient list
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Vml.VmlGradiantColor.#ctor(System.Double,System.Drawing.Color)">
            <summary>
            Initialize a new in instance of <see cref="T:OfficeOpenXml.Drawing.Vml.VmlGradiantColor"/>
            </summary>
            <param name="percent"></param>
            <param name="color"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the percent is not between 0 and 100</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="color"/> is Color.Empty</exception>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.VmlGradiantColor.Percent">
            <summary>
            Percent position to insert the color. Range from 0-100
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.VmlGradiantColor.Color">
            <summary>
            The color to use.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ePenAlignment">
            <summary>
            The pen alignment type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePenAlignment.Center">
            <summary>
             Center pen
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePenAlignment.Inset">
            <summary>
            Inset pen 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ePitchFamily">
            <summary>
            Specifies the font pitch
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePitchFamily.Default">
            <summary>
            Default pitch + unknown font family
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePitchFamily.Fixed">
            <summary>
            Fixed pitch + unknown font family
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePitchFamily.Variable">
            <summary>
            Variable pitch + unknown font family
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePitchFamily.DefaultRoman">
            <summary>
            Default pitch + Roman font family
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePitchFamily.FixedRoman">
            <summary>
            Fixed pitch + Roman font family
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePitchFamily.VariableRoman">
            <summary>
            Variable pitch + Roman font family
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePitchFamily.DefaultSwiss">
            <summary>
            Default pitch + Swiss font family
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePitchFamily.FixedSwiss">
            <summary>
            Fixed pitch + Swiss font family
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePitchFamily.VariableSwiss">
            <summary>
            Variable pitch + Swiss font family
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ePresetCameraType">
            <summary>
            Defines the preset camera that is being used.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.None">
            <summary>
            No rotation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricBottomDown">
            <summary>
            Isometric Bottom Down
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricBottomUp">
            <summary>
            Isometric Bottom Up
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricLeftDown">
            <summary>
            Isometric Left Down
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricLeftUp">
            <summary>
            Isometric Left Up
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricOffAxis1Left">
            <summary>
            Isometric Off Axis 1 Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricOffAxis1Right">
            <summary>
            Isometric Off Axis 1 Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricOffAxis1Top">
            <summary>
            Isometric Off Axis 1 Top
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricOffAxis2Left">
            <summary>
            Isometric Off Axis 2 Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricOffAxis2Right">
            <summary>
            Isometric Off Axis 2 Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricOffAxis2Top">
            <summary>
            Isometric Off Axis 2 Top
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricOffAxis3Bottom">
            <summary>
            Isometric Off Axis 3 Bottom
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricOffAxis3Left">
            <summary>
            Isometric Off Axis 3 Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricOffAxis3Right">
            <summary>
            Isometric Off Axis 3 Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricOffAxis4Bottom">
            <summary>
            Isometric Off Axis 4 Bottom
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricOffAxis4Left">
            <summary>
            Isometric Off Axis 4 Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricOffAxis4Right">
            <summary>
            Isometric Off Axis 4 Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricRightDown">
            <summary>
            Isometric Right Down
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricRightUp">
            <summary>
            Isometric Right Up
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricTopDown">
            <summary>
            Isometric Top Down
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricTopUp">
            <summary>
            Isometric Top Up
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyObliqueBottom">
            <summary>
            Legacy Oblique Bottom
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyObliqueBottomLeft">
            <summary>
            Legacy Oblique Bottom Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyObliqueBottomRight">
            <summary>
            Legacy Oblique Bottom Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyObliqueFront">
            <summary>
            Legacy Oblique Front
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyObliqueLeft">
            <summary>
            
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyObliqueRight">
            <summary>
            Legacy Oblique Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyObliqueTop">
            <summary>
            Legacy Oblique Top
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyObliqueTopLeft">
            <summary>
            Legacy Oblique Top Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyObliqueTopRight">
            <summary>
            Legacy Oblique Top Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyPerspectiveBottom">
            <summary>
            Legacy Perspective Bottom
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyPerspectiveBottomLeft">
            <summary>
            Legacy Perspective Bottom Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyPerspectiveBottomRight">
            <summary>
            Legacy Perspective Bottom Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyPerspectiveFront">
            <summary>
            Legacy Perspective Front
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyPerspectiveLeft">
            <summary>
            Legacy Perspective Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyPerspectiveRight">
            <summary>
            Legacy Perspective Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyPerspectiveTop">
            <summary>
            Legacy Perspective Top
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyPerspectiveTopLeft">
            <summary>
            Legacy Perspective Top Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyPerspectiveTopRight">
            <summary>
            Legacy Perspective Top Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.ObliqueBottom">
            <summary>
            Oblique Bottom
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.ObliqueBottomLeft">
            <summary>
            Oblique Bottom Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.ObliqueBottomRight">
            <summary>
            Oblique Bottom Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.ObliqueLeft">
            <summary>
            Oblique Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.ObliqueRight">
            <summary>
            Oblique Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.ObliqueTop">
            <summary>
            Oblique Top
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.ObliqueTopLeft">
            <summary>
            Oblique Top Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.ObliqueTopRight">
            <summary>
            Oblique Top Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.OrthographicFront">
            <summary>
            Orthographic Front
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveAbove">
            <summary>
            Orthographic Above
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveAboveLeftFacing">
            <summary>
            Perspective Above Left Facing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveAboveRightFacing">
            <summary>
            Perspective Above Right Facing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveBelow">
            <summary>
            Perspective Below
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveContrastingLeftFacing">
            <summary>
            Perspective Contrasting Left Facing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveContrastingRightFacing">
            <summary>
            Perspective Contrasting Right Facing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveFront">
            <summary>
            Perspective Front
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveHeroicExtremeLeftFacing">
            <summary>
            Perspective Heroic Extreme Left Facing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveHeroicExtremeRightFacing">
            <summary>
            Perspective Heroic Extreme Right Facing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveHeroicLeftFacing">
            <summary>
            Perspective Heroic Left Facing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveHeroicRightFacing">
            <summary>
            Perspective Right Facing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveLeft">
            <summary>
            Perspective Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveRelaxed">
            <summary>
            Perspective Relaxed
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveRelaxedModerately">
            <summary>
            Perspective Relaxed Moderately
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveRight">
            <summary>
            Perspective Right
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ePresetColor">
            <summary>
            Preset colors
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.AliceBlue">
            <summary>
            Alice Blue, RGB(240,248,255)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.AntiqueWhite">
            <summary>
            Antique White, RGB(250,235,215)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Aqua">
            <summary>
            Aqua, RGB(0,255,255)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Aquamarine">
            <summary>
            Aquamarine, RGB(127,255,212)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Azure">
            <summary>
            Azure, RGB(240,255,255)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Beige">
            <summary>
            Beige, RGB(245,245,220)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Bisque">
            <summary>
            Bisque, RGB(255,228,196)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Black">
            <summary>
            Black, RGB(0,0,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.BlanchedAlmond">
            <summary>
            Blanched Almond, RGB(255,235,205)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Blue">
            <summary>
            Blue, RGB(0,0,255)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.BlueViolet">
            <summary>
            Blue Violet, RGB(138,43,226)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Brown">
            <summary>
            Brown, RGB(165,42,42)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.BurlyWood">
            <summary>
            Burly Wood, RGB(222,184,135)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.CadetBlue">
            <summary>
            Cadet Blue, RGB(95,158,160)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Chartreuse">
            <summary>
            Chartreuse, RGB(127,255,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Chocolate">
            <summary>
            Chocolate, RGB(210,105,30)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Coral">
            <summary>
            Coral, RGB(255,127,80)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.CornflowerBlue">
            <summary>
            Cornflower Blue, RGB(100,149,237)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Cornsilk">
            <summary>
            Cornsilk, RGB(255,248,220)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Crimson">
            <summary>
            Crimson, RGB(220,20,60)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Cyan">
            <summary>
            Cyan, RGB(0,255,255)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkBlue">
            <summary>
            Dark Blue, RGB(0,0,139)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkCyan">
            <summary>
            Dark Cyan, RGB(0,139,139)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkGoldenrod">
            <summary>
            Dark Goldenrod, RGB(184,134,11)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkGray">
            <summary>
            Dark Gray, RGB(169,169,169)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkGreen">
            <summary>
            Dark Green, RGB(0,100,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkKhaki">
            <summary>
            Dark Khaki, RGB(189,183,107)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkMagenta">
            <summary>
            Dark Magenta, RGB(139,0,139)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkOliveGreen">
            <summary>
            Dark Olive Green, RGB(85,107,47)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkOrange">
            <summary>
            Dark Orange, RGB(255,140,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkOrchid">
            <summary>
            Dark Orchid, RGB(153,50,204)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkRed">
            <summary>
            Dark Red, RGB(139,0,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkSalmon">
            <summary>
            Dark Salmon, RGB(233,150,122)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkSeaGreen">
            <summary>
            Dark Sea Green, RGB(143,188,143)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkSlateBlue">
            <summary>
            Dark Slate Blue, RGB(72,61,139)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkSlateGray">
            <summary>
            Dark Slate Gray, RGB(47,79,79)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkTurquoise">
            <summary>
            Dark Turquoise, RGB(0,206,209)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkViolet">
            <summary>
            Dark Violet, RGB(148,0,211)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DeepPink">
            <summary>
            Deep Pink, RGB(255,20,147)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DeepSkyBlue">
            <summary>
            Deep Sky Blue, RGB(0,191,255)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DimGray">
            <summary>
            Dim Gray, RGB(105,105,105)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DodgerBlue">
            <summary>
            Dodger Blue, RGB(30,144,255)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Firebrick">
            <summary>
            Firebrick, RGB(178,34,34)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.FloralWhite">
            <summary>
            FloralWhite, RGB(255,250,240)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.ForestGreen">
            <summary>
            Forest Green, RGB(34,139,34)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Fuchsia">
            <summary>
            Fuchsia, RGB(255,0,255)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Gainsboro">
            <summary>
            Gainsboro, RGB(220,220,220)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.GhostWhite">
            <summary>
            GhostWhite, RGB(248,248,255)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Gold">
            <summary>
            Gold, RGB(255,215,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Goldenrod">
            <summary>
            Goldenrod, RGB(218,165,32)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Gray">
            <summary>
            Gray, RGB(128,128,128)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Green">
            <summary>
            Green, RGB(0,128,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.GreenYellow">
            <summary>
            Green Yellow, RGB(173,255,47)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Honeydew">
            <summary>
            Honeydew, RGB(240,255,240)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.HotPink">
            <summary>
            HotPink, RGB(255,105,180)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.IndianRed">
            <summary>
            Indian Red, RGB(205,92,92)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Indigo">
            <summary>
            Indigo, RGB(75,0,130)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Ivory">
            <summary>
            Indigo, RGB(255,255,240)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Khaki">
            <summary>
            Khaki, RGB(240,230,140)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Lavender">
            <summary>
            Lavender, RGB(230,230,250)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LavenderBlush">
            <summary>
            Lavender Blush, RGB(255,240,245)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LawnGreen">
            <summary>
            Lawn Green, RGB(124,252,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LemonChiffon">
            <summary>
            Lemon Chiffon, RGB(255,250,205)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LightBlue">
            <summary>
            Light Blue, RGB(173,216,230)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LightCoral">
            <summary>
            Light Coral, RGB(240,128,128)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LightCyan">
            <summary>
            Light Cyan, RGB(224,255,255)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LightGoldenrodYellow">
            <summary>
            Light Goldenrod Yellow, RGB(250,250,210)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LightGray">
            <summary>
            Light Gray, RGB(211,211,211)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LightGreen">
            <summary>
            Light Green, RGB(144,238,144)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LightPink">
            <summary>
            Light Pink, RGB(255,182,193)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LightSalmon">
            <summary>
            Light Salmon, RGB(255,160,122)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LightSeaGreen">
            <summary>
            Light Sea Green, RGB(32,178,170)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LightSkyBlue">
            <summary>
            Light Sky Blue, RGB(135,206,250)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LightSlateGray">
            <summary>
            Light Slate Gray, RGB(119,136,153)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LightSteelBlue">
            <summary>
            Light Steel Blue, RGB(176,196,222)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LightYellow">
            <summary>
            Light Yellow, RGB(255,255,224)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Lime">
            <summary>
            Lime, RGB(0,255,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LimeGreen">
            <summary>
            Lime Green, RGB(50,205,50)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Linen">
            <summary>
            Linen, RGB(250,240,230)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Magenta">
            <summary>
            Magenta, RGB(255,0,255)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Maroon">
            <summary>
            Maroon, RGB(128,0,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.MediumAquamarine">
            <summary>
            Medium Aquamarine, RGB(102,205,170)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.MediumBlue">
            <summary>
            Medium Blue, RGB(0,0,205)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.MediumOrchid">
            <summary>
            Medium Orchid, RGB(186,85,211)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.MediumPurple">
            <summary>
            Medium Purple, RGB(147,112,219)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.MediumSeaGreen">
            <summary>
            Medium Sea Green, RGB(60,179,113)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.MediumSlateBlue">
            <summary>
            Medium Slate Blue, RGB(123,104,238)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.MediumSpringGreen">
            <summary>
            Medium Spring Green, RGB(0,250,154)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.MediumTurquoise">
            <summary>
            Medium Turquoise, RGB(72,209,204)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.MediumVioletRed">
            <summary>
            Medium Violet Red, RGB(199,21,133)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.MidnightBlue">
            <summary>
            Midnight Blue, RGB(25,25,112)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.MintCream">
            <summary>
            Mint Cream, RGB(245,255,250)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.MistyRose">
            <summary>
            Misty Rose, RGB(255,228,225)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Moccasin">
            <summary>
            Moccasin, RGB(255,228,181)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.NavajoWhite">
            <summary>
            Navajo White, RGB(255,222,173)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Navy">
            <summary>
            Navy, RGB(0,0,128)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.OldLace">
            <summary>
            Old Lace, RGB(253,245,230)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Olive">
            <summary>
            Olive, RGB(128,128,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.OliveDrab">
            <summary>
            Olive Drab, RGB(107,142,35)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Orange">
            <summary>
            Orange, RGB(255,165,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.OrangeRed">
            <summary>
            Orange Red, RGB(255,69,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Orchid">
            <summary>
            Orchid, RGB(218,112,214)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.PaleGoldenrod">
            <summary>
            Pale Goldenrod, RGB(238,232,170)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.PaleGreen">
            <summary>
            Pale Green, RGB(152,251,152)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.PaleTurquoise">
            <summary>
            Pale Turquoise, RGB(175,238,238)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.PaleVioletRed">
            <summary>
            Pale Violet Red, RGB(219,112,147)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.PapayaWhip">
            <summary>
            Papaya Whip, RGB(255,239,213)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.PeachPuff">
            <summary>
            Peach Puff, RGB(255,218,185)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Peru">
            <summary>
            Peru, RGB(205,133,63)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Pink">
            <summary>
            Pink, RGB(255,192,203)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Plum">
            <summary>
            Plum, RGB(221,160,221)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.PowderBlue">
            <summary>
            Powder Blue, RGB(176,224,230)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Purple">
            <summary>
            Purple, RGB(128,0,128)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Red">
            <summary>
            Red, RGB(255,0,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.RosyBrown">
            <summary>
            Rosy Brown, RGB(188,143,143)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.RoyalBlue">
            <summary>
            Royal Blue, RGB(65,105,225)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.SaddleBrown">
            <summary>
            Saddle Brown, RGB(139,69,19)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Salmon">
            <summary>
            Salmon, RGB(250,128,114)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.SandyBrown">
            <summary>
            Sandy Brown, RGB(244,164,96)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.SeaGreen">
            <summary>
            Sea Green, RGB(46,139,87)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.SeaShell">
            <summary>
            Sea Shell, RGB(255,245,238)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Sienna">
            <summary>
            Sienna, RGB(160,82,45)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Silver">
            <summary>
            Silver, RGB(192,192,192)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.SkyBlue">
            <summary>
            Sky Blue, RGB(135,206,235)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.SlateBlue">
            <summary>
            Slate Blue, RGB(106,90,205)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.SlateGray">
            <summary>
            Slate Gray, RGB(112,128,144)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Snow">
            <summary>
            Snow, RGB(255,250,250)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.SpringGreen">
            <summary>
            Spring Green, RGB(0,255,127)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.SteelBlue">
            <summary>
            Steel Blue, RGB(70,130,180)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Tan">
            <summary>
            Tan, RGB(210,180,140)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Teal">
            <summary>
            Teal, RGB(0,128,128)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Thistle">
            <summary>
            Thistle, RGB(216,191,216)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Tomato">
            <summary>
            Tomato, RGB(255,99,71)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Turquoise">
            <summary>
            Turquoise, RGB(64,224,208)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Violet">
            <summary>
            Violet, RGB(238,130,238)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Wheat">
            <summary>
            Wheat, RGB(245,222,179)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.White">
            <summary>
            White, RGB(255,255,255)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.WhiteSmoke">
            <summary>
            White Smoke, RGB(245,245,245)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Yellow">
            <summary>
            Yellow, RGB(255,255,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.YellowGreen">
            <summary>
            Yellow Green, RGB(154,205,50)
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ePresetExcelGlowType">
            <summary>
            Preset glow types in Excel
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent1_5Pt">
            <summary>
            Accent 1 theme color, 5pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent1_8Pt">
            <summary>
            Accent 1 theme color, 8pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent1_11Pt">
            <summary>
            Accent 1 theme color, 11pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent1_18Pt">
            <summary>
            Accent 1 theme color, 18pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent2_5Pt">
            <summary>
            Accent 2 theme color, 5pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent2_8Pt">
            <summary>
            Accent 2 theme color, 8pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent2_11Pt">
            <summary>
            Accent 2 theme color, 11pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent2_18Pt">
            <summary>
            Accent 2 theme color, 18pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent3_5Pt">
            <summary>
            Accent3 theme color, 5pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent3_8Pt">
            <summary>
            Accent 3 theme color, 8pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent3_11Pt">
            <summary>
            Accent 3 theme color, 11pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent3_18Pt">
            <summary>
            Accent 3 theme color, 18pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent4_5Pt">
            <summary>
            Accent4 theme color, 5pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent4_8Pt">
            <summary>
            Accent 4 theme color, 8pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent4_11Pt">
            <summary>
            Accent 4 theme color, 11pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent4_18Pt">
            <summary>
            Accent 4 theme color, 18pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent5_5Pt">
            <summary>
            Accent 5 theme color, 5pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent5_8Pt">
            <summary>
            Accent 5 theme color, 8pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent5_11Pt">
            <summary>
            Accent 5 theme color, 11pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent5_18Pt">
            <summary>
            Accent 5 theme color, 18pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent6_5Pt">
            <summary>
            Accent 6 theme color, 5pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent6_8Pt">
            <summary>
            Accent 6 theme color, 8pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent6_11Pt">
            <summary>
            Accent 6 theme color, 11pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent6_18Pt">
            <summary>
            Accent 6 theme color, 18pt
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ePresetExcelReflectionType">
            <summary>
            Preset shadow types in Excel
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelReflectionType.None">
            <summary>
            No reflection
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelReflectionType.TightTouching">
            <summary>
            Tight touching
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelReflectionType.HalfTouching">
            <summary>
            Half touching,
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelReflectionType.FullTouching">
            <summary>
            Full touching
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelReflectionType.Tight4Pt">
            <summary>
            Tight 4pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelReflectionType.Half4Pt">
            <summary>
            Half 4pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelReflectionType.Full4Pt">
            <summary>
            Full 4pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelReflectionType.Tight8Pt">
            <summary>
            Tight 8pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelReflectionType.Half8Pt">
            <summary>
            Half 8pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelReflectionType.Full8Pt">
            <summary>
            Full 8pt
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ePresetExcelShadowType">
            <summary>
            Preset shadow types in Excel
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.None">
            <summary>
            No shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.InnerTopLeft">
            <summary>
            Inner top left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.InnerTop">
            <summary>
            Inner top
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.InnerTopRight">
            <summary>
            Inner top right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.InnerLeft">
            <summary>
            Inner left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.InnerCenter">
            <summary>
            Inner center
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.InnerRight">
            <summary>
            Inner right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.InnerBottomLeft">
            <summary>
            Inner bottom left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.InnerBottom">
            <summary>
            Inner bottom
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.InnerBottomRight">
            <summary>
            Inner bottom right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.OuterTopLeft">
            <summary>
            Outer top left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.OuterTop">
            <summary>
            Outer top
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.OuterTopRight">
            <summary>
            Outer top right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.OuterLeft">
            <summary>
            Outer left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.OuterCenter">
            <summary>
            Outer center
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.OuterRight">
            <summary>
            Outer right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.OuterBottomLeft">
            <summary>
            Outer bottom left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.OuterBottom">
            <summary>
            Outer bottom
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.OuterBottomRight">
            <summary>
            Outer bottom right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.PerspectiveUpperLeft">
            <summary>
            Perspective upper left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.PerspectiveUpperRight">
            <summary>
            Perspective upper right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.PerspectiveBelow">
            <summary>
            Perspective upper below
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.PerspectiveLowerLeft">
            <summary>
            Perspective lower left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.PerspectiveLowerRight">
            <summary>
            Perspective upper right
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ePresetExcelSoftEdgesType">
            <summary>
            Preset soft edges types in Excel
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelSoftEdgesType.None">
            <summary>
            No soft edges
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelSoftEdgesType.SoftEdge1Pt">
            <summary>
            Soft edges 1pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelSoftEdgesType.SoftEdge2_5Pt">
            <summary>
            Soft edges 2.5pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelSoftEdgesType.SoftEdge5Pt">
            <summary>
            Soft edges 5pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelSoftEdgesType.SoftEdge10Pt">
            <summary>
            Soft edges 10pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelSoftEdgesType.SoftEdge25Pt">
            <summary>
            Soft edges 25pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelSoftEdgesType.SoftEdge50Pt">
            <summary>
            Soft edges 50pt
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ePresetMaterialType">
            <summary>
            Describes surface appearance of a shape
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.DkEdge">
            <summary>
            Dark Edge
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.Flat">
            <summary>
            Flat
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.LegacyMatte">
            <summary>
            Legacy Matte
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.LegacyMetal">
            <summary>
            Legacy Metal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.LegacyPlastic">
            <summary>
            Legacy Plastic
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.LegacyWireframe">
            <summary>
            Legacy Wireframe
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.Matte">
            <summary>
            Matte
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.Metal">
            <summary>
            Metal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.Plastic">
            <summary>
            Plastic
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.Powder">
            <summary>
            Powder
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.SoftEdge">
            <summary>
            Soft Edge
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.Softmetal">
            <summary>
            Soft Metal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.TranslucentPowder">
            <summary>
            Translucent Powder 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.WarmMatte">
            <summary>
            Warm Matte
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ePresetShadowType">
            <summary>
            This enum indicates one of 20 preset OOXML shadow types.
            This values does NOT correspond to the the preset types in Excel. 
            Please use the SetPresetShadow method for Excel preset types.
            <seealso cref="M:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.SetPresetShadow(OfficeOpenXml.Drawing.ePresetExcelShadowType)"/>
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.TopLeftDropShadow">
            <summary>
            1. Top Left Drop Shadow, Default
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.TopRightDropShadow">
            <summary>
            2. Top Right Drop Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.BackLeftPerspectiveShadow">
            <summary>
            3.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.BackRightPerspectiveShadow">
            <summary>
            4. Back Right Perspective Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.BottomLeftDropShadow">
            <summary>
            5. Bottom Left Drop Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.BottomRightDropShadow">
            <summary>
            6. Bottom Right Drop Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.FrontLeftPerspectiveShadow">
            <summary>
            7. FrontLeftPerspectiveShadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.FrontRightPerspectiveShadow">
            <summary>
            8. Front Right Perspective Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.TopLeftSmallDropShadow">
            <summary>
            9. Top Left Small DropShadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.TopLeftLargeDropShadow">
            <summary>
            10. Top Left Large Drop Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.BackLeftLongPerspectiveShadow">
            <summary>
            11. Back Left Long Perspective Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.BackRightLongPerspectiveShadow">
            <summary>
            Back Right Long Perspective Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.TopLeftDoubleDropShadow">
            <summary>
            13. Top Left Double Drop Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.BottomRightSmallDropShadow">
            <summary>
            14. Bottom Right Small Drop Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.FrontLeftLongPerspectiveShadow">
            <summary>
            15. Front Left Long Perspective Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.FrontRightLongPerspectiveShadow">
            <summary>
            16. Front Right LongPerspective Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.OuterBoxShadow3D">
            <summary>
            17.  3D Outer Box Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.InnerBoxShadow3D">
            <summary>
            18. 3D Inner Box Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.BackCenterPerspectiveShadow">
            <summary>
            19. Back Center Perspective Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.FrontBottomShadow">
            <summary>
            20. Front Bottom Shadow
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eRectangleAlignment">
            <summary>
            Describes how to position two rectangles relative to each other
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRectangleAlignment.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRectangleAlignment.BottomLeft">
            <summary>
            Bottom Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRectangleAlignment.BottomRight">
            <summary>
            Bottom Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRectangleAlignment.Center">
            <summary>
            Center
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRectangleAlignment.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRectangleAlignment.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRectangleAlignment.Top">
            <summary>
            Top
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRectangleAlignment.TopLeft">
            <summary>
            TopLeft
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRectangleAlignment.TopRight">
            <summary>
            TopRight
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eRigPresetType">
            <summary>
            The preset type of light rig which is to be applied to the 3D scene
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.None">
            <summary>
            No rig
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.Balanced">
            <summary>
            Balanced
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.BrightRoom">
            <summary>
            Bright Room
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.Chilly">
            <summary>
            Chilly
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.Contrasting">
            <summary>
            Contrasting
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.Flat">
            <summary>
            Flat
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.Flood">
            <summary>
            Flood
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.Freezing">
            <summary>
            Freezing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.Glow">
            <summary>
            Glow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.Harsh">
            <summary>
            Harsh
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.LegacyFlat1">
            <summary>
            Legacy Flat 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.LegacyFlat2">
            <summary>
            Legacy Flat 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.LegacyFlat3">
            <summary>
            Legacy Flat 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.LegacyFlat4">
            <summary>
            Legacy Flat 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.LegacyHarsh1">
            <summary>
            Legacy Harsh 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.LegacyHarsh2">
            <summary>
            Legacy Harsh 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.LegacyHarsh3">
            <summary>
            Legacy Harsh 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.LegacyHarsh4">
            <summary>
            Legacy Harsh 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.LegacyNormal1">
            <summary>
            Legacy Normal 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.LegacyNormal2">
            <summary>
            Legacy Normal 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.LegacyNormal3">
            <summary>
            Legacy Normal 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.LegacyNormal4">
            <summary>
            Legacy Normal 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.Morning">
            <summary>
            Morning
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.Soft">
            <summary>
            Soft
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.Sunrise">
            <summary>
            Sunrise
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.Sunset">
            <summary>
            Sunset
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.ThreePt">
            <summary>
            Three Point
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.TwoPt">
            <summary>
            Two Point
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eSchemeColor">
            <summary>
            A color bound to a user's theme.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Background1">
            <summary>
            Semantic background color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Text1">
            <summary>
            Semantic additional text color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Background2">
            <summary>
            Semantic additional background color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Text2">
            <summary>
            Semantic text color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Accent1">
            <summary>
            Extra scheme color 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Accent2">
            <summary>
            Extra scheme color 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Accent3">
            <summary>
            Extra scheme color 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Accent4">
            <summary>
            Extra scheme color 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Accent5">
            <summary>
            Extra scheme color 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Accent6">
            <summary>
            Extra scheme color 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Hyperlink">
            <summary>
            Regular Hyperlink Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.FollowedHyperlink">
            <summary>
            Followed Hyperlink Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Style">
            <summary>
            A color used in theme definitions which means to use the color of the style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Dark1">
            <summary>
            Main Dark Color 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Light1">
            <summary>
            Main Light Color 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Dark2">
            <summary>
            Main Dark Color 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Light2">
            <summary>
            Main Light Color 2
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eShadePath">
            <summary>
            The path for a gradiant color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShadePath.Linear">
            <summary>
            The gradient folows a linear path
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShadePath.Circle">
            <summary>
            The gradient follows a circular path
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShadePath.Rectangle">
            <summary>
            The gradient follows a rectangular path
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShadePath.Shape">
            <summary>
            The gradient follows the shape
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eShapeStyle">
            <summary>
            Shape style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.AccentBorderCallout1">
            <summary>
            Callout: with border and accent bar
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.AccentBorderCallout2">
            <summary>
            Callout: with bent line and accent bar
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.AccentBorderCallout3">
            <summary>
            Callout: with double bent line and accent bar
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.AccentCallout1">
            <summary>
            Callout: with line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.AccentCallout2">
            <summary>
            Callout: with bent line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.AccentCallout3">
            <summary>
            Callout: with double bent line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ActionButtonBackPrevious">
            <summary>
            Action button: Back &lt;
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ActionButtonBeginning">
            <summary>
            Action button: Begining |&lt;
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ActionButtonBlank">
            <summary>
            Action button: Blank
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ActionButtonDocument">
            <summary>
            Action button: with document icon
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ActionButtonEnd">
            <summary>
            Action button: End &gt;|
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ActionButtonForwardNext">
            <summary>
            Action button: Next &gt;
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ActionButtonHelp">
            <summary>
            Action button: Help ?
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ActionButtonHome">
            <summary>
            Action button: Home icon
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ActionButtonInformation">
            <summary>
            Action button: Information 🛈
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ActionButtonMovie">
            <summary>
            Action button: Camera icon
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ActionButtonReturn">
            <summary>
            Action button: U-turn icon.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ActionButtonSound">
            <summary>
            Action button: Speaker icon
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Arc">
            <summary>
            Arc: Quater circle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.BentArrow">
            <summary>
            A bent arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.BentConnector2">
            <summary>
            Bent connector 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.BentConnector3">
            <summary>
            Bent connector 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.BentConnector4">
            <summary>
            Bent connector 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.BentConnector5">
            <summary>
            Bent connector 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.BentUpArrow">
            <summary>
            A bent up arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Bevel">
            <summary>
            Bevel
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.BlockArc">
            <summary>
            Block arc: Half circle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.BorderCallout1">
            <summary>
            Callout: Line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.BorderCallout2">
            <summary>
            Callout: Bent line with border
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.BorderCallout3">
            <summary>
            Callout: Double bent line with border.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.BracePair">
            <summary>
            Brace pair: { }
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.BracketPair">
            <summary>
            Bracket pair: ( )
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Callout1">
            <summary>
            Callout: Line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Callout2">
            <summary>
            Callout: Bent line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Callout3">
            <summary>
            Callout: Double bent line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Can">
            <summary>
            Can: A cylinder shape
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ChartPlus">
            <summary>
            A plus within a rectangle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ChartStar">
            <summary>
            A star within a rectangle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ChartX">
            <summary>
            A x within a rectagle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Chevron">
            <summary>
            Cheveron: >
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Chord">
            <summary>
            Chord: The quarter of a circle.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.CircularArrow">
            <summary>
            A cirular arrow.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Cloud">
            <summary>
            A cloud
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.CloudCallout">
            <summary>
            Callout: Cloud
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Corner">
            <summary>
            Corner: L
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.CornerTabs">
            <summary>
            Cornder Tabs: Triangle in the corners.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Cube">
            <summary>
            A 3D cube shape.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.CurvedConnector2">
            <summary>
            Curved Connector 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.CurvedConnector3">
            <summary>
            Curved Connector 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.CurvedConnector4">
            <summary>
            Curved Connector 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.CurvedConnector5">
            <summary>
            Curved Connector 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.CurvedDownArrow">
            <summary>
            Curved Arrow: Down
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.CurvedLeftArrow">
            <summary>
            Curved Arrow: Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.CurvedRightArrow">
            <summary>
            Curved Arrow: Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.CurvedUpArrow">
            <summary>
            Curved Arrow: Up
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Decagon">
            <summary>
            A decagon: 10 corners
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.DiagStripe">
            <summary>
            A diagonal stripe
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Diamond">
            <summary>
            A diamond shape
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Dodecagon">
            <summary>
            A Dodecagon: 12 corners
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Donut">
            <summary>
            A donut shape
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.DoubleWave">
            <summary>
            Double wave
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.DownArrow">
            <summary>
            A down arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.DownArrowCallout">
            <summary>
            Callout: Down arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Ellipse">
            <summary>
            An ellipse
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.EllipseRibbon">
            <summary>
            Elipse ribbon: point up
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.EllipseRibbon2">
            <summary>
            Elipse ribbon: point down   
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartAlternateProcess">
            <summary>
            Flow chart:
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartCollate">
            <summary>
            Flow chart: Collate
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartConnector">
            <summary>
            Flow chart: Connector
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartDecision">
            <summary>
            Flow chart: Decision
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartDelay">
            <summary>
            Flow chart: Delay
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartDisplay">
            <summary>
            Flow chart: Display
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartDocument">
            <summary>
            Flow chart: Document
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartExtract">
            <summary>
            Flow chart: Extract
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartInputOutput">
            <summary>
            Flow chart: Input/Output Data
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartInternalStorage">
            <summary>
            Flow chart: Internal Storage
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartMagneticDisk">
            <summary>
            Flow chart: Magnetic Disk
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartMagneticDrum">
            <summary>
            Flow chart: Magnetic Drum
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartMagneticTape">
            <summary>
            Flow chart: Magnetic Tape
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartManualInput">
            <summary>
            Flow chart: Manual Input
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartManualOperation">
            <summary>
            Flow chart: Manual Operation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartMerge">
            <summary>
            Flow chart: Chart Merge
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartMultidocument">
            <summary>
            Flow chart: Multidocument
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartOfflineStorage">
            <summary>
            Flow chart: Offline Storage
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartOffpageConnector">
            <summary>
            Flow chart: Offpage Connector
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartOnlineStorage">
            <summary>
            Flow chart: Online Storage
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartOr">
            <summary>
            Flow chart: Or 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartPredefinedProcess">
            <summary>
            Flow chart: Predefined Process
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartPreparation">
            <summary>
            Flow chart: Preparation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartProcess">
            <summary>
            Flow chart: Process
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartPunchedCard">
            <summary>
            Flow chart: Punched Card
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartPunchedTape">
            <summary>
            Flow chart: Punched Tape
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartSort">
            <summary>
            Flow chart: Sort
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartSummingJunction">
            <summary>
            Flow chart: Summing Junction
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartTerminator">
            <summary>
            Flow chart: Terminator
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FoldedCorner">
            <summary>
            Folded corner, right bottom
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Frame">
            <summary>
            A frame
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Funnel">
            <summary>
            A Funnel
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Gear6">
            <summary>
            Gear, six cogs
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Gear9">
            <summary>
            Gear, nine cogs
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.HalfFrame">
            <summary>
            Half frame.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Heart">
            <summary>
            A heart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Heptagon">
            <summary>
            A Heptagon, 7 corners
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Hexagon">
            <summary>
            A Hexagon, 6 corners
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.HomePlate">
            <summary>
            Home plate
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.HorizontalScroll">
            <summary>
            A horizontal scroll
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.IrregularSeal1">
            <summary>
            Explosion 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.IrregularSeal2">
            <summary>
            Explosion 14
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.LeftArrow">
            <summary>
            Left arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.LeftArrowCallout">
            <summary>
            Callout: Left arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.LeftBrace">
            <summary>
            Left brace: {
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.LeftBracket">
            <summary>
            Left bracket: (
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.LeftCircularArrow">
            <summary>
            Left circular arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.LeftRightArrow">
            <summary>
            Left Right arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.LeftRightArrowCallout">
            <summary>
            Callout: Left rigth arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.LeftRightCircularArrow">
            <summary>
            Left right circular arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.LeftRightRibbon">
            <summary>
            Left right ribbon
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.LeftRightUpArrow">
            <summary>
            Left right up arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.LeftUpArrow">
            <summary>
            Left up arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.LightningBolt">
            <summary>
            Lightning bold
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Line">
            <summary>
            A line, from top-left to bottom-right.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.LineInv">
            <summary>
            An inverted line, from top-right to bottom-left.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.MathDivide">
            <summary>
            Math: Divide ÷
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.MathEqual">
            <summary>
            Math: Equal = 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.MathMinus">
            <summary>
            Math: Minus -
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.MathMultiply">
            <summary>
            Math: Multiply x
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.MathNotEqual">
            <summary>
            Math: Not equal ≠
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.MathPlus">
            <summary>
            Math: Plus +
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Moon">
            <summary>
            Half moon
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.NonIsoscelesTrapezoid">
            <summary>
            Non Isosceles Trapezoid
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.NoSmoking">
            <summary>
            No smoking, circle with line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.NotchedRightArrow">
            <summary>
            Notched Right Arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Octagon">
            <summary>
            Octagon, 8 corners
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Parallelogram">
            <summary>
            Parallelogram
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Pentagon">
            <summary>
            Pentagon, 5 corners
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Pie">
            <summary>
            Pie
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.PieWedge">
            <summary>
            Pie wedge
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Plaque">
            <summary>
            Plaque
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.PlaqueTabs">
            <summary>
            PlaqueTabs, inverted Plaque
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Plus">
            <summary>
            A plus
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.QuadArrow">
            <summary>
            Quad Arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.QuadArrowCallout">
            <summary>
            Callout: Quad Arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Rect">
            <summary>
            A rectangle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Ribbon">
            <summary>
            A ribbon - up
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Ribbon2">
            <summary>
            Ribbon - down
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.RightArrow">
            <summary>
            Right arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.RightArrowCallout">
            <summary>
            Callout: Right arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.RightBrace">
            <summary>
            Right Brace }
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.RightBracket">
            <summary>
            Right bracket )
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Round1Rect">
            <summary>
            Rectangle - rounded top-right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Round2DiagRect">
            <summary>
            Rectangle - Round top-left and bottom-right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Round2SameRect">
            <summary>
            Rectangle - Round top corners
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.RoundRect">
            <summary>
            Rectangle with rounded corners
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.RtTriangle">
            <summary>
            Right triangle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.SmileyFace">
            <summary>
            Smiley face
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Snip1Rect">
            <summary>
            Rectangle, snipped top-right 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Snip2DiagRect">
            <summary>
            Rectangle, snipped top-right bottom-left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Snip2SameRect">
            <summary>
            Rectangle, snipped top
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.SnipRoundRect">
            <summary>
            Rectangle, snipped top-left, rounded top-right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.SquareTabs">
            <summary>
            Square, tabs
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Star10">
            <summary>
            Star, 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Star12">
            <summary>
            Star, 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Star16">
            <summary>
            Star, 16
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Star24">
            <summary>
            Star, 24
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Star32">
            <summary>
            Star, 32
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Star4">
            <summary>
            Star, 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Star5">
            <summary>
            Star, 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Star6">
            <summary>
            Star, 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Star7">
            <summary>
            Star, 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Star8">
            <summary>
            Star, 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.StraightConnector1">
            <summary>
            Streight  connector
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.StripedRightArrow">
            <summary>
            Striped right arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Sun">
            <summary>
            Sun
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.SwooshArrow">
            <summary>
            Swoosh arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Teardrop">
            <summary>
            A tear drop
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Trapezoid">
            <summary>
            Trapezoid
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Triangle">
            <summary>
            Triangle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.UpArrow">
            <summary>
            Up Arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.UpArrowCallout">
            <summary>
            Callout: Up arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.UpDownArrow">
            <summary>
            Up-down arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.UpDownArrowCallout">
            <summary>
            Callout: Up-down arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.UturnArrow">
            <summary>
            U-turn arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Wave">
            <summary>
            A wave
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.WedgeEllipseCallout">
            <summary>
            Callout Wedge: Ellipse
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.WedgeRectCallout">
            <summary>
            Callout Wedge: Rectangle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.WedgeRoundRectCallout">
            <summary>
            Callout Wedge: Rounded rectangle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.VerticalScroll">
            <summary>
            Vertical scroll
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eShapeConnectorStyle">
            <summary>
            Shape connector style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeConnectorStyle.BentConnector2">
            <summary>
            Bend connector 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeConnectorStyle.BentConnector3">
            <summary>
            Bend connector 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeConnectorStyle.BentConnector4">
            <summary>
            Bend connector 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeConnectorStyle.BentConnector5">
            <summary>
            Bend connector 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeConnectorStyle.CurvedConnector2">
            <summary>
            Curved connector 2 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeConnectorStyle.CurvedConnector3">
            <summary>
            Curved connector 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeConnectorStyle.CurvedConnector4">
            <summary>
            Curved connector 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeConnectorStyle.CurvedConnector5">
            <summary>
            Curved connector 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeConnectorStyle.FlowChartConnector">
            <summary>
            Flow chart connector
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeConnectorStyle.FlowChartOffpageConnector">
            <summary>
            Flow chart offpage connector
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeConnectorStyle.StraightConnector1">
            <summary>
            Straight connector 1
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eStyleEntryModifier">
            <summary>
            Modifiers for a style entry
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eStyleEntryModifier.AllowNoFillOverride">
            <summary>
            This style entry can be replaced with no fill
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eStyleEntryModifier.AllowNoLineOverride">
            <summary>
            This style entry can be replaced with no line
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eSystemColor">
            <summary>
            System colors
            </summary>s
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.ScrollBar">
            <summary>
            Scroll Bar System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.Background">
            <summary>
            Background System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.ActiveCaption">
            <summary>
            Active Caption System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.InactiveCaption">
            <summary>
            Inactive Caption System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.Menu">
            <summary>
            Menu System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.Window">
            <summary>
            Window Background System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.WindowFrame">
            <summary>
            Window Frame System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.MenuText">
            <summary>
            Menu Text System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.WindowText">
            <summary>
            Window Text System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.CaptionText">
            <summary>
            Caption Text System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.ActiveBorder">
            <summary>
            Active Border System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.InactiveBorder">
            <summary>
            Inactive Border System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.AppWorkspace">
            <summary>
            Application Workspace System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.Highlight">
            <summary>
            Highlight System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.HighlightText">
            <summary>
            Highlight Text System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.ButtonFace">
            <summary>
            Button Face System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.ButtonShadow">
            <summary>
            Button Shadow System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.GrayText">
            <summary>
            Gray Text System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.ButtonText">
            <summary>
            Button Text System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.InactiveCaptionText">
            <summary>
            Inactive Caption Text System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.ButtonHighlight">
            <summary>
            Button Highlight System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.DarkShadow3d">
            <summary>
            3D Dark System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.Light3d">
            <summary>
            3D Light System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.InfoText">
            <summary>
            Info Text System Color (Tooltip)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.InfoBackground">
            <summary>
            Info Background System Color (Tooltip)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.HotLight">
            <summary>
            Hot Light System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.GradientActiveCaption">
            <summary>
            Gradient Active Caption System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.GradientInactiveCaption">
            <summary>
            Gradient Inactive Caption System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.MenuHighlight">
            <summary>
            Menu Highlight System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.MenuBar">
            <summary>
            Menu Bar System Color
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eTextAlignment">
            <summary>
            Text alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAlignment.Left">
            <summary>
            Left alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAlignment.Center">
            <summary>
            Center alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAlignment.Right">
            <summary>
            Right alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAlignment.Distributed">
            <summary>
            Distributes the text words across an entire text line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAlignment.Justified">
            <summary>
            Align text so that it is justified across the whole line.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAlignment.JustifiedLow">
            <summary>
            Aligns the text with an adjusted kashida length for Arabic text
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAlignment.ThaiDistributed">
            <summary>
            Distributes Thai text specially, specially, because each character is treated as a word
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eTextAnchoringType">
            <summary>
            Text anchoring
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAnchoringType.Bottom">
            <summary>
            Anchor the text to the bottom
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAnchoringType.Center">
            <summary>
            Anchor the text to the center
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAnchoringType.Distributed">
            <summary>
            Anchor the text so that it is distributed vertically.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAnchoringType.Justify">
            <summary>
            Anchor the text so that it is justified vertically.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAnchoringType.Top">
            <summary>
            Anchor the text to the top
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eTextAutofit">
            <summary>
            How autofit handles text.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAutofit.NoAutofit">
            <summary>
            No autofit
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAutofit.NormalAutofit">
            <summary>
            Text within the text body will be normally autofit
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAutofit.ShapeAutofit">
            <summary>
            A shape will be autofit to fully contain the text within it
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eTextCapsType">
            <summary>
            Specifies the cap types of the text
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextCapsType.All">
            <summary>
            Apply all caps on the text. All lower case letters are converted to upper case, but stored without change.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextCapsType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextCapsType.Small">
            <summary>
            Apply small caps to the text. Letters are converted to lower case.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eTextHorizontalOverflow">
            <summary>
            Specifies the text vertical overflow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextHorizontalOverflow.Clip">
            <summary>
            When a character doesn't fit into a line, clip it at the end.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextHorizontalOverflow.Overflow">
            <summary>
            When a character doesn't fit into a line, allow an overflow.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eTextVerticalOverflow">
            <summary>
            How text vertical overflows
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextVerticalOverflow.Clip">
            <summary>
            Clip the text and give no indication that there is text that is not visible at the top and bottom.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextVerticalOverflow.Ellipsis">
            <summary>
            Use an ellipse to highlight text that is not visible at the top and bottom.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextVerticalOverflow.Overflow">
            <summary>
            Overflow the text.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eTextVerticalType">
            <summary>
            Vertical text type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextVerticalType.EastAsianVertical">
            <summary>
            East Asian version of vertical text. Normal fonts are displayed as if rotated by 90 degrees while some East Asian are displayed vertical.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextVerticalType.Horizontal">
            <summary>
            Horizontal text. Default
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextVerticalType.MongolianVertical">
            <summary>
            East asian version of vertical text. . Normal fonts are displayed as if rotated by 90 degrees while some East Asian are displayed vertical. LEFT RIGHT
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextVerticalType.Vertical">
            <summary>
            All of the text is vertical orientation, 90 degrees rotated clockwise
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextVerticalType.Vertical270">
            <summary>
            All of the text is vertical orientation, 90 degrees rotated counterclockwise
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextVerticalType.WordArtVertical">
            <summary>
            All of the text is vertical
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextVerticalType.WordArtVerticalRightToLeft">
            <summary>
            Vertical WordArt will be shown from right to left
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eTextWrappingType">
            <summary>
            Text wrapping
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextWrappingType.None">
            <summary>
            No wrapping. Words overflows.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextWrappingType.Square">
            <summary>
            Wrap words within the boundries
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eThemeSchemeColor">
            <summary>
            A color bound to a user's theme.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eThemeSchemeColor.Background1">
            <summary>
            Main Dark Color 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eThemeSchemeColor.Text1">
            <summary>
            Main Light Color 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eThemeSchemeColor.Background2">
            <summary>
            Main Dark Color 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eThemeSchemeColor.Text2">
            <summary>
            Main Light Color 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eThemeSchemeColor.Accent1">
            <summary>
            Extra scheme color 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eThemeSchemeColor.Accent2">
            <summary>
            Extra scheme color 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eThemeSchemeColor.Accent3">
            <summary>
            Extra scheme color 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eThemeSchemeColor.Accent4">
            <summary>
            Extra scheme color 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eThemeSchemeColor.Accent5">
            <summary>
            Extra scheme color 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eThemeSchemeColor.Accent6">
            <summary>
            Extra scheme color 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eThemeSchemeColor.Hyperlink">
            <summary>
            Regular Hyperlink Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eThemeSchemeColor.FollowedHyperlink">
            <summary>
            Followed Hyperlink Color
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eTileFlipMode">
            <summary>
            Specifies the direction(s) in which to flip the gradient while tiling
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTileFlipMode.None">
            <summary>
            Tiles are not flipped
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTileFlipMode.X">
            <summary>
            Tiles are flipped horizontally.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTileFlipMode.XY">
            <summary>
            Tiles are flipped horizontally and Vertically
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTileFlipMode.Y">
            <summary>
            Tiles are flipped vertically.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelChartAsType">
            <summary>
            Provides easy access to convert the drawing to a it's typed ExcelChart class.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelChartAsType.Type``1">
            <summary>
            Converts the drawing to it's top level or other nested drawing class.        
            </summary>
            <typeparam name="T">The type of drawing. T must be inherited from ExcelDrawing</typeparam>
            <returns>The drawing as type T</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.Chart">
            <summary>
            Returns return the drawing as a generic chart. This the base class for all charts.
            If this drawing is not a chart, null will be returned
            </summary>
            <returns>The drawing as a chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.AreaChart">
            <summary>
            Returns the drawing as an area chart. 
            If this drawing is not an area chart, null will be returned
            </summary>
            <returns>The drawing as an area chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.BarChart">
            <summary>
            Returns return the drawing as a bar chart. 
            If this drawing is not a bar chart, null will be returned
            </summary>
            <returns>The drawing as a bar chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.BubbleChart">
            <summary>
            Returns the drawing as a bubble chart. 
            If this drawing is not a bubble chart, null will be returned
            </summary>
            <returns>The drawing as a bubble chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.DoughnutChart">
            <summary>
            Returns return the drawing as a doughnut chart. 
            If this drawing is not a doughnut chart, null will be returned
            </summary>
            <returns>The drawing as a doughnut chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.OfPieChart">
            <summary>
            Returns the drawing as a PieOfPie or a BarOfPie chart. 
            If this drawing is not a PieOfPie or a BarOfPie chart, null will be returned
            </summary>
            <returns>The drawing as a PieOfPie or a BarOfPie chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.PieChart">
            <summary>
            Returns the drawing as a pie chart. 
            If this drawing is not a pie chart, null will be returned
            </summary>
            <returns>The drawing as a pie chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.LineChart">
            <summary>
            Returns return the drawing as a line chart. 
            If this drawing is not a line chart, null will be returned
            </summary>
            <returns>The drawing as a line chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.RadarChart">
            <summary>
            Returns the drawing as a radar chart. 
            If this drawing is not a radar chart, null will be returned
            </summary>
            <returns>The drawing as a radar chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.ScatterChart">
            <summary>
            Returns the drawing as a scatter chart. 
            If this drawing is not a scatter chart, null will be returned
            </summary>
            <returns>The drawing as a scatter chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.StockChart">
            <summary>
            Returns the drawing as a stock chart. 
            If this drawing is not a stock chart, null will be returned
            </summary>
            <returns>The drawing as a stock chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.SurfaceChart">
            <summary>
            Returns the drawing as a surface chart. 
            If this drawing is not a surface chart, null will be returned
            </summary>
            <returns>The drawing as a surface chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.SunburstChart">
            <summary>
            Returns return the drawing as a sunburst chart. 
            If this drawing is not a sunburst chart, null will be returned
            </summary>
            <returns>The drawing as a sunburst chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.TreemapChart">
            <summary>
            Returns return the drawing as a treemap chart. 
            If this drawing is not a treemap chart, null will be returned
            </summary>
            <returns>The drawing as a treemap chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.BoxWhiskerChart">
            <summary>
            Returns return the drawing as a boxwhisker chart. 
            If this drawing is not a boxwhisker chart, null will be returned
            </summary>
            <returns>The drawing as a boxwhisker chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.HistogramChart">
            <summary>
            Returns return the drawing as a histogram chart. 
            If this drawing is not a histogram chart, null will be returned
            </summary>
            <returns>The drawing as a histogram Chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.FunnelChart">
            <summary>
            Returns return the drawing as a funnel chart. 
            If this drawing is not a funnel chart, null will be returned
            </summary>
            <returns>The drawing as a funnel Chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.WaterfallChart">
            <summary>
            Returns the drawing as a waterfall chart. 
            If this drawing is not a waterfall chart, null will be returned
            </summary>
            <returns>The drawing as a waterfall chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.RegionMapChart">
            <summary>
            Returns the drawing as a region map chart. 
            If this drawing is not a region map chart, null will be returned
            </summary>
            <returns>The drawing as a region map chart</returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelConnectionShape">
            <summary>
            An Excel shape.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelConnectionShape.ConnectionStart">
            <summary>
            Connection starting point
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelConnectionShape.ConnectionEnd">
            <summary>
            Connection ending point
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelConnectionShape.Style">
            <summary>
            Shape connector style
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelControlAsType">
            <summary>
            Provides a simple way to type cast control drawing object top its top level class.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelControlAsType.Type``1">
            <summary>
            Converts the drawing to it's top level or other nested drawing class.        
            </summary>
            <typeparam name="T">The type of drawing. T must be inherited from ExcelDrawing</typeparam>
            <returns>The drawing as type T</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelControlAsType.Button">
            <summary>
            Returns the drawing as a button. 
            If this drawing is not a button, null will be returned
            </summary>
            <returns>The drawing as a button</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelControlAsType.DropDown">
            <summary>
            Returns the drawing as a drop-down. 
            If this drawing is not a drop-down, null will be returned
            </summary>
            <returns>The drawing as a drop-down</returns>        
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelControlAsType.GroupBox">
            <summary>
            Returns the drawing as a group box. 
            If this drawing is not a group box, null will be returned
            </summary>
            <returns>The drawing as a group box</returns>        
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelControlAsType.Label">
            <summary>
            Returns the drawing as a label. 
            If this drawing is not a label, null will be returned
            </summary>
            <returns>The drawing as a label</returns>        
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelControlAsType.ListBox">
            <summary>
            Returns the drawing as a list box. 
            If this drawing is not a list box, null will be returned
            </summary>
            <returns>The drawing as a list box</returns>        
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelControlAsType.CheckBox">
            <summary>
            Returns the drawing as a check box. 
            If this drawing is not a check box, null will be returned
            </summary>
            <returns>The drawing as a check box</returns>        
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelControlAsType.RadioButton">
            <summary>
            Returns the drawing as a radio button. 
            If this drawing is not a radio button, null will be returned
            </summary>
            <returns>The drawing as a radio button</returns>        
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelControlAsType.ScrollBar">
            <summary>
            Returns the drawing as a scroll bar. 
            If this drawing is not a scroll bar, null will be returned
            </summary>
            <returns>The drawing as a scroll bar</returns>        
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelControlAsType.SpinButton">
            <summary>
            Returns the drawing as a spin button. 
            If this drawing is not a spin button, null will be returned
            </summary>
            <returns>The drawing as a spin button</returns>        
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelDrawing">
            <summary>
            Base class for drawings. 
            Drawings are Charts, Shapes and Pictures.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_PIXEL">
            <summary>
            The ratio between EMU and Pixels
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_POINT">
            <summary>
            The ratio between EMU and Points
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_CM">
            <summary>
            The ratio between EMU and centimeters
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_MM">
            <summary>
            The ratio between EMU and milimeters
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_US_INCH">
            <summary>
            The ratio between EMU and US Inches
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_PICA">
            <summary>
            The ratio between EMU and pica
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawing.DrawingType">
            <summary>
            The type of drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawing.Name">
            <summary>
            The name of the drawing object
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawing.Description">
            <summary>
            A description of the drawing object
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawing.EditAs">
            <summary>
            How Excel resize drawings when the column width is changed within Excel.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawing.Locked">
            <summary>
            Lock drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawing.Print">
            <summary>
            Print drawing with sheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawing.From">
            <summary>
            Top Left position, if the shape is of the one- or two- cell anchor type
            Otherwise this propery is set to null
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawing.Position">
            <summary>
            Top Left position, if the shape is of the absolute anchor type
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawing.Size">
            <summary>
            The extent of the shape, if the shape is of the one- or absolute- anchor type.
            Otherwise this propery is set to null
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawing.To">
            <summary>
            Bottom right position
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawing.Hyperlink">
            <summary>
            Hyperlink
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawing.As">
            <summary>
            Provides access to type conversion for all top-level drawing classes.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawing.GetDrawing(OfficeOpenXml.Drawing.ExcelDrawings,System.Xml.XmlNode)">
            <summary>
            Add new Drawing types here
            </summary>
            <param name="drawings">The drawing collection</param>
            <param name="node">Xml top node</param>
            <returns>The Drawing object</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32)">
            <summary>
            Set the top left corner of a drawing. 
            Note that resizing columns / rows after using this function will effect the position of the drawing
            </summary>
            <param name="PixelTop">Top pixel</param>
            <param name="PixelLeft">Left pixel</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawing.CellAnchor">
            <summary>
            How the drawing is anchored to the cells.
            This effect how the drawing will be resize
            <see cref="M:OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs,System.Int32,System.Int32,System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This will change the cell anchor type, move and resize the drawing.
            </summary>
            <param name="type">The cell anchor type to change to</param>
            <param name="PixelTop">The topmost pixel</param>
            <param name="PixelLeft">The leftmost pixel</param>
            <param name="width">The width in pixels</param>
            <param name="height">The height in pixels</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs)">
            <summary>
            This will change the cell anchor type without modifiying the position and size.
            </summary>
            <param name="type">The cell anchor type to change to</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the top left corner of a drawing. 
            Note that resizing columns / rows after using this function will effect the position of the drawing
            </summary>
            <param name="Row">Start row - 0-based index.</param>
            <param name="RowOffsetPixels">Offset in pixels</param>
            <param name="Column">Start Column - 0-based index.</param>
            <param name="ColumnOffsetPixels">Offset in pixels</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32)">
            <summary>
            Set size in Percent.
            Note that resizing columns / rows after using this function will effect the size of the drawing
            </summary>
            <param name="Percent"></param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32,System.Int32)">
            <summary>
            Set size in pixels
            Note that resizing columns / rows after using this function will effect the size of the drawing
            </summary>
            <param name="PixelWidth">Width in pixels</param>
            <param name="PixelHeight">Height in pixels</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawing.SendToBack">
            <summary>
            Sends the drawing to the back of any overlapping drawings.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawing.BringToFront">
            <summary>
            Brings the drawing to the front of any overlapping drawings.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawing.Group(OfficeOpenXml.Drawing.ExcelDrawing[])">
            <summary>
            Group the drawing together with a list of other drawings. 
            <seealso cref="M:OfficeOpenXml.Drawing.ExcelDrawing.UnGroup(System.Boolean)"/>
            <seealso cref="P:OfficeOpenXml.Drawing.ExcelDrawing.ParentGroup"/>
            </summary>
            <param name="drawing">The drawings to group</param>
            <returns>The group shape</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawing.UnGroup(System.Boolean)">
            <summary>
            Will ungroup this drawing or the entire group, if this drawing is grouped together with other drawings.
            If this drawings is not grouped an InvalidOperationException will be returned.
            </summary>
            <param name="ungroupThisItemOnly">If true this drawing will be removed from the group. 
            If it is false, the whole group will be disbanded. If true only this drawing will be removed.
            </param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawing.ParentGroup">
            <summary>
            If the drawing is grouped this property contains the Group drawing containing the group.
            Otherwise this property is null
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawing.Dispose">
            <summary>
            Dispose the object
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawing.AdjustPositionAndSize">
            <summary>
            Will adjust the position and size of the drawing according to changes in font of rows and to the Normal style.
            This method will be called before save, so use it only if you need the coordinates of the drawing.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelDrawingAsType">
            <summary>
            Provides a simple way to type cast drawing object top its top level class.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawingAsType.Type``1">
            <summary>
            Converts the drawing to it's top level or other nested drawing class.        
            </summary>
            <typeparam name="T">The type of drawing. T must be inherited from ExcelDrawing</typeparam>
            <returns>The drawing as type T</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingAsType.Shape">
            <summary>
            Returns the drawing as a shape. 
            If this drawing is not a shape, null will be returned
            </summary>
            <returns>The drawing as a shape</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingAsType.Picture">
            <summary>
            Returns the drawing as a picture/image. 
            If this drawing is not a picture, null will be returned
            </summary>
            <returns>The drawing as a picture</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingAsType.Chart">
            <summary>
            An object that containing properties that type-casts the drawing to a chart.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingAsType.Slicer">
            <summary>
            An object that containing properties that type-casts the drawing to a slicer.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingAsType.Control">
            <summary>
            Helps to cast drawings to controls. Use the properties of this class to cast to the various specific control types.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelDrawingBorder">
            <summary>
            Border for drawings
            </summary>    
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingBorder.Fill">
            <summary>
            Access to fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingBorder.LineStyle">
            <summary>
            Preset line dash
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingBorder.CompoundLineStyle">
            <summary>
            The compound line type that is to be used for lines with text such as underlines
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingBorder.Alignment">
            <summary>
            The pen alignment type for use within a text body
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingBorder.LineCap">
            <summary>
            Specifies how to cap the ends of lines
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingBorder.Width">
            <summary>
            Width in pixels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingBorder.Join">
            <summary>
            How connected lines are joined
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingBorder.MiterJoinLimit">
            <summary>
            The amount by which lines is extended to form a miter join 
            Otherwise miter joins can extend infinitely far.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingBorder.HeadEnd">
            <summary>
            Head end style for the line
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingBorder.TailEnd">
            <summary>
            Tail end style for the line
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelDrawingConnectionPoint">
            <summary>
            A connection point between a shape and a connection shape
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingConnectionPoint.Index">
            <summary>
            The index the connection point
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingConnectionPoint.Shape">
            <summary>
            The shape to connect
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelDrawingCoordinate">
            <summary>
            Position of the a drawing.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingCoordinate.X">
            <summary>
            X coordinate in EMU
            
            EMU units   1cm         =   1/360000 
                        1US inch    =   1/914400
                        1pt         =   1/12700
                        1pixel      =   1/9525
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingCoordinate.Y">
            <summary>
            X coordinate in EMU
            
            EMU units   1cm         =   1/360000 
                        1US inch    =   1/914400
                        1pt         =   1/12700
                        1pixel      =   1/9525
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelDrawingFill">
            <summary>
            Fill properties for drawing objects
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawingFill.LoadFill">
            <summary>
            Load the fill from the xml
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingFill.PatternFill">
            <summary>
            Reference pattern fill properties
            This property is only accessable when Type is set to PatternFill
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingFill.BlipFill">
            <summary>
            Reference gradient fill properties
            This property is only accessable when Type is set to BlipFill
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawingFill.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelDrawingFillBasic">
            <summary>
            Fill properties for drawing objects like lines etc, that don't have blip- and pattern- fills
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ExcelDrawingFillBasic._fillPath">
            <summary>
            XPath
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ExcelDrawingFillBasic._fillNode">
            <summary>
            The fill xml element
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ExcelDrawingFillBasic._drawing">
            <summary>
            The drawings collection
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ExcelDrawingFillBasic._fillTypeNode">
            <summary>
            The fill type node.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawingFillBasic.LoadFill">
            <summary>
            Loads the fill from xml
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingFillBasic.Style">
            <summary>
            Fill style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingFillBasic.Color">
            <summary>
            Fill color for solid fills.
            Other fill styles will return Color.Empty.
            Setting this propery will set the Type to SolidFill with the specified color.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingFillBasic.SolidFill">
            <summary>
            Reference solid fill properties
            This property is only accessable when Type is set to SolidFill
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingFillBasic.GradientFill">
            <summary>
            Reference gradient fill properties
            This property is only accessable when Type is set to GradientFill
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingFillBasic.Transparancy">
            <summary>
            Transparancy in percent from a solid fill. 
            This is the same as 100-Fill.Transform.Alpha
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawingFillBasic.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelDrawingLineEnd">
            <summary>
            Properties for drawing line ends
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingLineEnd.Style">
            <summary>
            The shapes line end decoration
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingLineEnd.Width">
            <summary>
            The line start/end width in relation to the line width
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingLineEnd.Height">
            <summary>
            The line start/end height in relation to the line height
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelDrawingPoint3D">
            <summary>
            A point in a 3D space
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingPoint3D.X">
            <summary>
            The X coordinate in point
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingPoint3D.Y">
            <summary>
            The Y coordinate
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingPoint3D.Z">
            <summary>
            The Z coordinate
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.ExcelDrawingRectangle">
            <summary>
            The focus point for a non-liner gradient fill
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelDrawingRectangle.TopOffset">
            <summary>
            Top offset in percentage
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelDrawingRectangle.BottomOffset">
            <summary>
            Bottom offset in percentage
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelDrawingRectangle.LeftOffset">
            <summary>
            Left offset in percentage
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelDrawingRectangle.RightOffset">
            <summary>
            Right offset in percentage
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.eThemeFontCollectionType">
            <summary>
            Theme font collection type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Theme.eThemeFontCollectionType.None">
            <summary>
            Do not reference a font collection
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Theme.eThemeFontCollectionType.Minor">
            <summary>
            Reference the minor font collection
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Theme.eThemeFontCollectionType.Major">
            <summary>
            Reference the major font collection
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.ExcelColorScheme">
            <summary>
            The color Scheme for a theme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelColorScheme.Dark1">
            <summary>
            Dark 1 theme color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelColorScheme.Dark2">
            <summary>
            Dark 2 theme color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelColorScheme.Light1">
            <summary>
            Light 1 theme color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelColorScheme.Light2">
            <summary>
            Light 2 theme color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelColorScheme.Accent1">
            <summary>
            Accent 1 theme color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelColorScheme.Accent2">
            <summary>
            Accent 2 theme color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelColorScheme.Accent3">
            <summary>
            Accent 3 theme color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelColorScheme.Accent4">
            <summary>
            Accent 4 theme color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelColorScheme.Accent5">
            <summary>
            Accent 5 theme color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelColorScheme.Accent6">
            <summary>
            Accent 6 theme color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelColorScheme.Hyperlink">
            <summary>
            Hyperlink theme color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelColorScheme.FollowedHyperlink">
            <summary>
            Followed hyperlink theme color
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.ExcelThemeEffectStyles">
            <summary>
            The effect styles within the theme
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeEffectStyles.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeEffectStyles.Item(System.Int32)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="index">The index</param>
            <returns>The effect style</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeEffectStyles.Add">
            <summary>
            Adds a new effect style
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeEffectStyles.Remove(OfficeOpenXml.Drawing.Theme.ExcelThemeEffectStyle)">
            <summary>
            Removes an effect style. The collection must have at least three effect styles.
            </summary>
            <param name="item">The Item</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeEffectStyles.Remove(System.Int32)">
            <summary>
            Remove the effect style at the specified index. The collection must have at least three effect styles.
            </summary>
            <param name="Index">The index</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeEffectStyles.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.ExcelFontScheme">
            <summary>
            Defines the font scheme within the theme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelFontScheme.Name">
            <summary>
            The name of the font scheme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelFontScheme.MajorFont">
            <summary>
            A collection of major fonts
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelFontScheme.MinorFont">
            <summary>
            A collection of minor fonts
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.ExcelFormatScheme">
            <summary>
            The background fill styles, effect styles, fill styles, and line styles which define the style matrix for a theme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelFormatScheme.Name">
            <summary>
            The name of the format scheme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelFormatScheme.FillStyle">
            <summary>
             Defines the fill styles for the theme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelFormatScheme.BorderStyle">
            <summary>
             Defines the line styles for the theme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelFormatScheme.EffectStyle">
            <summary>
             Defines the effect styles for the theme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelFormatScheme.BackgroundFillStyle">
            <summary>
            Define background fill styles for the theme
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.ExcelTheme">
            <summary>
            Defines a Theme within the package
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelTheme.Name">
            <summary>
            The name of the theme
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.ExcelThemeBase">
            <summary>
            The base class for a theme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeBase.ThemeXml">
            <summary>
            The Theme Xml
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeBase.ColorScheme">
            <summary>
            Defines the color scheme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeBase.FontScheme">
            <summary>
            Defines the font scheme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeBase.FormatScheme">
            <summary>
            The background fill styles, effect styles, fill styles, and line styles which define the style matrix for a theme
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.ExcelThemeEffectStyle">
            <summary>
            An effect style for a theme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeEffectStyle.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeEffectStyle.ThreeD">
            <summary>
            3D settings
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.ExcelThemeFillStyles">
            <summary>
            Defines fill styles for a theme.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeFillStyles.GetEnumerator">
            <summary>
            Get the enumerator for the Theme
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeFillStyles.Item(System.Int32)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="index">The index</param>
            <returns>The fill</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeFillStyles.Add(OfficeOpenXml.Drawing.eFillStyle)">
            <summary>
            Adds a new fill to the collection
            </summary>
            <param name="style">The fill style</param>
            <returns>The fill</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeFillStyles.Remove(OfficeOpenXml.Drawing.ExcelDrawingFill)">
            <summary>
            Remove a fill item
            </summary>
            <param name="item">The item</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeFillStyles.Remove(System.Int32)">
            <summary>
            Remove the item at the specified index
            </summary>
            <param name="Index"></param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeFillStyles.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.ExcelThemeFontCollection">
            <summary>
            A collection of fonts in a theme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeFontCollection.Item(System.Int32)">
            <summary>
            The collection index
            </summary>
            <param name="index">The index</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeFontCollection.Add(System.String,System.String)">
            <summary>
            Adds a normal font to the collection
            </summary>
            <param name="typeface">The typeface, or name of the font</param>
            <param name="script">The script, or language, in which the typeface is supposed to be used</param>
            <returns>The font</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeFontCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item from the collection
            </summary>
            <param name="index">The index of the item to remove</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeFontCollection.Remove(OfficeOpenXml.Drawing.Style.Font.ExcelDrawingFontBase)">
            <summary>
            Removes the item from the collection
            </summary>
            <param name="item">The item to remove</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeFontCollection.SetLatinFont(System.String)">
            <summary>
            Set the latin font of the collection
            </summary>
            <param name="typeface">The typeface, or name of the font</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeFontCollection.SetComplexFont(System.String)">
            <summary>
            Set the complex font of the collection
            </summary>
            <param name="typeface">The typeface, or name of the font</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeFontCollection.SetEastAsianFont(System.String)">
            <summary>
            Set the East Asian font of the collection
            </summary>
            <param name="typeface">The typeface, or name of the font</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeFontCollection.AddSpecialFont(OfficeOpenXml.Drawing.eFontType,System.String)">
            <summary>
            Adds a special font to the fonts collection
            </summary>
            <param name="type">The font type</param>
            <param name="typeface">The typeface, or name of the font</param>
            <returns>The font</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeFontCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeFontCollection.GetEnumerator">
            <summary>
            Gets an enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.ExcelThemeLine">
            <summary>
            Linestyle for a theme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeLine.Width">
            <summary>
            Line width, in EMU's
            
            1 Pixel      =   9525
            1 Pt         =   12700
            1 cm         =   360000 
            1 US inch    =   914400
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeLine.Cap">
            <summary>
            The ending caps for the line
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeLine.CompoundLineStyle">
            <summary>
            The compound line type to be used for the underline stroke
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeLine.Alignment">
            <summary>
            Specifies the pen alignment type for use within a text body
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeLine.Fill">
            <summary>
            Access to fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeLine.Style">
            <summary>
            Preset line dash
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeLine.Join">
            <summary>
            The shape that lines joined together have
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeLine.MiterJoinLimit">
            <summary>
            How much lines are extended to form a miter join
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeLine.HeadEnd">
            <summary>
            Properties for drawing line head ends
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeLine.TailEnd">
            <summary>
            Properties for drawing line tail ends
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.ExcelThemeLineStyles">
            <summary>
            Defines the line styles within the theme
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeLineStyles.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeLineStyles.Item(System.Int32)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="index">The index</param>
            <returns>The line style</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeLineStyles.Add">
            <summary>
            Adds a new line to the collection
            </summary>
            <returns>The line</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeLineStyles.Remove(OfficeOpenXml.Drawing.Theme.ExcelThemeLine)">
            <summary>
            Removes a line item from the collection
            </summary>
            <param name="item">The item</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeLineStyles.Remove(System.Int32)">
            <summary>
            Remove the line style at the specified index. The collection must have at least three line styles.
            </summary>
            <param name="Index">The index</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeLineStyles.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.ExcelThemeManager">
            <summary>
            Handels themes in a package
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeManager.CurrentTheme">
            <summary>
            The current theme. Null if not theme exists.
            <seealso cref="M:OfficeOpenXml.Drawing.Theme.ExcelThemeManager.CreateDefaultTheme"/>
            <seealso cref="M:OfficeOpenXml.Drawing.Theme.ExcelThemeManager.Load(System.IO.FileInfo)"/>
            <seealso cref="M:OfficeOpenXml.Drawing.Theme.ExcelThemeManager.Load(System.IO.Stream)"/>
            <seealso cref="M:OfficeOpenXml.Drawing.Theme.ExcelThemeManager.Load(System.Xml.XmlDocument)"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeManager.CreateDefaultTheme">
            <summary>
            Create the default theme.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeManager.DeleteCurrentTheme">
            <summary>
            Delete the current theme
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeManager.Load(System.IO.FileInfo)">
            <summary>
            Loads a .thmx file, exported from a Spread Sheet Application like Excel
            </summary>
            <param name="thmxFile">The path to the thmx file</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeManager.Load(System.Xml.XmlDocument)">
            <summary>
            Loads a theme XmlDocument. 
            Overwrites any previously set theme settings.
            </summary>
            <param name="themeXml">The theme xml</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeManager.Load(System.IO.Stream)">
            <summary>
            Loads a .thmx file as a stream. Thmx files are exported from a Spread Sheet Application like Excel
            </summary>
            <param name="thmxStream">The thmx file as a stream</param>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.ExcelThemeOverride">
            <summary>
             Defines a Theme override for a chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelDrawings">
            <summary>
            Collection for Drawing objects.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawings.DrawingXml">
            <summary>
            A reference to the drawing xml document
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.CreateNSM">
            <summary>
            Creates the NamespaceManager. 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawings.Item(System.Int32)">
            <summary>
            Returns the drawing at the specified position.  
            </summary>
            <param name="PositionID">The position of the drawing. 0-base</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawings.Item(System.String)">
            <summary>
            Returns the drawing matching the specified name
            </summary>
            <param name="Name">The name of the worksheet</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawings.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawings.UriDrawing">
            <summary>
            The uri to the drawing xml file inside the package
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddChart(System.String,OfficeOpenXml.Drawing.Chart.eChartType,OfficeOpenXml.Table.PivotTable.ExcelPivotTable,OfficeOpenXml.Drawing.eEditAs)">
            <summary>
            Adds a new chart to the worksheet.
            Stock charts cannot be added by this method. See <see cref="M:OfficeOpenXml.Drawing.ExcelDrawings.AddStockChart(System.String,OfficeOpenXml.Drawing.Chart.eStockChartType,OfficeOpenXml.ExcelRangeBase)"/>
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <param name="PivotTableSource">The pivottable source for a pivotchart</param>
            <param name="DrawingType">The top element drawingtype. Default is OneCellAnchor for Pictures and TwoCellAnchor from Charts and Shapes</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddChart(System.String,OfficeOpenXml.Drawing.Chart.eChartType)">
            <summary>
            Adds a new chart to the worksheet.
            Do not support Stock charts . 
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddExtendedChart(System.String,OfficeOpenXml.Drawing.Chart.eChartExType)">
            <summary>
            Adds a new chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddSunburstChart(System.String)">
            <summary>
            Adds a new sunburst chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddTreemapChart(System.String)">
            <summary>
            Adds a new treemap chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddBoxWhiskerChart(System.String)">
            <summary>
            Adds a new box &amp; whisker chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddHistogramChart(System.String,System.Boolean)">
            <summary>
            Adds a new Histogram or Pareto chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="AddParetoLine">If true a pareto line is added to the chart. The <see cref="P:OfficeOpenXml.Drawing.Chart.ExcelChart.ChartType"/> will also be Pareto.</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddWaterfallChart(System.String)">
            <summary>
            Adds a waterfall chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddFunnelChart(System.String)">
            <summary>
            Adds a funnel chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddRegionMapChart(System.String)">
            <summary>
            Adds a region map chart to the worksheet.
            Note that EPPlus rely on the spreadsheet application to create the geocache data
            </summary>
            <param name="Name"></param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddExtendedChart(System.String,OfficeOpenXml.Drawing.Chart.eChartExType,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Adds a new extended chart to the worksheet.
            Extended charts are 
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <param name="PivotTableSource">The pivottable source for a pivotchart</param>    
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddStockChart(System.String,OfficeOpenXml.Drawing.Chart.eStockChartType,OfficeOpenXml.ExcelRangeBase)">
            <summary>
            Adds a new stock chart to the worksheet.
            Requires a range with four, five or six columns depending on the stock chart type.
            The first column is the category series. 
            The following columns in the range depend on the stock chart type (HLC, OHLC, VHLC, VOHLC).
            </summary>
            <param name="Name"></param>
            <param name="ChartType">The Stock chart type</param>
            <param name="Range">The category serie. A serie containng dates </param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddStockChart(System.String,OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase)">
            <summary>
            Adds a new stock chart to the worksheet.
            The stock chart type will depend on if the parameters OpenSerie and/or VolumeSerie is supplied
            </summary>
            <param name="Name"></param>
            <param name="CategorySerie">The category serie. A serie containng dates </param>
            <param name="HighSerie">The high price serie</param>    
            <param name="LowSerie">The low price serie</param>    
            <param name="CloseSerie">The close price serie containing</param>    
            <param name="OpenSerie">The opening price serie. Supplying this serie will create a StockOHLC or StockVOHLC chart</param>
            <param name="VolumeSerie">The volume represented as a column chart. Supplying this serie will create a StockVHLC or StockVOHLC chart</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddStockChart(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds a new stock chart to the worksheet.
            The stock chart type will depend on if the parameters OpenSerie and/or VolumeSerie is supplied
            </summary>
            <param name="Name"></param>
            <param name="CategorySerie">The category serie. A serie containing dates </param>
            <param name="HighSerie">The high price serie</param>    
            <param name="LowSerie">The low price serie</param>    
            <param name="CloseSerie">The close price serie containing</param>    
            <param name="OpenSerie">The opening price serie. Supplying this serie will create a StockOHLC or StockVOHLC chart</param>
            <param name="VolumeSerie">The volume represented as a column chart. Supplying this serie will create a StockVHLC or StockVOHLC chart</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddLineChart(System.String,OfficeOpenXml.Drawing.Chart.eLineChartType)">
            <summary>
            Add a new linechart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of linechart</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddLineChart(System.String,OfficeOpenXml.Drawing.Chart.eLineChartType,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Adds a new linechart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <param name="PivotTableSource">The pivottable source for a pivotchart</param>    
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddAreaChart(System.String,OfficeOpenXml.Drawing.Chart.eAreaChartType)">
            <summary>
            Add a new area chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of linechart</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddAreaChart(System.String,OfficeOpenXml.Drawing.Chart.eAreaChartType,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Adds a new area chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <param name="PivotTableSource">The pivottable source for a pivotchart</param>    
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddBarChart(System.String,OfficeOpenXml.Drawing.Chart.eBarChartType)">
            <summary>
            Adds a new barchart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of linechart</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddBarChart(System.String,OfficeOpenXml.Drawing.Chart.eBarChartType,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Adds a new column- or bar- chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <param name="PivotTableSource">The pivottable source for a pivotchart</param>    
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddPieChart(System.String,OfficeOpenXml.Drawing.Chart.ePieChartType)">
            <summary>
            Adds a new pie chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <returns>The chart</returns>    
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddPieChart(System.String,OfficeOpenXml.Drawing.Chart.ePieChartType,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Adds a new pie chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <param name="PivotTableSource">The pivottable source for a pivotchart</param>    
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddDoughnutChart(System.String,OfficeOpenXml.Drawing.Chart.eDoughnutChartType,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Adds a new doughnut chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <param name="PivotTableSource">The pivottable source for a pivotchart</param>    
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddDoughnutChart(System.String,OfficeOpenXml.Drawing.Chart.eDoughnutChartType)">
            <summary>
            Adds a new doughnut chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <returns>The chart</returns>    
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddOfPieChart(System.String,OfficeOpenXml.Drawing.Chart.eOfPieChartType)">
            <summary>
            Adds a new line chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <returns>The chart</returns>    
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddOfPieChart(System.String,OfficeOpenXml.Drawing.Chart.eOfPieChartType,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Add a new pie of pie or bar of pie chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <param name="PivotTableSource">The pivottable source for a pivotchart</param>    
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddBubbleChart(System.String,OfficeOpenXml.Drawing.Chart.eBubbleChartType)">
            <summary>
            Adds a new bubble chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <returns>The chart</returns>    
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddBubbleChart(System.String,OfficeOpenXml.Drawing.Chart.eBubbleChartType,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Adds a new bubble chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <param name="PivotTableSource">The pivottable source for a pivotchart</param>    
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddScatterChart(System.String,OfficeOpenXml.Drawing.Chart.eScatterChartType,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Adds a new scatter chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <param name="PivotTableSource">The pivottable source for a pivotchart</param>    
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddScatterChart(System.String,OfficeOpenXml.Drawing.Chart.eScatterChartType)">
            <summary>
            Adds a new scatter chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <returns>The chart</returns>    
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddRadarChart(System.String,OfficeOpenXml.Drawing.Chart.eRadarChartType,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Adds a new radar chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <param name="PivotTableSource">The pivottable source for a pivotchart</param>    
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddRadarChart(System.String,OfficeOpenXml.Drawing.Chart.eRadarChartType)">
            <summary>
            Adds a new radar chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <returns>The chart</returns>    
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddSurfaceChart(System.String,OfficeOpenXml.Drawing.Chart.eSurfaceChartType,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Adds a new surface chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <param name="PivotTableSource">The pivottable source for a pivotchart</param>    
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddSurfaceChart(System.String,OfficeOpenXml.Drawing.Chart.eSurfaceChartType)">
            <summary>
            Adds a new surface chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <returns>The chart</returns>    
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddPicture(System.String,System.IO.FileInfo)">
            <summary>
            Adds a picture to the worksheet
            </summary>
            <param name="Name"></param>
            <param name="ImageFile">The image file</param>
            <returns>A picture object</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddPicture(System.String,System.IO.FileInfo,System.Uri)">
            <summary>
            Adds a picture to the worksheet
            </summary>
            <param name="Name"></param>
            <param name="ImageFile">The image file</param>
            <param name="Hyperlink">Picture Hyperlink</param>
            <returns>A picture object</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddPicture(System.String,System.IO.Stream)">
            <summary>
            Adds a picture to the worksheet using a stream. EPPlus will identify the type of image automatically.
            </summary>
            <param name="Name"></param>
            <param name="PictureStream">An stream image.</param>
            <returns>A picture object</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddPicture(System.String,System.IO.Stream,System.Uri)">
            <summary>
            Adds a picture to the worksheet from a stream. EPPlus will identify the type of image automatically.
            </summary>
            <param name="Name"></param>
            <param name="PictureStream">An stream image.</param>        
            <param name="Hyperlink">The Picture Hyperlink</param>
            <returns>A picture object</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddPicture(System.String,System.IO.Stream,System.Nullable{OfficeOpenXml.Drawing.ePictureType})">
            <summary>
            Adds a picture to the worksheet
            </summary>
            <param name="Name"></param>
            <param name="PictureStream">An stream image.</param>
            <param name="PictureType">The type of image.  A null value means that EPPlus will identify the type of image automatically.</param>
            <returns>A picture object</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddPicture(System.String,System.IO.Stream,System.Nullable{OfficeOpenXml.Drawing.ePictureType},System.Uri)">
            <summary>
            Adds a picture to the worksheet
            </summary>
            <param name="Name"></param>
            <param name="pictureStream">An stream image.</param>
            <param name="pictureType">The type of image. A null value means that EPPlus will identify the type of image automatically.</param>
            <param name="Hyperlink">Picture Hyperlink</param>
            <returns>A picture object</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddPicture(System.String,System.String)">
            <summary>
            Adds a picture to the worksheet
            </summary>
            <param name="Name">The name of the drawing object</param>
            <param name="ImagePath">The path to the image file</param>
            <returns>A picture object</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddPicture(System.String,System.String,OfficeOpenXml.ExcelHyperLink)">
            <summary>
            Adds a picture to the worksheet
            </summary>
            <param name="Name">The name of the drawing object</param>
            <param name="ImagePath">The path to the image file</param>
            <param name="Hyperlink">Picture Hyperlink</param>
            <returns>A picture object</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddChartFromTemplate(System.IO.FileInfo,System.String)">
            <summary>
            Adds a new chart using an crtx template
            </summary>
            <param name="crtxFile">The crtx file</param>
            <param name="name">The name of the chart</param>
            <returns>The new chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddChartFromTemplate(System.IO.FileInfo,System.String,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Adds a new chart using an crtx template
            </summary>
            <param name="crtxFile">The crtx file</param>
            <param name="name">The name of the chart</param>
            <param name="pivotTableSource">Pivot table source, if the chart is a pivottable</param>
            <returns>The new chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddChartFromTemplate(System.IO.Stream,System.String)">
            <summary>
            Adds a new chart using an crtx template
            </summary>
            <param name="crtxStream">The crtx file as a stream</param>
            <param name="name">The name of the chart</param>
            <returns>The new chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddChartFromTemplate(System.IO.Stream,System.String,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Adds a new chart using an crtx template
            </summary>
            <param name="crtxStream">The crtx file as a stream</param>
            <param name="name">The name of the chart</param>
            <param name="pivotTableSource">Pivot table source, if the chart is a pivottable</param>
            <returns>The new chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddShape(System.String,OfficeOpenXml.Drawing.eShapeStyle)">
            <summary>
            Adds a new shape to the worksheet
            </summary>
            <param name="Name">Name</param>
            <param name="Style">Shape style</param>
            <returns>The shape object</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddTableSlicer(OfficeOpenXml.Table.ExcelTableColumn)">
            <summary>
            Adds a slicer to a table column
            </summary>
            <param name="TableColumn">The table column</param>
            <returns>The slicer drawing</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddPivotTableSlicer(OfficeOpenXml.Table.PivotTable.ExcelPivotTableField)">
            <summary>
            Adds a slicer to a pivot table field
            </summary>
            <param name="Field">The pivot table field</param>
            <returns>The slicer drawing</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddShape(System.String,OfficeOpenXml.Drawing.ExcelShape)">
            <summary>
            Adds a new shape to the worksheet
            </summary>
            <param name="Name">Name</param>
            <param name="Source">Source shape</param>
            <returns>The shape object</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddControl(System.String,OfficeOpenXml.Drawing.Controls.eControlType)">
            <summary>
            Adds a form control to the worksheet
            </summary>
            <param name="Name">The name</param>
            <param name="ControlType">The type of control</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Chart sheets cannot have controls</exception>
            <exception cref="T:System.ArgumentException">Drawing names must be unique</exception>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddButtonControl(System.String)">
            <summary>
            Adds a button form control to the worksheet
            </summary>
            <param name="Name">The name of the button</param>
            <returns>The button form control</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddCheckBoxControl(System.String)">
            <summary>
            Adds a checkbox form control to the worksheet
            </summary>
            <param name="Name">The name of the checkbox control</param>
            <returns>The checkbox form control</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddRadioButtonControl(System.String)">
            <summary>
            Adds a radio button form control to the worksheet
            </summary>
            <param name="Name">The name of the radio button control</param>
            <returns>The radio button form control</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddListBoxControl(System.String)">
            <summary>
            Adds a list box form control to the worksheet
            </summary>
            <param name="Name">The name of the list box control</param>
            <returns>The list box form control</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddDropDownControl(System.String)">
            <summary>
            Adds a drop-down form control to the worksheet
            </summary>
            <param name="Name">The name of the drop-down control</param>
            <returns>The drop-down form control</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddGroupBoxControl(System.String)">
            <summary>
            Adds a group box form control to the worksheet
            </summary>
            <param name="Name">The name of the group box control</param>
            <returns>The group box form control</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddLabelControl(System.String)">
            <summary>
            Adds a label form control to the worksheet
            </summary>
            <param name="Name">The name of the label control</param>
            <returns>The label form control</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddSpinButtonControl(System.String)">
            <summary>
            Adds a spin button control to the worksheet
            </summary>
            <param name="Name">The name of the spin button control</param>
            <returns>The spin button form control</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddScrollBarControl(System.String)">
            <summary>
            Adds a scroll bar control to the worksheet
            </summary>
            <param name="Name">The name of the scroll bar control</param>
            <returns>The scroll bar form control</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.Remove(System.Int32)">
            <summary>
            Removes a drawing.
            </summary>
            <param name="Index">The index of the drawing</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.Remove(OfficeOpenXml.Drawing.ExcelDrawing)">
            <summary>
            Removes a drawing.
            </summary>
            <param name="Drawing">The drawing</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.Remove(System.String)">
            <summary>
            Removes a drawing.
            </summary>
            <param name="Name">The name of the drawing</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.Clear">
            <summary>
            Removes all drawings from the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelDrawingSize">
            <summary>
            The size of the drawing 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingSize.Height">
            <summary>
            Column Offset
            
            EMU units   1cm         =   1/360000 
                        1US inch    =   1/914400
                        1pixel      =   1/9525
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingSize.Width">
            <summary>
            Row Offset
            
            EMU units   1cm         =   1/360000 
                        1US inch    =   1/914400
                        1pixel      =   1/9525
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelDrawingSphereCoordinate">
            <summary>
            A coordinate in 3D space.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ExcelDrawingSphereCoordinate._path">
            <summary>
            XPath 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingSphereCoordinate.Latitude">
            <summary>
            The latitude value of the rotation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingSphereCoordinate.Longitude">
            <summary>
            The longitude value of the rotation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingSphereCoordinate.Revolution">
            <summary>
            The revolution around the central axis in the rotation
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawingSphereCoordinate.InitXml">
            <summary>
            All values are required, so init them on any set.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelDrawingsGroup">
            <summary>
            A collection of child drawings to a group drawing
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawingsGroup.Add(OfficeOpenXml.Drawing.ExcelDrawing)">
            <summary>
            Adds a drawing to the group
            </summary>
            <param name="drawing"></param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawingsGroup.Dispose">
            <summary>
            Disposes the class
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingsGroup.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingsGroup.Item(System.Int32)">
            <summary>
            Returns the drawing at the specified position.  
            </summary>
            <param name="PositionID">The position of the drawing. 0-base</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingsGroup.Item(System.String)">
            <summary>
            Returns the drawing matching the specified name
            </summary>
            <param name="Name">The name of the worksheet</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawingsGroup.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawingsGroup.Remove(OfficeOpenXml.Drawing.ExcelDrawing)">
            <summary>
            Removes the <see cref="T:OfficeOpenXml.Drawing.ExcelDrawing"/> from the group
            </summary>
            <param name="drawing">The drawing to remove</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawingsGroup.Clear">
            <summary>
            Removes all children drawings from the group.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelGroupShape">
            <summary>
            Grouped shapes
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelGroupShape.Drawings">
            <summary>
            A collection of shapes
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelGroupShape.DrawingType">
            <summary>
            The type of drawing
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelImage">
            <summary>
            Represents an image 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelImage.#ctor">
            <summary>
            Creates an ExcelImage to be used as template for adding images.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelImage.#ctor(System.String)">
            <summary>
            Creates an ExcelImage to be used as template for adding images.
            </summary>
            <param name="imagePath">A path to the image file to load</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelImage.#ctor(System.IO.FileInfo)">
            <summary>
            Creates an ExcelImage to be used as template for adding images.
            </summary>
            <param name="imageFile">A FileInfo referencing the image file to load</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelImage.#ctor(System.IO.Stream,OfficeOpenXml.Drawing.ePictureType)">
            <summary>
            Creates an ExcelImage to be used as template for adding images.
            </summary>
            <param name="imageStream">The stream containing the image</param>
            <param name="pictureType">The type of image loaded in the stream</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelImage.#ctor(System.Byte[],OfficeOpenXml.Drawing.ePictureType)">
            <summary>
            Creates an ExcelImage to be used as template for adding images.
            </summary>
            <param name="imageBytes">The image as a byte array</param>
            <param name="pictureType">The type of image loaded in the stream</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelImage.HasImage">
            <summary>
            If this object contains an image.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelImage.Type">
            <summary>
            The type of image.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelImage.ImageBytes">
            <summary>
            The image as a byte array.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelImage.Bounds">
            <summary>
            The image bounds and resolution
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelImage.SetImage(System.String)">
            <summary>
            Sets a new image. 
            </summary>
            <param name="imagePath">The path to the image file.</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelImage.SetImage(System.IO.FileInfo)">
            <summary>
            Sets a new image. 
            </summary>
            <param name="imageFile">The image file.</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelImage.SetImage(System.Byte[],OfficeOpenXml.Drawing.ePictureType)">
            <summary>
            Sets a new image. 
            </summary>
            <param name="imageBytes">The image as a byte array.</param>
            <param name="pictureType">The type of image.</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelImage.SetImage(OfficeOpenXml.Drawing.ExcelImage)">
            <summary>
            Sets a new image. 
            </summary>
            <param name="image">The image object to use.</param>
            <seealso cref="T:OfficeOpenXml.Drawing.ExcelImage"/>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelImage.SetImage(System.IO.Stream,OfficeOpenXml.Drawing.ePictureType)">
            <summary>
            Sets a new image. 
            </summary>
            <param name="imageStream">The stream containing the image.</param>
            <param name="pictureType">The type of image.</param>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelImageInfo">
            <summary>
            Information about the content, type, bounds and resolution of an image.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelImageInfo.Width">
            <summary>
            The width of the image
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelImageInfo.Height">
            <summary>
            The height of the image
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelImageInfo.HorizontalResolution">
            <summary>
            The horizontal resolution of the image
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelImageInfo.VerticalResolution">
            <summary>
            The vertical resolution of the image
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelPicture">
            <summary>
            An image object
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelPicture.DrawingType">
            <summary>
            The type of drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelPicture.Image">
            <summary>
            The image
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelPicture.SetSize(System.Int32)">
            <summary>
            Set the size of the image in percent from the orginal size
            Note that resizing columns / rows after using this function will effect the size of the picture
            </summary>
            <param name="Percent">Percent</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelPicture.Fill">
            <summary>
            Access to Fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelPicture.Border">
            <summary>
            Access to Fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelPicture.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelPicture.PreferRelativeResize">
            <summary>
            Relative to original picture size
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelPicture.LockAspectRatio">
            <summary>
            Lock aspect ratio
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelPicture.Dispose">
            <summary>
            Dispose the object
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelPosition">
            <summary>
            Position of the a drawing.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelPosition.Column">
            <summary>
            The column
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelPosition.Row">
            <summary>
            The row
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelPosition.ColumnOff">
            <summary>
            Column Offset in EMU
            ss
            EMU units   1cm         =   1/360000 
                        1US inch    =   1/914400
                        1pixel      =   1/9525
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelPosition.RowOff">
            <summary>
            Row Offset in EMU
            
            EMU units   1cm         =   1/360000 
                        1US inch    =   1/914400
                        1pixel      =   1/9525
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelShape">
            <summary>
            An Excel shape.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelShapeBase">
            <summary>
            Base class for drawing-shape objects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.DrawingType">
            <summary>
            The type of drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.Style">
            <summary>
            Shape style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.Fill">
            <summary>
            Access Fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.Border">
            <summary>
            Access to Border propesties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.Effect">
            <summary>
            Drawing effect properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.ThreeD">
            <summary>
            Defines 3D properties to apply to an object
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.HeadEnd">
            <summary>
            Head line end
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.TailEnd">
            <summary>
            Tail line end
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.Font">
            <summary>
            Font properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.Text">
            <summary>
            Text inside the shape
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.LockText">
            <summary>
            Lock drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.RichText">
            <summary>
            Richtext collection. Used to format specific parts of the text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.TextAnchoring">
            <summary>
            Text Anchoring
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.TextAnchoringControl">
            <summary>
            The centering of the text box.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.TextAlignment">
            <summary>
            How the text is aligned
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.Indent">
            <summary>
            Indentation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.TextVertical">
            <summary>
            Vertical text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.TextBody">
            <summary>
            Access to text body properties.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelSlicerAsType">
            <summary>
            Provides easy type cast for slicer drawings.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelSlicerAsType.TableSlicer">
            <summary>
            Returns the drawing as table slicer . 
            If this drawing is not a table slicer, null will be returned
            </summary>
            <returns>The drawing as a table slicer</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelSlicerAsType.PivotTableSlicer">
            <summary>
            Returns the drawing as pivot table slicer . 
            If this drawing is not a pivot table slicer, null will be returned
            </summary>
            <returns>The drawing as a pivot table slicer</returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelView3D">
            <summary>
            3D settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelView3D.Perspective">
            <summary>
            Degree of perspective 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelView3D.RotX">
            <summary>
            Rotation X-axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelView3D.RotY">
            <summary>
            Rotation Y-axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelView3D.RightAngleAxes">
            <summary>
            Right Angle Axes
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelView3D.DepthPercent">
            <summary>
            Depth % of base
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelView3D.HeightPercent">
            <summary>
            Height % of base
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.GenericImageHandler">
            <summary>
            The internal generic handler for image formats used in EPPlus.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.GenericImageHandler.SupportedTypes">
            <summary>
            Supported types by the image handler
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.GenericImageHandler.LastException">
            <summary>
            The last exception that occured when calling <see cref="M:OfficeOpenXml.Drawing.GenericImageHandler.GetImageBounds(System.IO.MemoryStream,OfficeOpenXml.Drawing.ePictureType,System.Double@,System.Double@,System.Double@,System.Double@)"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.GenericImageHandler.GetImageBounds(System.IO.MemoryStream,OfficeOpenXml.Drawing.ePictureType,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Retreives the image bounds and resolution for an image
            </summary>
            <param name="image">The image data</param>
            <param name="type">Type type of image</param>
            <param name="width">The width of the image</param>
            <param name="height">The height of the image</param>
            <param name="horizontalResolution">The horizontal resolution in DPI</param>
            <param name="verticalResolution">The vertical resolution in DPI</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.GenericImageHandler.ValidForEnvironment">
            <summary>
            Returns if the handler is valid for the enviornment. 
            The generic image handler is valid in all environments, so it will always return true.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ImageUtils">
            <summary>
            Only used in .NET framework.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Interfaces.IDrawingDataLabel">
            <summary>
            Interface for handling data labels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Interfaces.IDrawingDataLabel.DataLabel">
            <summary>
            Data labels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Interfaces.IDrawingDataLabel.HasDataLabel">
            <summary>
            If the chart part has data labels
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Interfaces.IDrawingSerieDataLabel">
            <summary>
            Interface for handling data labels on a serie
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Interfaces.IDrawingSerieDataLabel.DataLabel">
            <summary>
            Data labels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Interfaces.IDrawingSerieDataLabel.HasDataLabel">
            <summary>
            If the chart part has data labels
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase">
            <summary>
            Interface to handle styles on a chart part
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase.CreatespPr">
            <summary>
            Create the spPr element within the drawing part if does not exist.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase.Border">
            <summary>
            Border settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase.Effect">
            <summary>
            Effect settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase.Fill">
            <summary>
            Fill settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase.ThreeD">
            <summary>
            3D settings
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Interfaces.IDrawingStyle">
            <summary>
            Interface to handle font styles on a chart part
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Interfaces.IDrawingStyle.Font">
            <summary>
            Font settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Interfaces.IDrawingStyle.TextBody">
            <summary>
            Text body settings
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicer">
            <summary>
            Represents a pivot table slicer drawing object.
            A pivot table slicer is attached to a pivot table fields item filter.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerCache">
            <summary>
            Represents a pivot table slicer cache.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerCache.Init(OfficeOpenXml.ExcelWorkbook)">
            <summary>
            Init must be called before accessing any properties as it sets several properties.
            </summary>
            <param name="wb"></param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerCache.SourceType">
            <summary>
            The source type of the slicer
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerCache.PivotTables">
            <summary>
            A collection of pivot tables attached to the slicer cache.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerCache.Data">
            <summary>
            Tabular data for a pivot table slicer cache.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerCacheTabularData">
            <summary>
            Tabular data for a pivot table slicer cache.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerCacheTabularData.CrossFilter">
            <summary>
            How the items that are used in slicer cross filtering are displayed
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerCacheTabularData.SortOrder">
            <summary>
            How the table slicer items are sorted
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerCacheTabularData.CustomListSort">
            <summary>
            If custom lists are used when sorting the items
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerCacheTabularData.ShowMissing">
            <summary>
            If the source pivottable has been deleted.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerCacheTabularData.Items">
            <summary>
            The items of the slicer. 
            Note that the sort order of this collection is the same as the pivot table field items, not the sortorder of the slicer.
            Showing/hiding items are reflects to the pivot table(s) field items collection.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerCacheTabularData.PivotCacheId">
            <summary>
            The pivot table cache id
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerItem">
            <summary>
            Represents a pivot table slicer item.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerItem.Value">
            <summary>
            The value of the item
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerItem.Hidden">
            <summary>
            If the value is hidden 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerItemCollection">
            <summary>
            A collection of items in a pivot table slicer.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerItemCollection.Refresh">
            <summary>
            Refresh the items from the shared items or the group items.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerItemCollection.GetEnumerator">
            <summary>
            Get the enumerator for the collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerItemCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator for the collection
            </summary>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerItemCollection.Count">
            <summary>
            Number of items in the collection.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerItemCollection.Item(System.Int32)">
            <summary>
            Get the value at the specific position in the collection
            </summary>
            <param name="index">The position</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerItemCollection.GetByValue(System.Object)">
            <summary>
            Get the item with supplied value.
            </summary>
            <param name="value">The value</param>
            <returns>The item matching the supplied value. Returns null if no value matches.</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerItemCollection.GetIndexByValue(System.Object)">
            <summary>
            Get the index of the item with supplied value.
            </summary>
            <param name="value">The value</param>
            <returns>The item matching the supplied value. Returns -1 if no value matches.</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerItemCollection.Contains(System.Object)">
            <summary>
            It the object exists in the cache
            </summary>
            <param name="value">The object to check for existance</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1">
            <summary>
            Base class for table and pivot table slicers.
            </summary>
            <typeparam name="T">The slicer cache data type</typeparam>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1.DrawingType">
            <summary>
            The type of drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1.Caption">
            <summary>
            The caption text of the slicer.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1.ShowCaption">
            <summary>
            If the caption of the slicer is visible.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1.SlicerName">
            <summary>
            The the name of the slicer.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1.RowHeight">
            <summary>
            Row height in points
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1.StartItem">
            <summary>
            The index of the starting item in the slicer. Default is 0.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1.ColumnCount">
            <summary>
            Number of columns. Default is 1.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1.LockedPosition">
            <summary>
            If the slicer view is locked or not.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1.Style">
            <summary>
            The build in slicer style.
            If set to Custom, the name in the <see cref="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1.StyleName" /> is used 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1.StyleName">
            <summary>
            The style name used for the slicer.
            <seealso cref="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1.Style"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1.Cache">
            <summary>
            A reference to the slicer cache.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Slicer.ExcelSlicerCache">
            <summary>
            Base class for table and pivot table slicer caches
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicerCache.SlicerCacheXml">
            <summary>
            The slicer cache xml document
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicerCache.Name">
            <summary>
            The name of the slicer cache
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicerCache.SourceName">
            <summary>
            The name of the source field or column.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicerCache.SourceType">
            <summary>
            The source of the slicer.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Slicer.ExcelSlicerPivotTableCollection">
            <summary>
            A collection of pivot tables attached to a slicer 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Slicer.ExcelSlicerPivotTableCollection.GetEnumerator">
            <summary>
            Get an Enumerator for the collection.
            </summary>
            <returns>The Enumerator</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Slicer.ExcelSlicerPivotTableCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an Enumerator for the collection.
            </summary>
            <returns>The Enumerator</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicerPivotTableCollection.Item(System.Int32)">
            <summary>
            The indexer for the collection
            </summary>
            <param name="index">The index</param>
            <returns>The pivot table at the specified index</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Slicer.ExcelSlicerPivotTableCollection.Add(OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Adds a new pivot table to the collection. All pivot table in this collection must share the same cache.
            </summary>
            <param name="pivotTable">The pivot table to add</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicerPivotTableCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Slicer.ExcelTableSlicer">
            <summary>
            Represents a table slicer drawing object.
            A table slicer is attached to a table column value filter.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelTableSlicer.TableColumn">
            <summary>
            The table column that the slicer is connected to.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelTableSlicer.FilterValues">
            <summary>
            The value filters for the slicer. This is the same filter as the filter for the table.
            This filter is a value filter.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Slicer.ExcelTableSlicerCache">
            <summary>
            Represents a slicer cache with a table as source
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelTableSlicerCache.SourceType">
            <summary>
            The source type for the slicer cache
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelTableSlicerCache.TableColumn">
            <summary>
            The table column that is the source for the slicer
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelTableSlicerCache.SortOrder">
            <summary>
            How the table slicer items are sorted
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelTableSlicerCache.CrossFilter">
            <summary>
            How the items that are used in slicer cross filtering are displayed
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelTableSlicerCache.CustomListSort">
            <summary>
            If custom lists are used when sorting the items
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelTableSlicerCache.HideItemsWithNoData">
            <summary>
            If true, items that have no data are not displayed
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerNamedStyle">
            <summary>
            A named table style that applies to tables only
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerNamedStyle.Name">
            <summary>
            The name of the table named style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerNamedStyle.WholeTable">
            <summary>
            Applies to the entire content of a table or pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerNamedStyle.HeaderRow">
            <summary>
            Applies to the header row of a table or pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerNamedStyle.SelectedItemWithData">
            <summary>
            Applies to slicer item that is selected
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerNamedStyle.SelectedItemWithNoData">
            <summary>
            Applies to a select slicer item with no data.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerNamedStyle.UnselectedItemWithData">
            <summary>
            Applies to a slicer item with data that is not selected
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerNamedStyle.UnselectedItemWithNoData">
            <summary>
            Applies to a slicer item with no data that is not selected
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerNamedStyle.HoveredSelectedItemWithData">
            <summary>
            Applies to a selected slicer item with data and over which the mouse is paused on
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerNamedStyle.HoveredSelectedItemWithNoData">
            <summary>
            Applies to a selected slicer item with no data and over which the mouse is paused on
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerNamedStyle.HoveredUnselectedItemWithData">
            <summary>
            Applies to a slicer item with data that is not selected and over which the mouse is paused on
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerNamedStyle.HoveredUnselectedItemWithNoData">
            <summary>
            Applies to a selected slicer item with no data and over which the mouse is paused on
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerStyleElement">
            <summary>
            A style element for a custom slicer style 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerStyleElement.Style">
            <summary>
            Access to style settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerStyleElement.Type">
            <summary>
            The type of the slicer element that this style is applied to.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Slicer.Style.eSlicerStyleElement">
            <summary>
            A type specifing the type of style element for a named custom slicer style.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Slicer.Style.eSlicerStyleElement.UnselectedItemWithData">
            <summary>
            Styles a slicer item with data that is not selected
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Slicer.Style.eSlicerStyleElement.SelectedItemWithData">
            <summary>
            Styles a slicer item that is selected
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Slicer.Style.eSlicerStyleElement.UnselectedItemWithNoData">
            <summary>
            Styles a slicer item with no data that is not selected
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Slicer.Style.eSlicerStyleElement.SelectedItemWithNoData">
            <summary>
            Styles a select slicer item with no data.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Slicer.Style.eSlicerStyleElement.HoveredUnselectedItemWithData">
            <summary>
            Styles a slicer item with data that is not selected and over which the mouse is paused on
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Slicer.Style.eSlicerStyleElement.HoveredSelectedItemWithData">
            <summary>
            Styles a selected slicer item with data and over which the mouse is paused on
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Slicer.Style.eSlicerStyleElement.HoveredUnselectedItemWithNoData">
            <summary>
            Styles a slicer item with no data that is not selected and over which the mouse is paused on
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Slicer.Style.eSlicerStyleElement.HoveredSelectedItemWithNoData">
            <summary>
            Styles a selected slicer item with no data and over which the mouse is paused on
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformDataType">
            <summary>
            Datatypes for color transformation types
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformDataType.Percentage">
            <summary>
            Percentage
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformDataType.PositivePercentage">
            <summary>
            Positive percentage
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformDataType.FixedPercentage">
            <summary>
            Fixed percentage
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformDataType.FixedPositivePercentage">
            <summary>
            Fixed positive percentage
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformDataType.Angle">
            <summary>
            An angel 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformDataType.FixedAngle90">
            <summary>
            Fixed angle, ranges from -90 to 90   
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformDataType.Boolean">
            <summary>
            A booleans
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType">
            <summary>
            Type of color transformation.
            See OOXML documentation section 20.1.2.3 for more detailed information.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.Tint">
            <summary>
            A lighter version of its input color.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.Shade">
            <summary>
            A darker version of its input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.Comp">
            <summary>
            The color rendered should be the complement of its input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.Inv">
            <summary>
            The inverse of its input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.Gray">
            <summary>
            A grayscale of its input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.Alpha">
            <summary>
            Apply an opacity to the input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.AlphaOff">
            <summary>
            Apply a more or less opaque version of the input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.AlphaMod">
            <summary>
            The opacity as expressed by a percentage offset increase or decrease of the input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.Hue">
            <summary>
            Sets the hue
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.HueOff">
            <summary>
            The input color with its hue shifted
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.HueMod">
            <summary>
            The input color with its hue modulated by the given percentage
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.Sat">
            <summary>
            Sets the saturation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.SatOff">
            <summary>
            The saturation as expressed by a percentage offset increase or decrease of the input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.SatMod">
            <summary>
            The saturation as expressed by a percentage relative to the input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.Lum">
            <summary>
            Sets the luminance
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.LumOff">
            <summary>
            The luminance as expressed by a percentage offset increase or decrease of the input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.LumMod">
            <summary>
            The luminance as expressed by a percentage relative to the input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.Red">
            <summary>
            Sets the red component
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.RedOff">
            <summary>
            The red component as expressed by a percentage offset increase or decrease of the input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.RedMod">
            <summary>
            The red component as expressed by a percentage relative to the input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.Green">
            <summary>
            Sets the green component
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.GreenOff">
            <summary>
            The green component as expressed by a percentage offset increase or decrease of the input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.GreenMod">
            <summary>
            The green component as expressed by a percentage relative to the input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.Blue">
            <summary>
            Sets the blue component
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.BlueOff">
            <summary>
            The blue component as expressed by a percentage offset increase or decrease to the input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.BlueMod">
            <summary>
            The blue component as expressed by a percentage relative to the input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.Gamma">
            <summary>
            Gamma shift of the input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.InvGamma">
            <summary>
            Inverse gamma shift of the input color
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection">
            <summary>
            Color transformation 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.#ctor">
            <summary>
            For internal transformation calculations only. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.Item(System.Int32)">
            <summary>
            Indexer for the colletion
            </summary>
            <param name="index">The position in the list</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.Clear">
            <summary>
            Clear all items
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.RemoveAt(System.Int32)">
            <summary>
            Remote item at a specific position
            </summary>
            <param name="index">The postion in the list</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.Remove(OfficeOpenXml.Drawing.Style.Coloring.IColorTransformItem)">
            <summary>
            Removes the specific item
            </summary>
            <param name="item">The item to remove</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.RemoveOfType(OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType)">
            <summary>
            Remove all items of a specific type
            </summary>
            <param name="type">The transformation type</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddAlpha(System.Double)">
            <summary>
            The opacity as expressed by a percentage value
            Alpha equals 100-Transparancy
            </summary>
            <param name="value">The alpha value in percentage 0-100</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddAlphaModulation(System.Double)">
            <summary>
            Specifies a more or less opaque version of its input color
            Alpha equals 100-Transparancy
            </summary>
            <param name="value">The alpha modulation in a positive percentage</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddAlphaOffset(System.Double)">
            <summary>
            Adds an alpha offset value. 
            </summary>
            <param name="value">The tint percentage. From 0-100</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddHue(System.Double)">
            <summary>
            Specifies the input color with the specified hue, but with its saturation and luminance unchanged
            </summary>
            <param name="value">The hue angle from 0-360</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddHueModulation(System.Double)">
            <summary>
            Specifies the hue as expressed by a percentage relative to the input color
            </summary>
            <param name="value">The hue modulation in a positive percentage</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddHueOffset(System.Double)">
            <summary>
            Specifies the actual angular value of the shift. The result of the shift shall be between 0 and 360 degrees.Shifts resulting in angular values less than 0 are treated as 0. 
            Shifts resulting in angular values greater than 360 are treated as 360.
            </summary>
            <param name="value">The hue offset value.</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddSaturation(System.Double)">
            <summary>
            Specifies the input color with the specified saturation, but with its hue and luminance unchanged
            </summary>
            <param name="value">The saturation percentage from 0-100</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddSaturationModulation(System.Double)">
            <summary>
            Specifies the saturation as expressed by a percentage relative to the input color
            </summary>
            <param name="value">The saturation modulation in a positive percentage</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddSaturationOffset(System.Double)">
            <summary>
            Specifies the saturation as expressed by a percentage offset increase or decrease to the input color.
            Increases never increase the saturation beyond 100%, decreases never decrease the saturation below 0%.
            </summary>
            <param name="value">The saturation offset value</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddLuminance(System.Double)">
            <summary>
            Specifies the input color with the specified luminance, but with its hue and saturation unchanged
            </summary>
            <param name="value">The luminance percentage from 0-100</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddLuminanceModulation(System.Double)">
            <summary>
            Specifies the luminance as expressed by a percentage relative to the input color
            </summary>
            <param name="value">The luminance modulation in a positive percentage</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddLuminanceOffset(System.Double)">
            <summary>
            Specifies the luminance as expressed by a percentage offset increase or decrease to the input color.
            Increases never increase the luminance beyond 100%, decreases never decrease the saturation below 0%.
            </summary>
            <param name="value">The luminance offset value</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddRed(System.Double)">
            <summary>
            Specifies the input color with the specific red component
            </summary>
            <param name="value">The red value</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddRedModulation(System.Double)">
            <summary>
            Specifies the red component as expressed by a percentage relative to the input color component
            </summary>
            <param name="value">The red modulation value</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddRedOffset(System.Double)">
            <summary>
            Specifies the red component as expressed by a percentage offset increase or decrease to the input color component
            </summary>
            <param name="value">The red offset value.</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddGreen(System.Double)">
            <summary>
            Specifies the input color with the specific green component
            </summary>
            <param name="value">The green value</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddGreenModulation(System.Double)">
            <summary>
            Specifies the green component as expressed by a percentage relative to the input color component
            </summary>
            <param name="value">The green modulation value</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddGreenOffset(System.Double)">
            <summary>
            Specifies the green component as expressed by a percentage offset increase or decrease to the input color component
            </summary>
            <param name="value">The green offset value.</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddBlue(System.Double)">
            <summary>
            Specifies the input color with the specific blue component
            </summary>
            <param name="value">The blue value</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddBlueModulation(System.Double)">
            <summary>
            Specifies the blue component as expressed by a percentage relative to the input color component
            </summary>
            <param name="value">The blue modulation value</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddBlueOffset(System.Double)">
            <summary>
            Specifies the blue component as expressed by a percentage offset increase or decrease to the input color component
            </summary>
            <param name="value">The blue offset value.</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddTint(System.Double)">
            <summary>
            Specifies a lighter version of its input color
            </summary>
            <param name="value">The tint value in percentage 0-100</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddShade(System.Double)">
            <summary>
            Specifies a lighter version of its input color
            </summary>
            <param name="value">The tint value in percentage 0-100</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddComplement">
            <summary>
            Specifies that the color rendered should be the complement of its input color with the complement being defined as such.
            Two colors are called complementary if, when mixed they produce a shade of grey.For instance, the complement of red which is RGB (255, 0, 0) is cyan which is RGB(0, 255, 255)
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddGamma">
            <summary>
            Specifies that the output color rendered by the generating application should be the sRGB gamma shift of the input color.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddGray">
            <summary>
            Specifies a grayscale of its input color, taking into relative intensities of the red, green, and blue primaries.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddInverse">
            <summary>
            Specifies the inverse of its input color
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddInverseGamma">
            <summary>
            Specifies that the output color rendered by the generating application should be the inverse sRGB gamma shift of the input color
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformItem">
            <summary>
            Different types of transformation performed on a color 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformItem.Type">
            <summary>
            The type of transformation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformItem.DataType">
            <summary>
            Datatype for color transformation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformItem.Value">
            <summary>
            The value of the color tranformation
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformItem.ToString">
            <summary>
            Converts the object to a string
            </summary>
            <returns>The type</returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformSimpleItem">
            <summary>
            A tranformation operation for a color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformSimpleItem.Type">
            <summary>
            Type of tranformation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformSimpleItem.DataType">
            <summary>
            The datatype of the value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformSimpleItem.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingColorManager">
            <summary>
            Handles colors for drawings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingColorManager.SchemeColor">
            <summary>
            If <c>type</c> is set to SchemeColor, then this property contains the scheme color
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingColorManager.SetSchemeColor(OfficeOpenXml.Drawing.eSchemeColor)">
            <summary>
            Set the color to a scheme color
            </summary>
            <param name="schemeColor">The scheme color</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingColorManager.ResetColors(System.String)">
            <summary>
            Reset the colors on the object
            </summary>
            <param name="newNodeName">The new color new name</param>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingHslColor">
            <summary>
            Represents a HSL color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingHslColor.Hue">
            <summary>
            The hue angle in degrees.
            Ranges from 0 to 360
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingHslColor.Saturation">
            <summary>
            The saturation percentage
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingHslColor.Luminance">
            <summary>
            The luminance percentage
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingPresetColor">
            <summary>
            Represents a preset color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingPresetColor.Color">
            <summary>
            The preset color
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingRgbColor">
            <summary>
            Represents a RGB color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingRgbColor.Color">
            <summary>
            The color
            </summary>s
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingRgbPercentageColor">
            <summary>
            A color using the red, green, blue RGB color model.
            Each component, red, green, and blue is expressed as a percentage from 0% to 100%.
            A linear gamma of 1.0 is assumed
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingRgbPercentageColor.RedPercentage">
            <summary>
            The percentage of red.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingRgbPercentageColor.GreenPercentage">
            <summary>
            The percentage of green.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingRgbPercentageColor.BluePercentage">
            <summary>
            The percentage of blue.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingSchemeColor">
            <summary>
            Represents a scheme color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingSchemeColor.Color">
            <summary>
            The scheme color
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingSystemColor">
            <summary>
            Represents a system color
            </summary>s
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingSystemColor.Color">
            <summary>
            The system color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingSystemColor.LastColor">
            <summary>
            Last color computed. 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager">
            <summary>
            Manages colors in a theme 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager._nameSpaceManager">
            <summary>
            Namespace manager
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager._topNode">
            <summary>
            The top node
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager._pathNode">
            <summary>
            The node of the supplied path
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager._colorNode">
            <summary>
            The node of the color object
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager._initMethod">
            <summary>
            Init method
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager._path">
            <summary>
            The x-path
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager._schemaNodeOrder">
            <summary>
            Order of the elements according to the xml schema
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.ColorType">
            <summary>
            The type of color.
            Each type has it's own property and set-method.       
            <see cref="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.SetRgbColor(System.Drawing.Color,System.Boolean)"/>
            <see cref="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.SetRgbPercentageColor(System.Double,System.Double,System.Double)"/>
            <see cref="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.SetHslColor(System.Double,System.Double,System.Double)" />
            <see cref="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.SetPresetColor(System.Drawing.Color)"/>
            <see cref="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.SetPresetColor(OfficeOpenXml.Drawing.ePresetColor)"/>
            <see cref="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.SetSystemColor(OfficeOpenXml.Drawing.eSystemColor)"/>
            <see cref="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingColorManager.SetSchemeColor(OfficeOpenXml.Drawing.eSchemeColor)"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.Transforms">
            <summary>
            Color transformations
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.RgbColor">
            <summary>
            A rgb color.
            This property has a value when Type is set to Rgb
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.RgbPercentageColor">
            <summary>
            A rgb precentage color.
            This property has a value when Type is set to RgbPercentage
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.HslColor">
            <summary>
            A hsl color.
            This property has a value when Type is set to Hsl
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.PresetColor">
            <summary>
            A preset color.
            This property has a value when Type is set to Preset
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.SystemColor">
            <summary>
            A system color.
            This property has a value when Type is set to System
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.SetRgbColor(System.Drawing.Color,System.Boolean)">
            <summary>
            Sets a rgb color.
            </summary>
            <param name="color">The color</param>
            <param name="setAlpha">Apply the alpha part of the Color to the <see cref="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.Transforms"/> collection</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.SetRgbPercentageColor(System.Double,System.Double,System.Double)">
            <summary>
            Sets a rgb precentage color
            </summary>
            <param name="redPercentage">Red percentage</param>
            <param name="greenPercentage">Green percentage</param>
            <param name="bluePercentage">Bluepercentage</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.SetHslColor(System.Double,System.Double,System.Double)">
            <summary>
            Sets a hsl color
            </summary>
            <param name="hue">The hue angle. From 0-360</param>
            <param name="saturation">The saturation percentage. From 0-100</param>
            <param name="luminance">The luminance percentage. From 0-100</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.SetPresetColor(System.Drawing.Color)">
            <summary>
            Sets a preset color.
            Must be a named color. Can't be color.Empty.
            </summary>
            <param name="color">Color</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.SetPresetColor(OfficeOpenXml.Drawing.ePresetColor)">
            <summary>
            Sets a preset color.
            </summary>
            <param name="presetColor">The color</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.SetSystemColor(OfficeOpenXml.Drawing.eSystemColor)">
            <summary>
            Sets a system color
            </summary>
            <param name="systemColor">The colors</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.ResetColors(System.String)">
            <summary>
            Reset the color objects
            </summary>
            <param name="newNodeName">The new color node name</param>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Coloring.IColorTransformItem">
            <summary>
            Color transformation item
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.IColorTransformItem.Type">
            <summary>
            Type of tranformation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.IColorTransformItem.DataType">
            <summary>
            Datetype of the value property
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.IColorTransformItem.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingBlurEffect">
            <summary>
            A blur effect that is applied to the shape, including its fill
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingBlurEffect.Radius">
            <summary>
            The radius of blur in points
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingBlurEffect.GrowBounds">
            <summary>
            If the bounds of the object will be grown as a result of the blurring.
            Default is true
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingColorChangeEffect">
            <summary>
            A color change effect
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingColorChangeEffect.ColorFrom">
            <summary>
            The color to transform from
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingColorChangeEffect.ColorTo">
            <summary>
            The color to transform to
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingColorReplaceEffect">
            <summary>
            A color change effect
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingColorReplaceEffect.Color">
            <summary>
            The color to replace with
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingDuotoneEffect">
            <summary>
            A Duotune effect
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingDuotoneEffect.Color1">
            <summary>
            The first color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingDuotoneEffect.Color2">
            <summary>
            The second color
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectBase">
            <summary>
            Base class for all drawing effects
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectBase.Delete">
            <summary>
            Completely remove the xml node, resetting the properties to it's default values.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle">
            <summary>
            Effect styles of a drawing object
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.Blur">
            <summary>
            The blur effect
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.FillOverlay">
            <summary>
            The fill overlay effect. A fill overlay can be used to specify an additional fill for a drawing and blend the two together.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.Glow">
            <summary>
            The glow effect. A color blurred outline is added outside the edges of the drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.InnerShadow">
            <summary>
            The inner shadow effect. A shadow is applied within the edges of the drawing.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.OuterShadow">
            <summary>
            The outer shadow effect. A shadow is applied outside the edges of the drawing.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.PresetShadow">
            <summary>
            The preset shadow effect.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.Reflection">
            <summary>
            The reflection effect.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.SoftEdgeRadius">
            <summary>
            Soft edge radius. A null value indicates no radius
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.HasInnerShadow">
            <summary>
            If the drawing has any inner shadow properties set
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.HasOuterShadow">
            <summary>
            If the drawing has any outer shadow properties set
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.HasPresetShadow">
            <summary>
            If the drawing has any preset shadow properties set
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.HasBlur">
            <summary>
            If the drawing has any blur properties set
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.HasGlow">
            <summary>
            If the drawing has any glow properties set
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.HasFillOverlay">
            <summary>
            If the drawing has any fill overlay properties set
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.SetPresetSoftEdges(OfficeOpenXml.Drawing.ePresetExcelSoftEdgesType)">
            <summary>
            Set a predefined glow matching the preset types in Excel
            </summary>
            <param name="softEdgesType">The preset type</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.SetPresetGlow(OfficeOpenXml.Drawing.ePresetExcelGlowType)">
            <summary>
            Set a predefined glow matching the preset types in Excel
            </summary>
            <param name="glowType">The preset type</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.SetPresetShadow(OfficeOpenXml.Drawing.ePresetExcelShadowType)">
            <summary>
            Set a predefined shadow matching the preset types in Excel
            </summary>
            <param name="shadowType">The preset type</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.SetPresetReflection(OfficeOpenXml.Drawing.ePresetExcelReflectionType)">
            <summary>
            Set a predefined glow matching the preset types in Excel
            </summary>
            <param name="reflectionType">The preset type</param>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingFillOverlayEffect">
            <summary>
            The fill overlay effect. 
            A fill overlay can be used to specify an additional fill for a drawing and blend the two together.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingFillOverlayEffect.Fill">
            <summary>
            The fill to blend with
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingFillOverlayEffect.Blend">
            <summary>
            How to blend the overlay
            Default is Over
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingFillOverlayEffect.Create">
            <summary>
            Creates a fill overlay with BlendMode = Over
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingFillOverlayEffect.Remove">
            <summary>
            Removes any fill overlay
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingGlowEffect">
            <summary>
            The glow effect, in which a color blurred outline is added outside the edges of the drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingGlowEffect.Color">
            <summary>
            The color of the glow
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingGlowEffect.Radius">
            <summary>
            The radius of the glow in pixels
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingInnerShadowEffect">
            <summary>
            The inner shadow effect. A shadow is applied within the edges of the drawing.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingInnerShadowEffect.BlurRadius">
            <summary>
            The blur radius.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingOuterShadowEffect">
            <summary>
            The outer shadow effect. A shadow is applied outside the edges of the drawing.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingOuterShadowEffect.Alignment">
            <summary>
            The shadow alignment
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingOuterShadowEffect.RotateWithShape">
            <summary>
            If the shadow rotates with the shape
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingOuterShadowEffect.HorizontalSkewAngle">
            <summary>
            Horizontal skew angle.
            Ranges from -90 to 90 degrees 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingOuterShadowEffect.VerticalSkewAngle">
            <summary>
            Vertical skew angle.
            Ranges from -90 to 90 degrees 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingOuterShadowEffect.HorizontalScalingFactor">
            <summary>
            Horizontal scaling factor in percentage.
            A negative value causes a flip.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingOuterShadowEffect.VerticalScalingFactor">
            <summary>
            Vertical scaling factor in percentage.
            A negative value causes a flip.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingPresetShadowEffect">
            <summary>
            A preset shadow types
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingPresetShadowEffect.Type">
            <summary>
            The preset shadow type
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingReflectionEffect">
            <summary>
            The reflection effect
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingReflectionEffect.StartPosition">
            <summary>
            The start position along the alpha gradient ramp of the alpha value.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingReflectionEffect.StartOpacity">
            <summary>
            The starting reflection opacity
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingReflectionEffect.EndPosition">
            <summary>
            The end position along the alpha gradient ramp of the alpha value.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingReflectionEffect.EndOpacity">
            <summary>
            The ending reflection opacity
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingReflectionEffect.FadeDirection">
            <summary>
            The direction to offset the reflection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingReflectionEffect.Alignment">
            <summary>
            Alignment
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingReflectionEffect.RotateWithShape">
            <summary>
            If the shadow rotates with the shape
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingReflectionEffect.HorizontalSkewAngle">
            <summary>
            Horizontal skew angle.
            Ranges from -90 to 90 degrees 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingReflectionEffect.VerticalSkewAngle">
            <summary>
            Vertical skew angle.
            Ranges from -90 to 90 degrees 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingReflectionEffect.HorizontalScalingFactor">
            <summary>
            Horizontal scaling factor in percentage .
            A negative value causes a flip.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingReflectionEffect.VerticalScalingFactor">
            <summary>
            Vertical scaling factor in percentage .
            A negative value causes a flip.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingReflectionEffect.Direction">
            <summary>
            The direction to offset the shadow
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingReflectionEffect.BlurRadius">
            <summary>
            The blur radius.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingShadowEffect">
            <summary>
            The shadow effect applied to a drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingShadowEffect.Color">
            <summary>
            The color of the shadow effect
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingShadowEffect.Direction">
            <summary>
            The direction angle to offset the shadow.
            Ranges from 0 to 360
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingShadowEffect.InitXml">
            <summary>
            Inizialize the xml
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingShadowEffectBase">
            <summary>
            Base class for shadow effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingShadowEffectBase.Distance">
            <summary>
            How far to offset the shadow is in pixels
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.EnumTranslateExtentions">
            <summary>
            This class contains translation between enums and the actual xml values.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipEffects">
            <summary>
            Effects added to a blip fill
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipEffects.AddDuotone">
            <summary>
            Adds a duotone effect 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipEffects.RemoveDuotone">
            <summary>
            Removes a duotone effect.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipEffects.Duotone">
            <summary>
            A duo tone color effect.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipEffects.AddColorChange">
            <summary>
            Adds a color change effect 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipEffects.RemoveColorChange">
            <summary>
            Removes a duotone effect.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipEffects.ColorChange">
            <summary>
            A duo tone color effect.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipEffects.AddColorReplace">
            <summary>
            Adds a color change effect 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipEffects.RemoveColorReplace">
            <summary>
            Removes a duotone effect.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipEffects.ColorReplace">
            <summary>
            Adds color replacement effect.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFill">
            <summary>
            A picture fill for a drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFill.Image">
            <summary>
            The image used in the fill operation.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFill.Stretch">
            <summary>
            The image should be stretched to fill the target.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFill.StretchOffset">
            <summary>
            Offset in percentage from the edge of the shapes bounding box. This property only apply when Stretch is set to true.        
            <seealso cref="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFill.Stretch"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFill.SourceRectangle">
            <summary>
            The portion of the image to be used for the fill.
            Offset values are in percentage from the borders of the image
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFill.Tile">
            <summary>
            The image should be tiled to fill the available space
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFill.Style">
            <summary>
            The type of fill
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFill.Effects">
            <summary>
            Blip fill effects
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFillTile">
            <summary>
            A BLIP will be tiled to fill the available space
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFillTile.FlipMode">
            <summary>
            The direction(s) in which to flip the image.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFillTile.Alignment">
            <summary>
            Where to align the first tile with respect to the shape.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFillTile.HorizontalRatio">
            <summary>
            The ratio for horizontally scale
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFillTile.VerticalRatio">
            <summary>
            The ratio for vertically scale
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFillTile.HorizontalOffset">
            <summary>
            The horizontal offset after alignment
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFillTile.VerticalOffset">
            <summary>
            The vertical offset after alignment
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingFillBase">
            <summary>
            Base class for drawing fills
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingFillBase.#ctor">
            <summary>
            Creates an instance of ExcelDrawingFillBase
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingFillBase.#ctor(System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.String,System.Action)">
            <summary>
            Creates an instance of ExcelDrawingFillBase
            </summary>
            <param name="nsm">Namespace manager</param>
            <param name="topNode">The top node</param>
            <param name="fillPath">XPath to the fill</param>
            <param name="initXml">Xml initialize method</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingFillBase.Style">
            <summary>
            Type of fill
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingFillBase.CheckTypeChange(System.String)">
            <summary>
            Internal Check for type change
            </summary>
            <param name="type">The type</param>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingFillBase._xml">
            <summary>
            The Xml helper
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingFillBase._topNode">
            <summary>
            The top node
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingFillBase._nsm">
            <summary>
            The name space manager
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingFillBase._fillPath">
            <summary>
            The XPath
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingFillBase.InitXml(System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.String)">
            <summary>
            Init xml
            </summary>
            <param name="nsm">Xml namespace manager</param>
            <param name="node">The node</param>
            <param name="fillPath">The fill path</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingFillBase.CreateXmlHelper">
            <summary>
            Create the Xml Helper
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFill">
            <summary>
            A gradient fill. This fill gradual transition from one color to the next.
            </summary>s
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFill.TileFlip">
            <summary>
            The direction(s) in which to flip the gradient while tiling
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFill.RotateWithShape">
            <summary>
            If the fill rotates along with shape.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFill.Colors">
            <summary>
            A list of colors and their positions in percent used to generate the gradiant fill
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFill.Style">
            <summary>
            The fill style. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFill.ShadePath">
            <summary>
            Specifies the shape of the path to follow
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFill.FocusPoint">
            <summary>
            The focuspoint when ShadePath is set to a non linear value.
            This property is set to null if ShadePath is set to Linear
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFill.LinearSettings">
            <summary>
            Linear gradient settings.
            This property is set to null if ShadePath is set to Linear
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColor">
            <summary>
            Represents a color in the gradiant color list
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColor.Position">
            <summary>
            The position of color in a range from 0-100%
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColor.Color">
            <summary>
            The color to use.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColorList">
            <summary>
            A collection of colors and their positions used for a gradiant fill.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColorList.Item(System.Int32)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="index">The index in the collection</param>
            <returns>The color</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColorList.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColorList.Item(System.Double)">
            <summary>
            Gets the first occurance with the color with the specified position
            </summary>
            <param name="position">The position in percentage</param>
            <returns>The color</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColorList.AddRgb(System.Double,System.Drawing.Color)">
            <summary>
            Adds a RGB color at the specified position
            </summary>
            <param name="position">The position</param>
            <param name="color">The Color</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColorList.AddRgbPercentage(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a RGB percentage color at the specified position
            </summary>
            <param name="position">The position</param>
            <param name="redPercentage">The percentage of red</param>
            <param name="greenPercentage">The percentage of green</param>
            <param name="bluePercentage">The percentage of blue</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColorList.AddScheme(System.Double,OfficeOpenXml.Drawing.eSchemeColor)">
            <summary>
            Adds a theme color at the specified position
            </summary>
            <param name="position">The position</param>
            <param name="color">The theme color</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColorList.AddSystem(System.Double,OfficeOpenXml.Drawing.eSystemColor)">
            <summary>
            Adds a system color at the specified position
            </summary>
            <param name="position">The position</param>
            <param name="color">The system color</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColorList.AddHsl(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a HSL color at the specified position
            </summary>
            <param name="position">The position</param>
            <param name="hue">The hue part. Ranges from 0-360</param>
            <param name="saturation">The saturation part. Percentage</param>
            <param name="luminance">The luminance part. Percentage</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColorList.AddPreset(System.Double,OfficeOpenXml.Drawing.ePresetColor)">
            <summary>
            Adds a HSL color at the specified position
            </summary>
            <param name="position">The position</param>
            <param name="color">The preset color</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColorList.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillLinearSettings">
            <summary>
            Settings specific for linear gradiant fills
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillLinearSettings.Angel">
            <summary>
            The direction of color change for the gradient.To define this angle, let its value
            be x measured clockwise.Then( -sin x, cos x) is a vector parallel to the line of constant color in the gradient fill.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillLinearSettings.Scaled">
            <summary>
            If the gradient angle scales with the fill.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingNoFill">
            <summary>
            The drawing has no fill
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingNoFill.Style">
            <summary>
            The type of fill
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingPatternFill">
            <summary>
            A pattern fill.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingPatternFill.Style">
            <summary>
            The fillstyle, always PatternFill
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingPatternFill.PatternType">
            <summary>
            The preset pattern to use
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingPatternFill.ForegroundColor">
            <summary>
            Foreground color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingPatternFill.BackgroundColor">
            <summary>
            Background color
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingSolidFill">
            <summary>
            A solid fill.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingSolidFill.Style">
            <summary>
            The fill style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingSolidFill.Color">
            <summary>
            The color of the fill
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Font.ExcelDrawingFont">
            <summary>
            Represents a normal font
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Font.ExcelDrawingFont.Script">
            <summary>
            The script or language 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Font.ExcelDrawingFontBase">
            <summary>
            Base class a font
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Font.ExcelDrawingFontBase.Typeface">
            <summary>
            The typeface or the name of the font
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Font.ExcelDrawingFontSpecial">
            <summary>
            Represents a special font, Complex, Latin or East asian 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Font.ExcelDrawingFontSpecial.Type">
            <summary>
            The type of font
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Font.ExcelDrawingFontSpecial.Panose">
            <summary>
            Specifies the Panose-1 classification number for the current font using the mechanism
            defined in §5.2.7.17 of ISO/IEC 14496-22.
            This value is used as one piece of information to guide selection of a similar alternate font if the desired font is unavailable.
            </summary>        
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Font.ExcelDrawingFontSpecial.PitchFamily">
            <summary>
            The font pitch as well as the font family for the font
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3D">
            <summary>
            3D settings for a drawing object
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3D.Scene">
            <summary>
            Defines scene-level 3D properties to apply to an object
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3D.ExtrusionHeight">
            <summary>
            The height of the extrusion
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3D.ContourWidth">
            <summary>
            The height of the extrusion
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3D.TopBevel">
            <summary>
            The bevel on the top or front face of a shape
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3D.BottomBevel">
            <summary>
            The bevel on the top or front face of a shape
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3D.ExtrusionColor">
            <summary>
            The color of the extrusion applied to a shape
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3D.ContourColor">
            <summary>
            The color for the contour on a shape
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3D.MaterialType">
            <summary>
            The surface appearance of a shape
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3D.ShapeDepthZCoordinate">
            <summary>
            The z coordinate for the 3D shape
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3D.Delete">
            <summary>
            Remove all 3D settings
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3DBevel">
            <summary>
            Defines a bevel off a shape
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3DBevel.Width">
            <summary>
            The width of the bevel in points (pt)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3DBevel.Height">
            <summary>
            The height of the bevel in points (pt)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3DBevel.BevelType">
            <summary>
            A preset bevel that can be applied to a shape.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3DText">
            <summary>
            3D Text settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3DText.FlatTextZCoordinate">
            <summary>
            The Z coordinate to be used when positioning the flat text within the 3D scene
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3D">
            <summary>
            Scene-level 3D properties to apply to a drawing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3D._path">
            <summary>
            The xpath
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3D.Camera">
            <summary>
            The placement and properties of the camera in the 3D scene
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3D.LightRig">
            <summary>
            The light rig.
            When 3D is used, the light rig defines the lighting properties for the scene
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3D.BackDropPlane">
            <summary>
            The points and vectors contained within the backdrop define a plane in 3D space
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DBackDrop">
            <summary>
            The points and vectors contained within the backdrop define a plane in 3D space
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DBackDrop.AnchorPoint">
            <summary>
            The anchor point
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DBackDrop.UpVector">
            <summary>
            The up vector
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DBackDrop.NormalVector">
            <summary>
            The normal vector
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DCamera">
            <summary>
            Settings for the camera in the 3D scene
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DCamera._path">
            <summary>
            The XPath
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DCamera.Rotation">
            <summary>
            Defines a rotation in 3D space
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DCamera.FieldOfViewAngle">
            <summary>
            An override for the default field of view for the camera.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DCamera.CameraType">
            <summary>
            The preset camera type that is being used.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DCamera.Zoom">
            <summary>
            The zoom factor of a given camera
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DLightRig">
            <summary>
            The lightrig
            When 3D is used, the light rig defines the lighting properties associated with the scene
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DLightRig._path">
            <summary>
            The xpath
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DLightRig.Rotation">
            <summary>
            Defines a rotation in 3D space
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DLightRig.Direction">
            <summary>
            The direction from which the light rig is oriented in relation to the scene.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DLightRig.RigType">
            <summary>
            The preset type of light rig which is to be applied to the 3D scene
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelTextBody">
            <summary>
            Properties for the textbody
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.Anchor">
            <summary>
            The anchoring position within the shape
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.AnchorCenter">
            <summary>
            The centering of the text box.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.UnderLine">
            <summary>
            Underlined text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.BottomInsert">
            <summary>
            The bottom inset of the bounding rectangle
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.TopInsert">
            <summary>
            The top inset of the bounding rectangle
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.RightInsert">
            <summary>
            The right inset of the bounding rectangle
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.LeftInsert">
            <summary>
            The left inset of the bounding rectangle
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.Rotation">
            <summary>
            The rotation that is being applied to the text within the bounding box
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.SpaceBetweenColumns">
            <summary>
            The space between text columns in the text area
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.ParagraphSpacing">
            <summary>
            If the before and after paragraph spacing defined by the user is to be respected
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.TextUpright">
            <summary>
            
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.CompatibleLineSpacing">
            <summary>
            If the line spacing is decided in a simplistic manner using the font scene
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.ForceAntiAlias">
            <summary>
            Forces the text to be rendered anti-aliased
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.FromWordArt">
            <summary>
            If the text within this textbox is converted from a WordArt object.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.VerticalText">
            <summary>
            If the text should be displayed vertically
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.HorizontalTextOverflow">
            <summary>
            If the text can flow out horizontaly
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.VerticalTextOverflow">
            <summary>
            If the text can flow out of the bounding box vertically
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.WrapText">
            <summary>
            How text is wrapped
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.TextAutofit">
            <summary>
            The text within the text body should be normally auto-fited
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.AutofitNormalFontScale">
            <summary>
            The percentage of the original font size to which each run in the text body is scaled.
            This propery only applies when the TextAutofit property is set to NormalAutofit
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.LineSpaceReduction">
            <summary>
            The percentage by which the line spacing of each paragraph is reduced.
            This propery only applies when the TextAutofit property is set to NormalAutofit
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelTextRun">
            <summary>
            A richtext part
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextRun.Capitalization">
            <summary>
            The capitalization that is to be applied
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextRun.Kerning">
            <summary>
            The minimum font size at which character kerning occurs
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextRun.FontSize">
            <summary>
            Fontsize
            Spans from 0-4000
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextRun.Spacing">
            <summary>
            The spacing between between characters
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextRun.Baseline">
            <summary>
            The baseline for both the superscript and subscript fonts in percentage
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextRun.Bold">
            <summary>
            Bold text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextRun.Italic">
            <summary>
            Italic text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextRun.Strike">
            <summary>
            Strike-out text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextRun.UnderLine">
            <summary>
            Underlined text
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eCrossFilter">
            <summary>
            How the items that are used in slicer cross filtering are displayed
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eCrossFilter.None">
            <summary>
            The slicer style for slicer items with no data is not applied to slicer items with no data, and slicer items with no data are not sorted separately in the list of slicer items in the slicer view.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eCrossFilter.ShowItemsWithDataAtTop">
            <summary>
            The slicer style for slicer items with no data is applied to slicer items with no data, and slicer items with no data are sorted at the bottom in the list of slicer items in the slicer view.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eCrossFilter.ShowItemsWithNoData">
            <summary>
            The slicer style for slicer items with no data is applied to slicer items with no data, and slicer items with no data are not sorted separately in the list of slicer items in the slicer view.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eSlicerSourceType">
            <summary>
            The source of the slicer data
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerSourceType.PivotTable">
            <summary>
            A pivot table
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerSourceType.Table">
            <summary>
            A table
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eSlicerStyle">
            <summary>
            Buildin slicer styles
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.None">
            <summary>
            No slicer style specified
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Custom">
            <summary>
            A custom style set by the <see cref="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1.Style"/> property
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Light1">
            <summary>
            Light 1 style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Light2">
            <summary>
            Light 2 style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Light3">
            <summary>
            Light 3 style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Light4">
            <summary>
            Light 4 style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Light5">
            <summary>
            Light 5 style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Light6">
            <summary>
            Light 6 style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Other1">
            <summary>
            Other 1 style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Other2">
            <summary>
            Other 2 style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Dark1">
            <summary>
            Dark 1 style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Dark2">
            <summary>
            Dark 2 style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Dark3">
            <summary>
            Dark 3 style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Dark4">
            <summary>
            Dark 4 style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Dark5">
            <summary>
            Dark 5 style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Dark6">
            <summary>
            Dark 6 style
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eSortOrder">
            <summary>
            Sorting
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSortOrder.Ascending">
            <summary>
            Sort ascending, default
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSortOrder.Descending">
            <summary>
            Sort descending
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eVmlDashStyle">
            <summary>
            Dash style for a line used in VML drawings
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlDashStyle.Solid">
            <summary>
            A solid line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlDashStyle.ShortDash">
            <summary>
            Short - Dash
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlDashStyle.ShortDot">
            <summary>
            Short - Dot
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlDashStyle.ShortDashDot">
            <summary>
            Short - Dash - Dot
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlDashStyle.ShortDashDotDot">
            <summary>
            Short - Dash - Dot - Dot
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlDashStyle.Dot">
            <summary>
            Dotted
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlDashStyle.Dash">
            <summary>
            Dashed
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlDashStyle.LongDash">
            <summary>
            Long dashes
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlDashStyle.DashDot">
            <summary>
            Dash - Dot
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlDashStyle.LongDashDot">
            <summary>
            Long Dash - Dot
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlDashStyle.LongDashDotDot">
            <summary>
            Long Dash - Dot - Dot
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlDashStyle.Custom">
            <summary>
            Custom dash style.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eVmlLineStyle">
            <summary>
            The line style of a vml drawing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlLineStyle.NoLine">
            <summary>
            No line style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlLineStyle.Single">
            <summary>
            A single line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlLineStyle.ThinThin">
            <summary>
            Thin thin line style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlLineStyle.ThinThick">
            <summary>
            Thin thick line style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlLineStyle.ThickThin">
            <summary>
            Thick thin line style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlLineStyle.ThickBetweenThin">
            <summary>
            Thick between thin line style
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Encryption.EncryptedPackageHandler">
            <summary>
            Handels encrypted Excel documents 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Encryption.EncryptedPackageHandler.DecryptPackage(System.IO.FileInfo,OfficeOpenXml.ExcelEncryption)">
            <summary>
            Read the package from the OLE document and decrypt it using the supplied password
            </summary>
            <param name="fi">The file</param>
            <param name="encryption"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Encryption.EncryptedPackageHandler.DecryptPackage(System.IO.MemoryStream,OfficeOpenXml.ExcelEncryption)">
            <summary>
            Read the package from the OLE document and decrypt it using the supplied password
            </summary>
            <param name="stream">The memory stream. </param>
            <param name="encryption">The encryption object from the Package</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Encryption.EncryptedPackageHandler.EncryptPackage(System.Byte[],OfficeOpenXml.ExcelEncryption)">
            <summary>
            Encrypts a package
            </summary>
            <param name="package">The package as a byte array</param>
            <param name="encryption">The encryption info from the workbook</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Encryption.EncryptedPackageHandler.CreateEncryptionInfo(System.String,OfficeOpenXml.Encryption.AlgorithmID,System.Byte[]@)">
            <summary>
            Create an EncryptionInfo object to encrypt a workbook
            </summary>
            <param name="password">The password</param>
            <param name="algID"></param>
            <param name="key">The Encryption key</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Encryption.EncryptedPackageHandler.DecryptDocument(System.Byte[],OfficeOpenXml.Encryption.EncryptionInfo,System.String)">
            <summary>
            Decrypt a document
            </summary>
            <param name="data">The Encrypted data</param>
            <param name="encryptionInfo">Encryption Info object</param>
            <param name="password">The password</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Encryption.EncryptedPackageHandler.IsPasswordValid(System.Byte[],OfficeOpenXml.Encryption.EncryptionInfoBinary)">
            <summary>
            Validate the password
            </summary>
            <param name="key">The encryption key</param>
            <param name="encryptionInfo">The encryption info extracted from the ENCRYPTIOINFO stream inside the OLE document</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Encryption.EncryptedPackageHandler.IsPasswordValid(System.Security.Cryptography.HashAlgorithm,OfficeOpenXml.Encryption.EncryptionInfoAgile.EncryptionKeyEncryptor)">
            <summary>
            Validate the password
            </summary>
            <param name="sha">The hash algorithm</param>
            <param name="encr">The encryption info extracted from the ENCRYPTIOINFO stream inside the OLE document</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Encryption.EncryptedPackageHandler.GetPasswordHashBinary(System.String,OfficeOpenXml.Encryption.EncryptionInfoBinary)">
            <summary>
            Create the hash.
            This method is written with the help of Lyquidity library, many thanks for this nice sample
            </summary>
            <param name="password">The password</param>
            <param name="encryptionInfo">The encryption info extracted from the ENCRYPTIOINFO stream inside the OLE document</param>
            <returns>The hash to encrypt the document</returns>
        </member>
        <member name="M:OfficeOpenXml.Encryption.EncryptedPackageHandler.GetPasswordHashAgile(System.String,OfficeOpenXml.Encryption.EncryptionInfoAgile.EncryptionKeyEncryptor,System.Byte[])">
            <summary>
            Create the hash.
            This method is written with the help of Lyquidity library, many thanks for this nice sample
            </summary>
            <param name="password">The password</param>
            <param name="encr">The encryption info extracted from the ENCRYPTIOINFO stream inside the OLE document</param>
            <param name="blockKey">The block key appended to the hash to obtain the final hash</param>
            <returns>The hash to encrypt the document</returns>
        </member>
        <member name="T:OfficeOpenXml.Encryption.EncryptionHeader">
            <summary>
            Encryption Header inside the EncryptionInfo stream
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eCipherAlgorithm.AES">
            <summary>
            AES. MUST conform to the AES algorithm.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eCipherAlgorithm.RC2">
            <summary>
            RC2. MUST conform to [RFC2268].
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eCipherAlgorithm.RC4">
            <summary>
            RC4. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eCipherAlgorithm.DES">
            <summary>
            MUST conform to the DES algorithm.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eCipherAlgorithm.DESX">
            <summary>
            MUST conform to the [DRAFT-DESX] algorithm.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eCipherAlgorithm.TRIPLE_DES">
            <summary>
            3DES. MUST conform to the [RFC1851] algorithm. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eCipherAlgorithm.TRIPLE_DES_112">
            3DES_112 MUST conform to the [RFC1851] algorithm. 
        </member>
        <member name="F:OfficeOpenXml.Encryption.eChainingMode.ChainingModeCBC">
            <summary>
            Cipher block chaining (CBC).
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eChainingMode.ChainingModeCFB">
            <summary>
            Cipher feedback chaining (CFB), with 8-bit window.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Encryption.eHashAlgorithm">
            <summary>
            Hash algorithm
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eHashAlgorithm.SHA1">
            <summary>
            Sha 1-MUST conform to [RFC4634]
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eHashAlgorithm.SHA256">
            <summary>
            Sha 256-MUST conform to [RFC4634]
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eHashAlgorithm.SHA384">
            <summary>
            Sha 384-MUST conform to [RFC4634]
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eHashAlgorithm.SHA512">
            <summary>
            Sha 512-MUST conform to [RFC4634]
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eHashAlgorithm.MD5">
            <summary>
            MD5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eHashAlgorithm.MD4">
            <summary>
            MD4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eHashAlgorithm.MD2">
            <summary>
            MD2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eHashAlgorithm.RIPEMD128">
            <summary>
            RIPEMD-128 MUST conform to [ISO/IEC 10118]
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eHashAlgorithm.RIPEMD160">
            <summary>
            RIPEMD-160 MUST conform to [ISO/IEC 10118]
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eHashAlgorithm.WHIRLPOOL">
            <summary>
            WHIRLPOOL MUST conform to [ISO/IEC 10118]
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Encryption.EncryptionInfoAgile">
            <summary>
            Handels the agile encryption
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Encryption.EncryptionInfoBinary">
            <summary>
            Handles the EncryptionInfo stream
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Encryption.EncryptionVerifier">
            <summary>
            Encryption verifier inside the EncryptionInfo stream
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eShiftTypeDelete">
            <summary>
            Tells how cells should be shifted in a delete operation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eShiftTypeDelete.Left">
            <summary>
            Cells in the range are shifted to the left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eShiftTypeDelete.Up">
            <summary>
            Cells in the range are shifted upwards
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eShiftTypeDelete.EntireRow">
            <summary>
            The range for the entire row is used in the shift operation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eShiftTypeDelete.EntireColumn">
            <summary>
            The range for the entire column is used in the shift operation
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eShiftTypeInsert">
            <summary>
            Tells how cells should be shifted in a insert operation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eShiftTypeInsert.Right">
            <summary>
            Cells in the range are shifted to the right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eShiftTypeInsert.Down">
            <summary>
            Cells in the range are shifted downwards
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eShiftTypeInsert.EntireRow">
            <summary>   
            The range for the entire row is used in the shift operation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eShiftTypeInsert.EntireColumn">
            <summary>
            The range for the entire column is used in the shift operation
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eProtectedRangeAlgorithm">
            <summary>
            Algorithm for password hash
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eProtectedRangeAlgorithm.MD2">
            <summary>
            Specifies that the MD2 algorithm, as defined by RFC 1319, shall be used.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eProtectedRangeAlgorithm.MD4">
            <summary>
            Specifies that the MD4 algorithm, as defined by RFC 1319, shall be used.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eProtectedRangeAlgorithm.MD5">
            <summary>
            Specifies that the MD5 algorithm, as defined by RFC 1319, shall be used.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eProtectedRangeAlgorithm.RIPEMD128">
            <summary>
            Specifies that the RIPEMD-128 algorithm, as defined by RFC 1319, shall be used.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eProtectedRangeAlgorithm.RIPEMD160">
            <summary>
            Specifies that the RIPEMD-160 algorithm, as defined by ISO/IEC10118-3:2004 shall be used.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eProtectedRangeAlgorithm.SHA1">
            <summary>
            Specifies that the SHA-1 algorithm, as defined by ISO/IEC 10118-3:2004 shall be used.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eProtectedRangeAlgorithm.SHA256">
            <summary>
            Specifies that the SHA-256 algorithm, as defined by ISO/IEC10118-3:2004 shall be used.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eProtectedRangeAlgorithm.SHA384">
            <summary>
            Specifies that the SHA-384 algorithm, as defined by ISO/IEC 10118-3:2004 shall be used.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eProtectedRangeAlgorithm.SHA512">
            <summary>
            Specifies that the SHA-512 algorithm, as defined by ISO/IEC10118-3:2004 shall be used.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eProtectedRangeAlgorithm.WHIRLPOOL">
            <summary>
            Specifies that the WHIRLPOOL algorithm, as defined by ISO/IEC 10118-3:2004 shall be used.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.CompressionLevel">
            <summary>
            Maps to DotNetZips CompressionLevel enum
            </summary>
        </member>
        <member name="F:OfficeOpenXml.CompressionLevel.Level0">
            <summary>
            Level 0, no compression
            </summary>
        </member>
        <member name="F:OfficeOpenXml.CompressionLevel.None">
            <summary>
            No compression
            </summary>
        </member>
        <member name="F:OfficeOpenXml.CompressionLevel.Level1">
            <summary>
            Level 1, Best speen
            </summary>
        </member>
        <member name="F:OfficeOpenXml.CompressionLevel.BestSpeed">
            <summary>
            
            </summary>
        </member>
        <member name="F:OfficeOpenXml.CompressionLevel.Level2">
            <summary>
            Level 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.CompressionLevel.Level3">
            <summary>
            Level 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.CompressionLevel.Level4">
            <summary>
            Level 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.CompressionLevel.Level5">
            <summary>
            Level 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.CompressionLevel.Level6">
            <summary>
            Level 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.CompressionLevel.Default">
            <summary>
            Default, Level 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.CompressionLevel.Level7">
            <summary>
            Level 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.CompressionLevel.Level8">
            <summary>
            Level 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.CompressionLevel.BestCompression">
            <summary>
            Level 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.CompressionLevel.Level9">
            <summary>
            Best compression, Level 9
            </summary>
        </member>
        <member name="T:OfficeOpenXml.LicenseContext">
            <summary>
            Specifies with license EPPlus is used under.
            Licensetype must be specified in order to use the library
            <seealso cref="P:OfficeOpenXml.ExcelPackage.LicenseContext"/>
            </summary>
        </member>
        <member name="F:OfficeOpenXml.LicenseContext.NonCommercial">
            <summary>
            You comply with the Polyform Non Commercial License.
            See https://polyformproject.org/licenses/noncommercial/1.0.0/
            </summary>
        </member>
        <member name="F:OfficeOpenXml.LicenseContext.Commercial">
            <summary>
            You have a commercial license purchased at https://epplussoftware.com/licenseoverview
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eWorkSheetHidden">
            <summary>
            Worksheet hidden enumeration
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eWorkSheetHidden.Visible">
            <summary>
            The worksheet is visible
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eWorkSheetHidden.Hidden">
            <summary>
            The worksheet is hidden but can be shown by the user via the user interface
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eWorkSheetHidden.VeryHidden">
            <summary>
            The worksheet is hidden and cannot be shown by the user via the user interface
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelAddress">
            <summary>
            Range address with the address property readonly
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddress.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="fromRow">From row</param>
            <param name="fromCol">From column</param>
            <param name="toRow">To row</param>
            <param name="toColumn">To column</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddress.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="address">The Excel address</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddress.#ctor(System.String,OfficeOpenXml.ExcelPackage,OfficeOpenXml.ExcelAddressBase)">
            <summary>
            Creates an Address object
            </summary>
            <remarks>Examples of addresses are "A1" "B1:C2" "A:A" "1:1" "A1:E2,G3:G5" </remarks>
            <param name="Address">The Excel Address</param>
            <param name="package">Reference to the package to find information about tables and names</param>
            <param name="referenceAddress">The address</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddress.Address">
            <summary>
            The address for the range
            </summary>
            <remarks>Examples of addresses are "A1" "B1:C2" "A:A" "1:1" "A1:E2,G3:G5" </remarks>
        </member>
        <member name="T:OfficeOpenXml.ExcelAddressBase">
            <summary>
            A range address
            </summary>
            <remarks>Examples of addresses are "A1" "B1:C2" "A:A" "1:1" "A1:E2,G3:G5" </remarks>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddressBase.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an Address object
            </summary>
            <param name="fromRow">start row</param>
            <param name="fromCol">start column</param>
            <param name="toRow">End row</param>
            <param name="toColumn">End column</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddressBase.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an Address object
            </summary>
            <param name="worksheetName">Worksheet name</param>
            <param name="fromRow">Start row</param>
            <param name="fromCol">Start column</param>
            <param name="toRow">End row</param>
            <param name="toColumn">End column</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddressBase.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates an Address object
            </summary>
            <param name="fromRow">Start row</param>
            <param name="fromCol">Start column</param>
            <param name="toRow">End row</param>
            <param name="toColumn">End column</param>
            <param name="fromRowFixed">Start row fixed</param>
            <param name="fromColFixed">Start column fixed</param>
            <param name="toRowFixed">End row fixed</param>
            <param name="toColFixed">End column fixed</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddressBase.#ctor(System.String,OfficeOpenXml.ExcelWorkbook,System.String)">
            <summary>
            Creates an Address object
            </summary>
            <remarks>Examples of addresses are "A1" "B1:C2" "A:A" "1:1" "A1:E2,G3:G5" </remarks>
            <param name="address">The Excel Address</param>
            <param name="wb">The workbook to verify any defined names from</param>
            <param name="wsName">The name of the worksheet the address referes to</param>
            <ws></ws>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddressBase.#ctor(System.String,OfficeOpenXml.ExcelPackage,OfficeOpenXml.ExcelAddressBase)">
            <summary>
            Creates an Address object
            </summary>
            <remarks>Examples of addresses are "A1" "B1:C2" "A:A" "1:1" "A1:E2,G3:G5" </remarks>
            <param name="address">The Excel Address</param>
            <param name="pck">Reference to the package to find information about tables and names</param>
            <param name="referenceAddress">The address</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddressBase.IntersectReversed(OfficeOpenXml.ExcelAddressBase)">
            <summary>
            Returns the parts of this address that not intersects with <paramref name="address"/>
            </summary>
            <param name="address">The address to intersect with</param>
            <returns>The addresses not intersecting with <paramref name="address"/></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddressBase.#ctor(System.String,System.Boolean)">
            <summary>
            Address is an defined name
            </summary>
            <param name="address">the name</param>
            <param name="isName">Should always be true</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddressBase.SetAddress(System.String,OfficeOpenXml.ExcelWorkbook,System.String)">
            <summary>
            Sets the address
            </summary>
            <param name="address">The address</param>
            <param name="wb"></param>
            <param name="wsName"></param>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddressBase.ChangeAddress">
            <summary>
            Called when the address changes
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.Start">
            <summary>
            Gets the row and column of the top left cell.
            </summary>
            <value>The start row column.</value>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.End">
            <summary>
            Gets the row and column of the bottom right cell.
            </summary>
            <value>The end row column.</value>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.ExternalReferenceIndex">
            <summary>
            The index to the external reference. Return 0, the current workbook, if no reference exists.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.Table">
            <summary>
            If the address is refering a table, this property contains additional information 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.Address">
            <summary>
            The address for the range
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.FullAddress">
            <summary>
            The full address including the worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.IsName">
            <summary>
            If the address is a defined name
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddressBase.ToString">
            <summary>
            Returns the address text
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddressBase.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.FirstAddress">
            <summary>
            returns the first address if the address is a multi address.
            A1:A2,B1:B2 returns A1:A2
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddressBase.Validate">
            <summary>
            Validate the address
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.Rows">
            <summary>
            Number of rows int the address
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.Columns">
            <summary>
            Number of columns int the address
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.IsFullRow">
            <summary>
            Returns true if the range spans a full row
            </summary>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.IsFullColumn">
            <summary>
            Returns true if the range spans a full column
            </summary>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.LocalAddress">
            <summary>
            The address without the workbook or worksheet reference
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.WorkbookLocalAddress">
            <summary>
            The address without the workbook reference
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddressBase.Equals(System.Object)">
            <summary>
            Returns true if the item is equal to another item.
            </summary>
            <param name="obj">The item to compare</param>
            <returns>True if the items are equal</returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.IsExternal">
            <summary>
            Returns true the address contains an external reference
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelBackgroundImage">
            <summary>
            An image that fills the background of the worksheet.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelBackgroundImage.#ctor(System.Xml.XmlNamespaceManager,System.Xml.XmlNode,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="nsm"></param>
            <param name="topNode">The topnode of the worksheet</param>
            <param name="workSheet">Worksheet reference</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelBackgroundImage.Image">
            <summary>
            The background image of the worksheet. 
            Note that images of type .svg, .ico and .webp is not supported as background images.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelBackgroundImage.SetFromFile(System.IO.FileInfo)">
            <summary>
            Set the picture from an image file. 
            </summary>
            <param name="PictureFile">The image file. Files of type .svg, .ico and .webp is not supported for background images</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelBackgroundImage.SetFromFile(System.String)">
            <summary>
            Set the picture from an image file. 
            </summary>
            <param name="PictureFilePath">The path to the image file. Files of type .svg, .ico and .webp is not supported for background images</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelBackgroundImage.Remove">
            <summary>
            Removes the background image.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelCellAddress">
            <summary>
            A single cell address 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellAddress.#ctor">
            <summary>
            Initializes a new instance of the ExcelCellAddress class.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellAddress.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ExcelCellAddress class.
            </summary>
            <param name="row">The row.</param>
            <param name="column">The column.</param>
            <param name="isRowFixed">If the row is fixed, prefixed with $</param>
            <param name="isColumnFixed">If the column is fixed, prefixed with $</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellAddress.#ctor(System.String)">
             <summary>
             Initializes a new instance of the ExcelCellAddress class.
             </summary>
            <param name="address">The address</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelCellAddress.Row">
            <summary>
            Row
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelCellAddress.Column">
            <summary>
            Column
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelCellAddress.Address">
            <summary>
            Celladdress
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelCellAddress.IsRowFixed">
            <summary>
            Returns true if the row is fixed 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelCellAddress.IsColumnFixed">
            <summary>
            Returns true if the column is fixed
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelCellAddress.IsRef">
            <summary>
            If the address is an invalid reference (#REF!)
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellAddress.GetColumnLetter(System.Int32)">
            <summary>
            Returns the letter corresponding to the supplied 1-based column index.
            </summary>
            <param name="column">Index of the column (1-based)</param>
            <returns>The corresponding letter, like A for 1.</returns>
        </member>
        <member name="T:OfficeOpenXml.ExcelCellBase">
            <summary>
            Base class containing cell address manipulating methods.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.SplitCellId(System.UInt64,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Get the sheet, row and column from the CellID
            </summary>
            <param name="cellId"></param>
            <param name="sheet"></param>
            <param name="row"></param>
            <param name="col"></param>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetCellId(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the cellID for the cell. 
            </summary>
            <param name="sheetId"></param>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.TranslateFromR1C1(System.String,System.Int32,System.Int32)">
            <summary>
            Translates a R1C1 to an absolut address/Formula
            </summary>
            <param name="value">Address</param>
            <param name="row">Current row</param>
            <param name="col">Current column</param>
            <returns>The RC address</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.TranslateToR1C1(System.String,System.Int32,System.Int32)">
            <summary>
            Translates a absolut address to R1C1 Format
            </summary>
            <param name="value">R1C1 Address</param>
            <param name="row">Current row</param>
            <param name="col">Current column</param>
            <returns>The absolut address/Formula</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetColumnLetter(System.Int32)">
            <summary>
            Returns the character representation of the numbered column
            </summary>
            <param name="iColumnNumber">The number of the column</param>
            <returns>The letter representing the column</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetColumnLetter(System.Int32,System.Boolean)">
            <summary>
            Returns the character representation of the numbered column
            </summary>
            <param name="iColumnNumber">The number of the column</param>
            <param name="fixedCol">True for fixed column</param>
            <returns>The letter representing the column</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetRowColFromAddress(System.String,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,OfficeOpenXml.ExcelWorkbook,System.String)">
            <summary>
            Get the row/columns for a Cell-address
            </summary>
            <param name="CellAddress">The address</param>
            <param name="FromRow">Returns the to column</param>
            <param name="FromColumn">Returns the from column</param>
            <param name="ToRow">Returns the to row</param>
            <param name="ToColumn">Returns the from row</param>
            <param name="fixedFromRow">Is the from row fixed?</param>
            <param name="fixedFromColumn">Is the from column fixed?</param>
            <param name="fixedToRow">Is the to row fixed?</param>
            <param name="fixedToColumn">Is the to column fixed?</param>
            <param name="wb">A reference to the workbook object</param>
            <param name="wsName">The worksheet name used for addresses without a worksheet reference.</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetRowColFromAddress(System.String,System.Int32@,System.Int32@)">
            <summary>
            Get the row/column for n Cell-address
            </summary>
            <param name="CellAddress">The address</param>
            <param name="Row">Returns Tthe row</param>
            <param name="Column">Returns the column</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetRowCol(System.String,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Get the row/column for a Cell-address
            </summary>
            <param name="address">the address</param>
            <param name="row">returns the row</param>
            <param name="col">returns the column</param>
            <param name="throwException">throw exception if invalid, otherwise returns false</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetAddressRow(System.Int32,System.Boolean)">
            <summary>
            Get the row number in text
            </summary>
            <param name="Row">The row</param>
            <param name="Absolute">If the row is absolute. Adds a $ before the address if true</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetAddressCol(System.Int32,System.Boolean)">
            <summary>
            Get the columnn address for the column
            </summary>
            <param name="Col">The column</param>
            <param name="Absolute">If the column is absolute. Adds a $ before the address if true</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32)">
            <summary>
            Returns the AlphaNumeric representation that Excel expects for a Cell Address
            </summary>
            <param name="Row">The number of the row</param>
            <param name="Column">The number of the column in the worksheet</param>
            <returns>The cell address in the format A1</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Returns the AlphaNumeric representation that Excel expects for a Cell Address
            </summary>
            <param name="Row">The number of the row</param>
            <param name="Column">The number of the column in the worksheet</param>
            <param name="AbsoluteRow">Absolute row</param>
            <param name="AbsoluteCol">Absolute column</param>
            <returns>The cell address in the format A1</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the AlphaNumeric representation that Excel expects for a Cell Address
            </summary>
            <param name="Row">The number of the row</param>
            <param name="Column">The number of the column in the worksheet</param>
            <param name="Absolute">Get an absolute address ($A$1)</param>
            <returns>The cell address in the format A1</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the AlphaNumeric representation that Excel expects for a Cell Address
            </summary>
            <param name="FromRow">From row number</param>
            <param name="FromColumn">From column number</param>
            <param name="ToRow">To row number</param>
            <param name="ToColumn">From column number</param>
            <returns>The cell address in the format A1</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the AlphaNumeric representation that Excel expects for a Cell Address
            </summary>
            <param name="FromRow">From row number</param>
            <param name="FromColumn">From column number</param>
            <param name="ToRow">To row number</param>
            <param name="ToColumn">From column number</param>
            <param name="Absolute">if true address is absolute (like $A$1)</param>
            <returns>The cell address in the format A1</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the AlphaNumeric representation that Excel expects for a Cell Address
            </summary>
            <param name="FromRow">From row number</param>
            <param name="FromColumn">From column number</param>
            <param name="ToRow">To row number</param>
            <param name="ToColumn">From column number</param>
            <param name="FixedFromColumn"></param>
            <param name="FixedFromRow"></param>
            <param name="FixedToColumn"></param>
            <param name="FixedToRow"></param>
            <returns>The cell address in the format A1</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetFullAddress(System.String,System.String)">
            <summary>
            Get the full address including the worksheet name
            </summary>
            <param name="worksheetName">The name of the worksheet</param>
            <param name="address">The address</param>
            <returns>The full address</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetFullAddress(System.String,System.String,System.String)">
            <summary>
            Get the full address including the worksheet name
            </summary>
            <param name="workbook">The workbook, if other than current</param>   
            <param name="worksheetName">The name of the worksheet</param>
            <param name="address">The address</param>
            <returns>The full address</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.IsSimpleAddress(System.String)">
            <summary>
            If the address is a address is a cell or range address of format A1 or A1:A2, without specified worksheet name. 
            </summary>
            <param name="address">the address</param>
            <returns>True if valid.</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.IsValidAddress(System.String)">
            <summary>
            Returns true if the cell address is valid
            </summary>
            <param name="address">The address to check</param>
            <returns>Return true if the address is valid</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.IsValidCellAddress(System.String)">
            <summary>
            Checks that a cell address (e.g. A5) is valid.
            </summary>
            <param name="cellAddress">The alphanumeric cell address</param>
            <returns>True if the cell address is valid</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.UpdateFormulaReferences(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token})">
            <summary>
            Updates the Excel formula so that all the cellAddresses are incremented by the row and column increments
            if they fall after the afterRow and afterColumn.
            Supports inserting rows and columns into existing templates.
            </summary>
            <param name="formula">The Excel formula</param>
            <param name="rowIncrement">The amount to increment the cell reference by</param>
            <param name="colIncrement">The amount to increment the cell reference by</param>
            <param name="afterRow">Only change rows after this row</param>
            <param name="afterColumn">Only change columns after this column</param>
            <param name="currentSheet">The sheet that contains the formula currently being processed.</param>
            <param name="modifiedSheet">The sheet where cells are being inserted or deleted.</param>
            <param name="setFixed">Fixed address</param>
            <param name="copy">If a copy operation is performed, fully fixed cells should be untoughe.</param>
            <param name="tokens">Tokens, if a cache exists</param>
            <returns>The updated version of the <paramref name="formula"/>.</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.UpdateFormulaReferences(System.String,OfficeOpenXml.ExcelAddressBase,OfficeOpenXml.ExcelAddressBase,OfficeOpenXml.eShiftTypeInsert,System.String,System.String,System.Boolean)">
            <summary>
            Updates the Excel formula so that all the cellAddresses are incremented by the row and column increments
            if they fall after the afterRow and afterColumn.
            Supports inserting rows and columns into existing templates.
            </summary>
            <param name="formula">The Excel formula</param>
            <param name="range">The range that is inserted</param>
            <param name="effectedRange">The range effected by the insert</param>
            <param name="shift">Shift operation</param>
            <param name="currentSheet">The sheet that contains the formula currently being processed.</param>
            <param name="modifiedSheet">The sheet where cells are being inserted or deleted.</param>
            <param name="setFixed">Fixed address</param>
            <returns>The updated version of the <paramref name="formula"/>.</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.UpdateSheetNameInFormula(System.String,System.String,System.String)">
            <summary>
            Updates all formulas after a worksheet has been renamed
            </summary>
            <param name="formula">The formula to be updated.</param>
            <param name="oldName">The old sheet name.</param>
            <param name="newName">The new sheet name.</param>
            <returns>The formula to be updated.</returns>
        </member>
        <member name="T:OfficeOpenXml.ExcelChartsheet">
            <summary>
            Represents an Excel Chartsheet and provides access to its properties and methods
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelChartsheet.Chart">
            <summary>
            The worksheet chart object
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelColumn">
            <summary>
            Represents one or more columns within the worksheet
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelColumn.#ctor(OfficeOpenXml.ExcelWorksheet,System.Int32)">
            <summary>
            Creates a new instance of the ExcelColumn class.  
            For internal use only!
            </summary>
            <param name="Worksheet"></param>
            <param name="col"></param>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumn.ColumnMin">
            <summary>
            Sets the first column the definition refers to.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumn.ColumnMax">
            <summary>
            Sets the last column the definition refers to.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumn.ColumnID">
            <summary>
            Internal range id for the column
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelColumn._hidden">
            <summary>
            Allows the column to be hidden in the worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumn.Hidden">
            <summary>
            Defines if the column is visible or hidden
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumn.Width">
            <summary>
            Sets the width of the column in the worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumn.BestFit">
            <summary>
            If set to true a column automaticlly resize(grow wider) when a user inputs numbers in a cell. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumn.Collapsed">
            <summary>
            If the column is collapsed in outline mode
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumn.OutlineLevel">
            <summary>
            Outline level. Zero if no outline
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumn.Phonetic">
            <summary>
            Phonetic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumn.Style">
            <summary>
            The Style applied to the whole column. Only effects cells with no individual style set. 
            Use Range object if you want to set specific styles.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumn.StyleName">
            <summary>
            Sets the style for the entire column using a style name.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumn.StyleID">
            <summary>
            Sets the style for the entire column using the style ID.           
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumn.PageBreak">
            <summary>
            Adds a manual page break after the column.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumn.Merged">
            <summary>
            Merges all cells of the column
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelColumn.ToString">
            <summary>
            Returns the range of columns covered by the column definition.
            </summary>
            <returns>A string describing the range of columns covered by the column definition.</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelColumn.AutoFit">
            <summary>
            Set the column width from the content of the range. The minimum width is the value of the ExcelWorksheet.defaultColumnWidth property.
            Note: Cells containing formulas are ignored unless a calculation is performed.
                  Wrapped and merged cells are also ignored.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelColumn.AutoFit(System.Double)">
            <summary>
            Set the column width from the content.
            Note: Cells containing formulas are ignored unless a calculation is performed.
                  Wrapped and merged cells are also ignored.
            </summary>
            <param name="MinimumWidth">Minimum column width</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelColumn.AutoFit(System.Double,System.Double)">
            <summary>
            Set the column width from the content.
            Note: Cells containing formulas are ignored unless a calculation is performed.
                  Wrapped and merged cells are also ignored.
            </summary>
            <param name="MinimumWidth">Minimum column width</param>
            <param name="MaximumWidth">Maximum column width</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelColumn.GetColumnID(System.Int32,System.Int32)">
            <summary>
            Get the internal RangeID
            </summary>
            <param name="sheetID">Sheet no</param>
            <param name="column">Column</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelColumn.Clone(OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Copies the current column to a new worksheet
            </summary>
            <param name="added">The worksheet where the copy will be created</param>
        </member>
        <member name="T:OfficeOpenXml.ExcelColumnCollection">
            <summary>
            A collection of columns in a worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumnCollection.Item(System.Int32)">
            <summary>
            Indexer referenced by column index
            </summary>
            <param name="column">The column index</param>
            <returns>The column</returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumnCollection.Item(System.Int32,System.Int32)">
            <summary>
            Indexer referenced by from and to column index
            </summary>
            <param name="fromColumn">Column from index</param>
            <param name="toColumn">Column to index</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ExcelComment">
            <summary>
            An Excel Cell Comment
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelComment.Author">
            <summary>
            The author
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelComment.Text">
            <summary>
            The comment text 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelComment.Font">
            <summary>
            Sets the font of the first richtext item.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelComment.RichText">
            <summary>
            Richtext collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelComment.Reference">
            <summary>
            Reference
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelCommentCollection">
            <summary>
            Collection of Excel Comment objects
            </summary>  
        </member>
        <member name="P:OfficeOpenXml.ExcelCommentCollection.CommentXml">
            <summary>
            Access to the comment xml document
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelCommentCollection.Worksheet">
            <summary>
            A reference to the worksheet object
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelCommentCollection.Count">
            <summary>
            Number of comments in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelCommentCollection.Item(System.Int32)">
            <summary>
            Indexer for the comments collection
            </summary>
            <param name="Index">The index</param>
            <returns>The comment</returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelCommentCollection.Item(OfficeOpenXml.ExcelCellAddress)">
            <summary>
            Indexer for the comments collection
            </summary>
            <param name="cell">The cell</param>
            <returns>The comment</returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelCommentCollection.Item(System.String)">
            <summary>
            Indexer for the comments collection
            </summary>
            <param name="cellAddress">The cell address</param>
            <returns>The comment</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCommentCollection.Add(OfficeOpenXml.ExcelRangeBase,System.String,System.String)">
            <summary>
            Adds a comment to the top left cell of the range
            </summary>
            <param name="cell">The cell</param>
            <param name="Text">The comment text</param>
            <param name="author">The author for the comment. If this property is null or blank EPPlus will set it to the identity of the ClaimsPrincipal if available otherwise to "Anonymous"</param>
            <returns>The comment</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCommentCollection.Remove(OfficeOpenXml.ExcelComment)">
            <summary>
            Removes the comment
            </summary>
            <param name="comment">The comment to remove</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelCommentCollection.Delete(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Shifts all comments based on their address and the location of inserted rows and columns.
            </summary>
            <param name="fromRow">The start row.</param>
            <param name="fromCol">The start column.</param>
            <param name="rows">The number of rows to insert.</param>
            <param name="columns">The number of columns to insert.</param>
            <param name="toRow">If the delete is in a range, this is the end row</param>
            <param name="toCol">If the delete is in a range, this the end column</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelCommentCollection.Insert(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Shifts all comments based on their address and the location of inserted rows and columns.
            </summary>
            <param name="fromRow">The start row</param>
            <param name="fromCol">The start column</param>
            <param name="rows">The number of rows to insert</param>
            <param name="columns">The number of columns to insert</param>
            <param name="toRow">If the insert is in a range, this is the end row</param>
            <param name="toCol">If the insert is in a range, this the end column</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelCommentCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the comment at the specified position
            </summary>
            <param name="Index">The index</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelConfigurationReader.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget,OfficeOpenXml.Configuration.ExcelPackageConfiguration,System.Collections.Generic.List{OfficeOpenXml.ExcelInitializationError})">
            <summary>
            Reads an environment variable from the o/s. If an error occors it will rethrow the <see cref="T:System.Exception"/> unless SuppressInitializationExceptions of the <paramref name="config"/> is set to true.
            </summary>
            <param name="key">The key of the requested variable</param>
            <param name="target">The <see cref="T:System.EnvironmentVariableTarget"/></param>
            <param name="config">Configuration of the package</param>
            <param name="initErrors">A list of logged <see cref="T:OfficeOpenXml.ExcelInitializationError"/> objects.</param>
            <returns>The value of the environment variable</returns>
        </member>
        <member name="T:OfficeOpenXml.EncryptionAlgorithm">
            <summary>
            Encryption Algorithm
            </summary>
        </member>
        <member name="F:OfficeOpenXml.EncryptionAlgorithm.AES128">
            <summary>
            128-bit AES. Default
            </summary>
        </member>
        <member name="F:OfficeOpenXml.EncryptionAlgorithm.AES192">
            <summary>
            192-bit AES.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.EncryptionAlgorithm.AES256">
            <summary>
            256-bit AES. 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.EncryptionVersion">
            <summary>
            The major version of the Encryption 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.EncryptionVersion.Standard">
            <summary>
            Standard Encryption.
            Used in Excel 2007 and previous version with compatibility pack.
            <remarks>Default AES 128 with SHA-1 as the hash algorithm. Spincount is hardcoded to 50000</remarks>
            </summary>
        </member>
        <member name="F:OfficeOpenXml.EncryptionVersion.Agile">
            <summary>
            Agile Encryption.
            Used in Excel 2010-
            Default.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelEncryption">
             <summary>
             How and if the workbook is encrypted
            <seealso cref="T:OfficeOpenXml.ExcelProtection"/> 
            <seealso cref="T:OfficeOpenXml.ExcelSheetProtection"/> 
             </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelEncryption.#ctor">
            <summary>
            Constructor
            <remarks>Default AES 256 with SHA-512 as the hash algorithm. Spincount is set to 100000</remarks>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelEncryption.#ctor(OfficeOpenXml.EncryptionAlgorithm)">
            <summary>
            Constructor
            </summary>
            <param name="encryptionAlgorithm">Algorithm used to encrypt the package. Default is AES128</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelEncryption.IsEncrypted">
            <summary>
            Is the package encrypted
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelEncryption.Password">
            <summary>
            The password used to encrypt the workbook.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelEncryption.Algorithm">
            <summary>
            Algorithm used for encrypting the package. Default is AES 128-bit for standard and AES 256 for agile
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelEncryption.Version">
            <summary>
            The version of the encryption.        
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelEncryption.EncryptPackage(System.IO.Stream,System.String,OfficeOpenXml.EncryptionVersion,OfficeOpenXml.EncryptionAlgorithm)">
            <summary>
            Encrypts a stream using the office encryption.
            </summary>
            <param name="stream">The stream containing the non-encrypted package.</param>
            <param name="password">The password to encrypt with</param>
            <param name="encryptionVersion">The encryption version</param>
            <param name="algorithm">The algorithm to use for the encryption</param>
            <returns>A MemoryStream containing the encypted package</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelEncryption.DecryptPackage(System.IO.Stream,System.String)">
            <summary>
            Decrypts a stream using the office encryption.
            </summary>
            <param name="stream">The stream containing the encrypted package.</param>
            <param name="password">The password to decrypt with</param>
            <returns>A memorystream with the encypted package</returns>
        </member>
        <member name="T:OfficeOpenXml.ExcelWriteProtection">
            <summary>
            File sharing settings for the workbook.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWriteProtection.SetReadOnly(System.String,System.String)">
            <summary>
            Writes protectes the workbook with a password. 
            EPPlus uses SHA-512 as hash algorithm with a spin count of 100000.
            </summary>
            <param name="userName">The name of the person enforcing the write protection</param>
            <param name="password">The password. Setting the password to null or empty will remove the read-only mode.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWriteProtection.RemoveReadOnly">
            <summary>
            Remove any write protection set on the workbook
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWriteProtection.IsReadOnly">
            <summary>
            If the workbook is set to readonly and has a password set.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWriteProtection.UserName">
            <summary>
            The name of the person enforcing the write protection.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWriteProtection.ReadOnlyRecommended">
            <summary>
            If the author recommends that you open the workbook in read-only mode.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelFormulaAddress">
            <summary>
            Range address used in the formula parser
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelFormulaAddress.#ctor">
            <summary>
            Creates a Address object
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelFormulaAddress.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an Address object
            </summary>
            <param name="fromRow">start row</param>
            <param name="fromCol">start column</param>
            <param name="toRow">End row</param>
            <param name="toColumn">End column</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelFormulaAddress.#ctor(System.String,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Creates an Address object
            </summary>
            <param name="address">The formula address</param>
            <param name="worksheet">The worksheet</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelFormulaAddress.Address">
            <summary>
            The address for the range
            </summary>
            <remarks>Examples of addresses are "A1" "B1:C2" "A:A" "1:1" "A1:E2,G3:G5" </remarks>
        </member>
        <member name="P:OfficeOpenXml.ExcelFormulaAddress.Addresses">
            <summary>
            Addresses can be separated by a comma. If the address contains multiple addresses this list contains them.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.PictureAlignment">
            <summary>
            How a picture will be aligned in the header/footer
            </summary>
        </member>
        <member name="F:OfficeOpenXml.PictureAlignment.Left">
            <summary>
            The picture will be added to the left aligned text
            </summary>
        </member>
        <member name="F:OfficeOpenXml.PictureAlignment.Centered">
            <summary>
            The picture will be added to the centered text
            </summary>
        </member>
        <member name="F:OfficeOpenXml.PictureAlignment.Right">
            <summary>
            The picture will be added to the right aligned text
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelHeaderFooterText">
            <summary>
            Print header and footer 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelHeaderFooterText.LeftAlignedText">
            <summary>
            Get/set the text to appear on the left hand side of the header (or footer) on the worksheet.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelHeaderFooterText.CenteredText">
            <summary>
            Get/set the text to appear in the center of the header (or footer) on the worksheet.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelHeaderFooterText.RightAlignedText">
            <summary>
            Get/set the text to appear on the right hand side of the header (or footer) on the worksheet.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelHeaderFooterText.InsertPicture(System.IO.FileInfo,OfficeOpenXml.PictureAlignment)">
            <summary>
            Inserts a picture at the end of the text in the header or footer
            </summary>
            <param name="PictureFile">The image object containing the Picture</param>
            <param name="Alignment">Alignment. The image object will be inserted at the end of the Text.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelHeaderFooterText.InsertPicture(System.IO.Stream,OfficeOpenXml.Drawing.ePictureType,OfficeOpenXml.PictureAlignment)">
            <summary>
            Inserts a picture at the end of the text in the header or footer
            </summary>
            <param name="PictureStream">The stream containing the picture</param>
            <param name="pictureType">The image format of the picture stream</param>
            <param name="Alignment">Alignment. The image object will be inserted at the end of the Text.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelHeaderFooterText.InsertPicture(System.Drawing.Image,OfficeOpenXml.PictureAlignment)">
            <summary>
            Inserts a picture at the end of the text in the header or footer
            </summary>
            <param name="Picture">The image object containing the Picture</param>
            <param name="Alignment">Alignment. The image object will be inserted at the end of the Text.</param>
        </member>
        <member name="T:OfficeOpenXml.ExcelHeaderFooter">
            <summary>
            Represents the Header and Footer on an Excel Worksheet
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelHeaderFooter.PageNumber">
            <summary>
            The code for "current page #"
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelHeaderFooter.NumberOfPages">
            <summary>
            The code for "total pages"
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelHeaderFooter.FontColor">
            <summary>
            The code for "text font color"
            RGB Color is specified as RRGGBB
            Theme Color is specified as TTSNN where TT is the theme color Id, S is either "+" or "-" of the tint/shade value, NN is the tint/shade value.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelHeaderFooter.SheetName">
            <summary>
            The code for "sheet tab name"
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelHeaderFooter.FilePath">
            <summary>
            The code for "this workbook's file path"
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelHeaderFooter.FileName">
            <summary>
            The code for "this workbook's file name"
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelHeaderFooter.CurrentDate">
            <summary>
            The code for "date"
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelHeaderFooter.CurrentTime">
            <summary>
            The code for "time"
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelHeaderFooter.Image">
            <summary>
            The code for "picture as background"
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelHeaderFooter.OutlineStyle">
            <summary>
            The code for "outline style"
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelHeaderFooter.ShadowStyle">
            <summary>
            The code for "shadow style"
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelHeaderFooter.#ctor(System.Xml.XmlNamespaceManager,System.Xml.XmlNode,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            ExcelHeaderFooter Constructor
            </summary>
            <param name="nameSpaceManager"></param>
            <param name="topNode"></param>
            <param name="ws">The worksheet</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelHeaderFooter.AlignWithMargins">
            <summary>
            Align with page margins
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHeaderFooter.differentOddEven">
            <summary>
            Displas different headers and footers on odd and even pages.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHeaderFooter.differentFirst">
            <summary>
            Display different headers and footers on the first page of the worksheet.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHeaderFooter.ScaleWithDocument">
            <summary>
            The header and footer should scale as you use the ShrinkToFit property on the document
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHeaderFooter.OddHeader">
            <summary>
            Provides access to the header on odd numbered pages of the document.
            If you want the same header on both odd and even pages, then only set values in this ExcelHeaderFooterText class.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHeaderFooter.OddFooter">
            <summary>
            Provides access to the footer on odd numbered pages of the document.
            If you want the same footer on both odd and even pages, then only set values in this ExcelHeaderFooterText class.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHeaderFooter.EvenHeader">
            <summary>
            Provides access to the header on even numbered pages of the document.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHeaderFooter.EvenFooter">
            <summary>
            Provides access to the footer on even numbered pages of the document.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHeaderFooter.FirstHeader">
            <summary>
            Provides access to the header on the first page of the document.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHeaderFooter.FirstFooter">
            <summary>
            Provides access to the footer on the first page of the document.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHeaderFooter.Pictures">
            <summary>
            Vml drawings. Underlaying object for Header footer images
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelHeaderFooter.Save">
            <summary>
            Saves the header and footer information to the worksheet XML
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelHyperLink">
            <summary>
            HyperlinkClass
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelHyperLink.#ctor(System.String)">
            <summary>
            A new hyperlink with the specified URI
            </summary>
            <param name="uriString">The URI</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelHyperLink.#ctor(System.String,System.Boolean)">
            <summary>
            A new hyperlink with the specified URI. This syntax is obsolete
            </summary>
            <param name="uriString">The URI</param>
            <param name="dontEscape"></param>
        </member>
        <member name="M:OfficeOpenXml.ExcelHyperLink.#ctor(System.String,System.UriKind)">
            <summary>
            A new hyperlink with the specified URI and kind
            </summary>
            <param name="uriString">The URI</param>
            <param name="uriKind">Kind (absolute/relative or indeterminate)</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelHyperLink.#ctor(System.String,System.String)">
            <summary>
            Sheet internal reference
            </summary>
            <param name="referenceAddress">Address</param>
            <param name="display">Displayed text</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelHyperLink.ReferenceAddress">
            <summary>
            The Excel address for internal links.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHyperLink.Display">
            <summary>
            Displayed text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHyperLink.ToolTip">
            <summary>
            Tooltip
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHyperLink.ColSpann">
            <summary>
            If the hyperlink spans multiple columns
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHyperLink.RowSpann">
            <summary>
            If the hyperlink spans multiple rows
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHyperLink.OriginalUri">
            <summary>
            Used to handle non absolute URI's. 
            Is used if IsAblsoluteUri is true. The base URI will have a dummy value of xl://nonAbsolute.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelIgnoredError">
            <summary>
            Error ignore options for a worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelIgnoredError.NumberStoredAsText">
            <summary>
            Ignore errors when numbers are formatted as text or are preceded by an apostrophe
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelIgnoredError.CalculatedColumm">
            <summary>
            Calculated Column
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelIgnoredError.EmptyCellReference">
            <summary>
            Ignore errors when a formula refers an empty cell
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelIgnoredError.EvaluationError">
            <summary>
            Ignore errors when formulas fail to Evaluate
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelIgnoredError.Formula">
            <summary>
            Ignore errors when a formula in a region of your worksheet differs from other formulas in the same region.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelIgnoredError.FormulaRange">
            <summary>
            Ignore errors when formulas omit certain cells in a region.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelIgnoredError.ListDataValidation">
            <summary>
            Ignore errors when a cell's value in a Table does not comply with the Data Validation rules specified
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelIgnoredError.Address">
            <summary>
            The address
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelIgnoredError.TwoDigitTextYear">
            <summary>
            Ignore errors when formulas contain text formatted cells with years represented as 2 digits.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelIgnoredError.UnlockedFormula">
            <summary>
            Ignore errors when unlocked cells contain formulas
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelIgnoredErrorCollection">
            <summary>
            A collection of ignored errors per range for a worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelIgnoredErrorCollection.Item(System.Int32)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="Index">This index</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelIgnoredErrorCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelIgnoredErrorCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelIgnoredErrorCollection.Add(OfficeOpenXml.ExcelAddressBase)">
            <summary>
            Adds an IgnoreError item to the collection
            </summary>
            <param name="address">The address to add</param>
            <returns>The IgnoreError Item</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelIgnoredErrorCollection.System#Collections#Generic#IEnumerable{OfficeOpenXml#ExcelIgnoredError}#GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelIgnoredErrorCollection.Dispose">
            <summary>
            Called when the class is disposed.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelImageSettings">
            <summary>
            This class contains settings for text measurement.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelImageSettings.PrimaryImageHandler">
            <summary>
            This is the primary handler for images.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelImageSettings.SecondaryImageHandler">
            <summary>
            If the primary handler fails to measure the image, this one will be used.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelImageSettings.TertiaryImageHandler">
            <summary>
            If the secondary handler fails to measure the image, this one will be used.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelInitializationError">
            <summary>
            This class represents an error/Exception that has occured during initalization.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelInitializationError.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="errorMessage"></param>
            <param name="e"></param>
        </member>
        <member name="P:OfficeOpenXml.ExcelInitializationError.ErrorMessage">
            <summary>
            Error message describing the initialization error
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelInitializationError.TimestampUtc">
            <summary>
            Timestamp representing when the error occurred
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelInitializationError.Exception">
            <summary>
            The <see cref="P:OfficeOpenXml.ExcelInitializationError.Exception"/>
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelNamedRange">
            <summary>
            A named range. 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelNamedRange.#ctor(System.String,OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.ExcelWorksheet,System.String,System.Int32,System.Boolean)">
            <summary>
            A named range
            </summary>
            <param name="name">The name</param>
            <param name="nameSheet">The sheet containing the name. null if its a global name</param>
            <param name="sheet">Sheet where the address points</param>
            <param name="address">The address</param>
            <param name="index">The index in the collection</param>
            <param name="allowRelativeAddress">If true, the address will be retained as it is, if false the address will always be converted to an absolute/fixed address</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelNamedRange.Name">
            <summary>
            Name of the range
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelNamedRange.LocalSheetId">
            <summary>
            Is the named range local for the sheet 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelNamedRange.IsNameHidden">
            <summary>
            Is the name hidden
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelNamedRange.NameComment">
            <summary>
            A comment for the Name
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelNamedRange.ToString">
            <summary>
            Returns a string representation of the object
            </summary>
            <returns>The name of the range</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelNamedRange.Equals(System.Object)">
            <summary>
            Returns true if the name is equal to the obj
            </summary>
            <param name="obj">The object to compare with</param>
            <returns>true if equal</returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelNamedRange.AllowRelativeAddress">
            <summary>
             If true, the address will be retained as it is, if false the address will always be converted to an absolute/fixed address
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelNamedRange.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:OfficeOpenXml.ExcelNamedRangeCollection">
            <summary>
            Collection for named ranges
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelNamedRangeCollection.Add(System.String,OfficeOpenXml.ExcelRangeBase,System.Boolean)">
            <summary>
            Adds a new named range
            </summary>
            <param name="Name">The name</param>
            <param name="Range">The range</param>
            <param name="allowRelativeAddress">If true, the address will be retained as it is, if false the address will always be converted to an absolute/fixed address</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelNamedRangeCollection.Add(System.String,OfficeOpenXml.ExcelRangeBase)">
            <summary>
            Adds a new named range
            </summary>
            <param name="Name">The name</param>
            <param name="Range">The range</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelNamedRangeCollection.AddName(System.String,OfficeOpenXml.ExcelRangeBase,System.Boolean)">
            <summary>
            Adds the name without validation as Excel allows some names on load that is not permitted in the GUI
            </summary>
            <param name="Name">The Name</param>
            <param name="Range">The Range</param>
            <param name="allowRelativeAddress">If true, the address will be retained as it is, if false the address will always be converted to an absolute/fixed address</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelNamedRangeCollection.AddValue(System.String,System.Object)">
            <summary>
            Add a defined name referencing value
            </summary>
            <param name="Name">The name</param>
            <param name="value">The value for the name</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelNamedRangeCollection.AddFormula(System.String,System.String)">
            <summary>
            Add a defined name referencing a formula
            </summary>
            <param name="Name"></param>
            <param name="Formula"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelNamedRangeCollection.Remove(System.String)">
            <summary>
            Remove a defined name from the collection
            </summary>
            <param name="Name">The name</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelNamedRangeCollection.ContainsKey(System.String)">
            <summary>
            Checks collection for the presence of a key
            </summary>
            <param name="key">key to search for</param>
            <returns>true if the key is in the collection</returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelNamedRangeCollection.Count">
            <summary>
            The current number of items in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelNamedRangeCollection.Item(System.String)">
            <summary>
            Name indexer
            </summary>
            <param name="Name">The name (key) for a Named range</param>
            <returns>a reference to the range</returns>
            <remarks>
            Throws a KeyNotFoundException if the key is not in the collection.
            </remarks>
        </member>
        <member name="P:OfficeOpenXml.ExcelNamedRangeCollection.Item(System.Int32)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="Index">The index</param>
            <returns>The named range</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelNamedRangeCollection.GetEnumerator">
            <summary>
            Implement interface method IEnumerator&lt;ExcelNamedRange&gt; GetEnumerator()
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelNamedRangeCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implement interface method IEnumeratable GetEnumerator()
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ExcelPackage">
             <summary>
             Represents an Excel XLSX file package.  
             This is the top-level object to access all parts of the document.
             </summary>
             <remarks>
             <example>
             <code>
                 FileInfo newFile = new FileInfo(outputDir.FullName + @"\sample1.xlsx");
             	if (newFile.Exists)
             	{
             		newFile.Delete();  // ensures we create a new workbook
             		newFile = new FileInfo(outputDir.FullName + @"\sample1.xlsx");
             	}
             	using (ExcelPackage package = new ExcelPackage(newFile))
                 {
                     // add a new worksheet to the empty workbook
                     ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Inventory");
                     //Add the headers
                     worksheet.Cells[1, 1].Value = "ID";
                     worksheet.Cells[1, 2].Value = "Product";
                     worksheet.Cells[1, 3].Value = "Quantity";
                     worksheet.Cells[1, 4].Value = "Price";
                     worksheet.Cells[1, 5].Value = "Value";
            
                     //Add some items...
                     worksheet.Cells["A2"].Value = "12001";
                     worksheet.Cells["B2"].Value = "Nails";
                     worksheet.Cells["C2"].Value = 37;
                     worksheet.Cells["D2"].Value = 3.99;
            
                     worksheet.Cells["A3"].Value = "12002";
                     worksheet.Cells["B3"].Value = "Hammer";
                     worksheet.Cells["C3"].Value = 5;
                     worksheet.Cells["D3"].Value = 12.10;
            
                     worksheet.Cells["A4"].Value = "12003";
                     worksheet.Cells["B4"].Value = "Saw";
                     worksheet.Cells["C4"].Value = 12;
                     worksheet.Cells["D4"].Value = 15.37;
            
                     //Add a formula for the value-column
                     worksheet.Cells["E2:E4"].Formula = "C2*D2";
            
                        //Ok now format the values;
                     using (var range = worksheet.Cells[1, 1, 1, 5]) 
                      {
                         range.Style.Font.Bold = true;
                         range.Style.Fill.PatternType = ExcelFillStyle.Solid;
                         range.Style.Fill.BackgroundColor.SetColor(Color.DarkBlue);
                         range.Style.Font.Color.SetColor(Color.White);
                     }
            
                     worksheet.Cells["A5:E5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                     worksheet.Cells["A5:E5"].Style.Font.Bold = true;
            
                     worksheet.Cells[5, 3, 5, 5].Formula = string.Format("SUBTOTAL(9,{0})", new ExcelAddress(2,3,4,3).Address);
                     worksheet.Cells["C2:C5"].Style.Numberformat.Format = "#,##0";
                     worksheet.Cells["D2:E5"].Style.Numberformat.Format = "#,##0.00";
            
                     //Create an autofilter for the range
                     worksheet.Cells["A1:E4"].AutoFilter = true;
            
                     worksheet.Cells["A1:E5"].AutoFitColumns(0);
            
                     // lets set the header text 
                     worksheet.HeaderFooter.oddHeader.CenteredText = "&amp;24&amp;U&amp;\"Arial,Regular Bold\" Inventory";
                     // add the page number to the footer plus the total number of pages
                     worksheet.HeaderFooter.oddFooter.RightAlignedText =
                     string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);
                     // add the sheet name to the footer
                     worksheet.HeaderFooter.oddFooter.CenteredText = ExcelHeaderFooter.SheetName;
                     // add the file path to the footer
                     worksheet.HeaderFooter.oddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;
            
                     worksheet.PrinterSettings.RepeatRows = worksheet.Cells["1:2"];
                     worksheet.PrinterSettings.RepeatColumns = worksheet.Cells["A:G"];
            
                      // Change the sheet view to show it in page layout mode
                       worksheet.View.PageLayoutView = true;
            
                     // set some document properties
                     package.Workbook.Properties.Title = "Invertory";
                     package.Workbook.Properties.Author = "Jan Källman";
                     package.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 workbook using EPPlus";
            
                     // set some extended property values
                     package.Workbook.Properties.Company = "AdventureWorks Inc.";
            
                     // set some custom property values
                     package.Workbook.Properties.SetCustomPropertyValue("Checked by", "Jan Källman");
                     package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", "EPPlus");
            
                     // save our new workbook and we are done!
                     package.Save();
            
                   }
            
                   return newFile.FullName;
             </code>
             More samples can be found at  <a href="https://github.com/EPPlusSoftware/EPPlus/">https://github.com/EPPlusSoftware/EPPlus/</a>
             </example>
             </remarks>
        </member>
        <member name="F:OfficeOpenXml.ExcelPackage.schemaXmlExtension">
            <summary>
            Extention Schema types
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelPackage.schemaWorkbook">
            <summary>
            Main Xml schema name
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelPackage.schemaRelationships">
            <summary>
            Relationship schema name
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelPackage.MaxColumns">
            <summary>
            Maximum number of columns in a worksheet (16384). 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelPackage.MaxRows">
            <summary>
            Maximum number of rows in a worksheet (1048576). 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.#ctor">
            <summary>
            Create a new instance of the ExcelPackage. 
            Output is accessed through the Stream property, using the <see cref="M:OfficeOpenXml.ExcelPackage.SaveAs(System.IO.FileInfo)"/> method or later set the <see cref="P:OfficeOpenXml.ExcelPackage.File" /> property.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.#ctor(System.IO.FileInfo)">
            <summary>
            Create a new instance of the ExcelPackage class based on a existing file or creates a new file. 
            </summary>
            <param name="newFile">If newFile exists, it is opened.  Otherwise it is created from scratch.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.#ctor(System.String)">
            <summary>
            Create a new instance of the ExcelPackage class based on a existing file or creates a new file. 
            </summary>
            <param name="path">If newFile exists, it is opened.  Otherwise it is created from scratch.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.#ctor(System.IO.FileInfo,System.String)">
            <summary>
            Create a new instance of the ExcelPackage class based on a existing file or creates a new file. 
            </summary>
            <param name="newFile">If newFile exists, it is opened.  Otherwise it is created from scratch.</param>
            <param name="password">Password for an encrypted package</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.#ctor(System.String,System.String)">
            <summary>
            Create a new instance of the ExcelPackage class based on a existing file or creates a new file. 
            </summary>
            <param name="path">If newFile exists, it is opened.  Otherwise it is created from scratch.</param>
            <param name="password">Password for an encrypted package</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.#ctor(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Create a new instance of the ExcelPackage class based on a existing template.
            If newFile exists, it will be overwritten when the Save method is called
            </summary>
            <param name="newFile">The name of the Excel file to be created</param>
            <param name="template">The name of the Excel template to use as the basis of the new Excel file</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.#ctor(System.IO.FileInfo,System.IO.FileInfo,System.String)">
            <summary>
            Create a new instance of the ExcelPackage class based on a existing template.
            If newFile exists, it will be overwritten when the Save method is called
            </summary>
            <param name="newFile">The name of the Excel file to be created</param>
            <param name="template">The name of the Excel template to use as the basis of the new Excel file</param>
            <param name="password">Password to decrypted the template</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a new instance of the ExcelPackage class based on a existing template.
            If newFile exists, it will be overwritten when the Save method is called
            </summary>
            <param name="newFilePath">The name of the Excel file to be created</param>
            <param name="templatePath">The name of the Excel template to use as the basis of the new Excel file</param>
            <param name="password">Password to decrypted the template</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.#ctor(System.IO.FileInfo,System.Boolean)">
            <summary>
            Create a new instance of the ExcelPackage class based on a existing template.
            </summary>
            <param name="template">The name of the Excel template to use as the basis of the new Excel file</param>
            <param name="useStream">if true use a stream. If false create a file in the temp dir with a random name</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.#ctor(System.IO.FileInfo,System.Boolean,System.String)">
            <summary>
            Create a new instance of the ExcelPackage class based on a existing template.
            </summary>
            <param name="template">The name of the Excel template to use as the basis of the new Excel file</param>
            <param name="useStream">if true use a stream. If false create a file in the temp dir with a random name</param>
            <param name="password">Password to decrypted the template</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.#ctor(System.IO.Stream)">
            <summary>
            Create a new instance of the ExcelPackage class based on a stream
            </summary>
            <param name="newStream">The stream object can be empty or contain a package. The stream must be Read/Write</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.#ctor(System.IO.Stream,System.String)">
            <summary>
            Create a new instance of the ExcelPackage class based on a stream
            </summary>
            <param name="newStream">The stream object can be empty or contain a package. The stream must be Read/Write</param>
            <param name="Password">The password to decrypt the document</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Create a new instance of the ExcelPackage class based on a stream
            </summary>
            <param name="newStream">The output stream. Must be an empty read/write stream.</param>
            <param name="templateStream">This stream is copied to the output stream at load</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.#ctor(System.IO.Stream,System.IO.Stream,System.String)">
            <summary>
            Create a new instance of the ExcelPackage class based on a stream
            </summary>
            <param name="newStream">The output stream. Must be an empty read/write stream.</param>
            <param name="templateStream">This stream is copied to the output stream at load</param>
            <param name="Password">Password to decrypted the template</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.Init">
            <summary>
            Init values here
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.CreateFromTemplate(System.IO.FileInfo,System.String)">
            <summary>
            Create a new file from a template
            </summary>
            <param name="template">An existing xlsx file to use as a template</param>
            <param name="password">The password to decrypt the package.</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.WriteFileToStream(System.String,System.IO.Stream)">
            <summary>
            Pull request from  perkuypers to read open Excel workbooks
            </summary>
            <param name="path">Path</param>
            <param name="stream">Stream</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelPackage.ZipPackage">
            <summary>
            Returns a reference to the package
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPackage.Encryption">
            <summary>
            Information how and if the package is encrypted
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPackage.LicenseContext">
            <summary>
            To use the EPPlus library in debug mode a Licensetype must be specified.
            Use LicenseContext.NonCommercial if you use EPPlus in an non commercial context.
            Use LicenseContext.Commercial if you have purchased an license to use EPPlus
            See https://epplussoftware.com/developers/licenseexception
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPackage.Workbook">
            <summary>
            Returns a reference to the workbook component within the package.
            All worksheets and cells can be accessed through the workbook.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.Configure(System.Action{OfficeOpenXml.Configuration.ExcelPackageConfiguration})">
            <summary>
            Global configuration for the ExcelPackage class
            </summary>
            <param name="configHandler"></param>
        </member>
        <member name="P:OfficeOpenXml.ExcelPackage.InitializationErrors">
            <summary>
            Errors that has been logged during initialization of the ExcelPackage class.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPackage.DoAdjustDrawings">
            <summary>
            Automaticlly adjust drawing size when column width/row height are adjusted, depending on the drawings editBy property.
            Default True
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.SavePart(System.Uri,System.Xml.XmlDocument)">
            <summary>
            Saves the XmlDocument into the package at the specified Uri.
            </summary>
            <param name="uri">The Uri of the component</param>
            <param name="xmlDoc">The XmlDocument to save</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.SaveWorkbook(System.Uri,System.Xml.XmlDocument)">
            <summary>
            Saves the XmlDocument into the package at the specified Uri.
            </summary>
            <param name="uri">The Uri of the component</param>
            <param name="xmlDoc">The XmlDocument to save</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.Dispose">
            <summary>
            Closes the package.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.Save">
            <summary>
            Saves all the components back into the package.
            This method recursively calls the Save method on all sub-components.
            We close the package after the save is done.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.Save(System.String)">
            <summary>
            Saves all the components back into the package.
            This method recursively calls the Save method on all sub-components.
            The package is closed after it has ben saved
            Supply a password to encrypt the workbook with. 
            </summary>
            <param name="password">This parameter overrides the Workbook.Encryption.Password.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.SaveAs(System.IO.FileInfo)">
            <summary>
            Saves the workbook to a new file
            The package is closed after it has been saved        
            </summary>
            <param name="file">The file location</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.SaveAs(System.String)">
            <summary>
            Saves the workbook to a new file
            The package is closed after it has been saved        
            </summary>
            <param name="filePath">The file location</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.SaveAs(System.IO.FileInfo,System.String)">
            <summary>
            Saves the workbook to a new file
            The package is closed after it has been saved
            </summary>
            <param name="file">The file</param>
            <param name="password">The password to encrypt the workbook with. 
            This parameter overrides the Encryption.Password.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.SaveAs(System.String,System.String)">
            <summary>
            Saves the workbook to a new file
            The package is closed after it has been saved
            </summary>
            <param name="filePath">The file</param>
            <param name="password">The password to encrypt the workbook with. 
            This parameter overrides the Encryption.Password.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.SaveAs(System.IO.Stream)">
            <summary>
            Copies the Package to the Outstream
            The package is closed after it has been saved
            </summary>
            <param name="OutputStream">The stream to copy the package to</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.SaveAs(System.IO.Stream,System.String)">
            <summary>
            Copies the Package to the Outstream
            The package is closed after it has been saved
            </summary>
            <param name="OutputStream">The stream to copy the package to</param>
            <param name="password">The password to encrypt the workbook with. 
            This parameter overrides the Encryption.Password.</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelPackage.File">
            <summary>
            The output file. Null if no file is used
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.CloseStream">
            <summary>
            Close the internal stream
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPackage.Stream">
            <summary>
            The output stream. This stream is the not the encrypted package.
            To get the encrypted package use the SaveAs(stream) method.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPackage.Compression">
            <summary>
            Compression option for the package
            </summary>        
        </member>
        <member name="P:OfficeOpenXml.ExcelPackage.Compatibility">
            <summary>
            Compatibility settings for older versions of EPPlus.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPackage.Settings">
            <summary>
            Package generic settings
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.GetXmlFromUri(System.Uri)">
            <summary>
            Get the XmlDocument from an URI
            </summary>
            <param name="uri">The Uri to the part</param>
            <returns>The XmlDocument</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.GetAsByteArray">
            <summary>
            Saves and returns the Excel files as a bytearray.
            Note that the package is closed upon save.
            </summary>
            <example>      
            Example how to return a document from a Webserver...
            <code> 
             ExcelPackage package=new ExcelPackage();
             /**** ... Create the document ****/
             Byte[] bin = package.GetAsByteArray();
             Response.ContentType = "Application/vnd.ms-Excel";
             Response.AddHeader("content-disposition", "attachment;  filename=TheFile.xlsx");
             Response.BinaryWrite(bin);
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.GetAsByteArray(System.String)">
            <summary>
            Saves and returns the Excel files as a bytearray
            Note that the package is closed upon save
            </summary>
            <example>      
            Example how to return a document from a Webserver...
            <code> 
             ExcelPackage package=new ExcelPackage();
             /**** ... Create the document ****/
             Byte[] bin = package.GetAsByteArray();
             Response.ContentType = "Application/vnd.ms-Excel";
             Response.AddHeader("content-disposition", "attachment;  filename=TheFile.xlsx");
             Response.BinaryWrite(bin);
            </code>
            </example>
            <param name="password">The password to encrypt the workbook with. 
            This parameter overrides the Encryption.Password.</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.Load(System.IO.Stream)">
            <summary>
            Loads the specified package data from a stream.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.Load(System.IO.Stream,System.String)">
            <summary>
            Loads the specified package data from a stream.
            </summary>
            <param name="input">The input.</param>
            <param name="Password">The password to decrypt the document</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.Load(System.IO.Stream,System.IO.Stream,System.String)">
            <summary>
            
            </summary>
            <param name="input"></param>    
            <param name="output"></param>
            <param name="Password"></param>
        </member>
        <member name="T:OfficeOpenXml.ExcelPackageSettings">
            <summary>
            Package generic settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPackageSettings.DoGarbageCollectOnDispose">
            <summary>
            Do not call garbage collection when ExcelPackage is disposed.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPackageSettings.TextSettings">
            <summary>
            Manage text settings such as measurement of text for the Autofit functions.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPackageSettings.ImageSettings">
            <summary>
            Set the handler for getting image bounds. 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eOrientation">
            <summary>
            Printer orientation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eOrientation.Portrait">
            <summary>
            Portrait orientation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eOrientation.Landscape">
            <summary>
            Landscape orientation
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ePaperSize">
            <summary>
            Papersize
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Letter">
            <summary>
            Letter paper (8.5 in. by 11 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.LetterSmall">
            <summary>
            Letter small paper (8.5 in. by 11 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Tabloid">
            <summary>
            // Tabloid paper (11 in. by 17 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Ledger">
            <summary>
            Ledger paper (17 in. by 11 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Legal">
            <summary>
            Legal paper (8.5 in. by 14 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Statement">
            <summary>
            Statement paper (5.5 in. by 8.5 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Executive">
            <summary>
            Executive paper (7.25 in. by 10.5 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.A3">
            <summary>
            A3 paper (297 mm by 420 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.A4">
            <summary>
            A4 paper (210 mm by 297 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.A4Small">
            <summary>
            A4 small paper (210 mm by 297 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.A5">
            <summary>
            A5 paper (148 mm by 210 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.B4">
            <summary>
            B4 paper (250 mm by 353 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.B5">
            <summary>
            B5 paper (176 mm by 250 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Folio">
            <summary>
            Folio paper (8.5 in. by 13 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Quarto">
            <summary>
            Quarto paper (215 mm by 275 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Standard10_14">
            <summary>
            Standard paper (10 in. by 14 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Standard11_17">
            <summary>
            Standard paper (11 in. by 17 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Note">
            <summary>
            Note paper (8.5 in. by 11 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Envelope9">
            <summary>
            #9 envelope (3.875 in. by 8.875 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Envelope10">
            <summary>
            #10 envelope (4.125 in. by 9.5 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Envelope11">
            <summary>
            #11 envelope (4.5 in. by 10.375 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Envelope12">
            <summary>
            #12 envelope (4.75 in. by 11 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Envelope14">
            <summary>
            #14 envelope (5 in. by 11.5 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.C">
            <summary>
            C paper (17 in. by 22 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.D">
            <summary>
            D paper (22 in. by 34 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.E">
            <summary>
            E paper (34 in. by 44 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.DLEnvelope">
            <summary>
            DL envelope (110 mm by 220 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.C5Envelope">
            <summary>
            C5 envelope (162 mm by 229 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.C3Envelope">
            <summary>
            C3 envelope (324 mm by 458 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.C4Envelope">
            <summary>
            C4 envelope (229 mm by 324 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.C6Envelope">
            <summary>
            C6 envelope (114 mm by 162 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.C65Envelope">
            <summary>
            C65 envelope (114 mm by 229 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.B4Envelope">
            <summary>
            B4 envelope (250 mm by 353 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.B5Envelope">
            <summary>
            B5 envelope (176 mm by 250 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.B6Envelope">
            <summary>
            B6 envelope (176 mm by 125 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.ItalyEnvelope">
            <summary>
            Italy envelope (110 mm by 230 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.MonarchEnvelope">
            <summary>
            Monarch envelope (3.875 in. by 7.5 in.).
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Six3_4Envelope">
            <summary>
            6 3/4 envelope (3.625 in. by 6.5 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.USStandard">
            <summary>
            US standard fanfold (14.875 in. by 11 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.GermanStandard">
            <summary>
            German standard fanfold (8.5 in. by 12 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.GermanLegal">
            <summary>
            German legal fanfold (8.5 in. by 13 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.ISOB4">
            <summary>
            ISO B4 (250 mm by 353 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.JapaneseDoublePostcard">
            <summary>
             Japanese double postcard (200 mm by 148 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Standard9">
            <summary>
            Standard paper (9 in. by 11 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Standard10">
            <summary>
            Standard paper (10 in. by 11 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Standard15">
            <summary>
            Standard paper (15 in. by 11 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.InviteEnvelope">
            <summary>
            Invite envelope (220 mm by 220 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.LetterExtra">
            <summary>
            Letter extra paper (9.275 in. by 12 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.LegalExtra">
            <summary>
            Legal extra paper (9.275 in. by 15 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.TabloidExtra">
            <summary>
            Tabloid extra paper (11.69 in. by 18 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.A4Extra">
            <summary>
            A4 extra paper (236 mm by 322 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.LetterTransverse">
            <summary>
            Letter transverse paper (8.275 in. by 11 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.A4Transverse">
            <summary>
            A4 transverse paper (210 mm by 297 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.LetterExtraTransverse">
            <summary>
            Letter extra transverse paper (9.275 in. by 12 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.SuperA">
            <summary>
            SuperA/SuperA/A4 paper (227 mm by 356 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.SuperB">
            <summary>
            SuperB/SuperB/A3 paper (305 mm by 487 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.LetterPlus">
            <summary>
            Letter plus paper (8.5 in. by 12.69 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.A4Plus">
            <summary>
            A4 plus paper (210 mm by 330 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.A5Transverse">
            <summary>
            A5 transverse paper (148 mm by 210 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.JISB5Transverse">
            <summary>
            JIS B5 transverse paper (182 mm by 257 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.A3Extra">
            <summary>
            A3 extra paper (322 mm by 445 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.A5Extra">
            <summary>
            A5 extra paper (174 mm by 235 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.ISOB5">
            <summary>
            ISO B5 extra paper (201 mm by 276 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.A2">
            <summary>
            A2 paper (420 mm by 594 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.A3Transverse">
            <summary>
            A3 transverse paper (297 mm by 420 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.A3ExtraTransverse">
            <summary>
            A3 extra transverse paper (322 mm by 445 mm*/
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ePageOrder">
            <summary>
            Specifies printed page order
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePageOrder.DownThenOver">
            <summary>
            Order pages vertically first, then move horizontally.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePageOrder.OverThenDown">
            <summary>
            Order pages horizontally first, then move vertically
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelPrinterSettings">
            <summary>
            Printer settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.LeftMargin">
            <summary>
            Left margin in inches
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.RightMargin">
            <summary>
            Right margin in inches
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.TopMargin">
            <summary>
            Top margin in inches
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.BottomMargin">
            <summary>
            Bottom margin in inches
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.HeaderMargin">
            <summary>
            Header margin in inches
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.FooterMargin">
            <summary>
            Footer margin in inches
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.Orientation">
            <summary>
            Orientation 
            Portrait or Landscape
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.FitToWidth">
            <summary>
            Fit to Width in pages. 
            Set FitToPage to true when using this one. 
            0 is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.FitToHeight">
            <summary>
            Fit to height in pages. 
            Set FitToPage to true when using this one. 
            0 is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.Scale">
            <summary>
            Print scale
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.FitToPage">
            <summary>
            Fit To Page.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.ShowHeaders">
            <summary>
            Print headings (column letter and row numbers)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.RepeatRows">
            <summary>
            Print titles
            Rows to be repeated after each pagebreak.
            The address must be a full row address (ex. 1:1)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.RepeatColumns">
            <summary>
            Print titles
            Columns to be repeated after each pagebreak.
            The address must be a full column address (ex. A:A)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.PrintArea">
            <summary>
            The printarea.
            Null if no print area is set.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.ShowGridLines">
            <summary>
            Print gridlines 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.HorizontalCentered">
            <summary>
            Horizontal centered when printing 
            </summary>w
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.VerticalCentered">
            <summary>
            Vertical centered when printing 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.PageOrder">
            <summary>
            Specifies printed page order
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.BlackAndWhite">
            <summary>
            Print black and white
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.Draft">
            <summary>
            Print a draft
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.PaperSize">
            <summary>
            Paper size 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelPrinterSettings.CreateMargins">
            <summary>
            All or none of the margin attributes must exist. Create all att ones.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelProtectedRange">
             <summary>
             A protected range in a worksheet
            <seealso cref="T:OfficeOpenXml.ExcelProtection"/> 
            <seealso cref="T:OfficeOpenXml.ExcelSheetProtection"/> 
            <seealso cref="T:OfficeOpenXml.ExcelEncryption"/> 
             </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelProtectedRange.Name">
            <summary>
            The name of the protected range
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelProtectedRange.Address">
            <summary>
            The address of the protected range
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelProtectedRange.SetPassword(System.String)">
            <summary>
            Sets the password for the range
            </summary>
            <param name="password">The password used to generete the hash</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelProtectedRange.SecurityDescriptor">
            <summary>
            The security descriptor defines user accounts who may edit this range without providing a password to access the range.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelProtectedRangeCollection">
             <summary>
             A collection of protected ranges in the worksheet.
            <seealso cref="T:OfficeOpenXml.ExcelProtection"/> 
            <seealso cref="T:OfficeOpenXml.ExcelSheetProtection"/> 
            <seealso cref="T:OfficeOpenXml.ExcelEncryption"/> 
             </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelProtectedRangeCollection.Add(System.String,OfficeOpenXml.ExcelAddress)">
            <summary>
            Adds a new protected range
            </summary>
            <param name="name">The name of the protected range</param>
            <param name="address">The address within the worksheet</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelProtectedRangeCollection.Clear">
            <summary>
            Clears all protected ranges
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelProtectedRangeCollection.Contains(OfficeOpenXml.ExcelProtectedRange)">
            <summary>
            Checks if the collection contains a specific item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelProtectedRangeCollection.CopyTo(OfficeOpenXml.ExcelProtectedRange[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">The array</param>
            <param name="arrayIndex">The index</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelProtectedRangeCollection.Count">
            <summary>
            Numner of items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelProtectedRangeCollection.Remove(OfficeOpenXml.ExcelProtectedRange)">
            <summary>
            Remove the specified item from the collection
            </summary>
            <param name="item">The item</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelProtectedRangeCollection.IndexOf(OfficeOpenXml.ExcelProtectedRange)">
            <summary>
            Get the index in the collection of the supplied item
            </summary>
            <param name="item">The item</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelProtectedRangeCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the item at the specified indexx
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:OfficeOpenXml.ExcelProtectedRangeCollection.Item(System.Int32)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="index">The index to return</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelProtectedRangeCollection.System#Collections#Generic#IEnumerable{OfficeOpenXml#ExcelProtectedRange}#GetEnumerator">
            <summary>
            Get the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelProtectedRangeCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="T:OfficeOpenXml.ExcelProtection">
             <summary>
             Sets protection on the workbook level
            <seealso cref="T:OfficeOpenXml.ExcelEncryption"/> 
            <seealso cref="T:OfficeOpenXml.ExcelSheetProtection"/> 
             </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelProtection.SetPassword(System.String)">
            <summary>
            Sets a password for the workbook. This does not encrypt the workbook. 
            </summary>
            <param name="Password">The password. </param>
        </member>
        <member name="P:OfficeOpenXml.ExcelProtection.LockStructure">
            <summary>
            Locks the structure,which prevents users from adding or deleting worksheets or from displaying hidden worksheets.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelProtection.LockWindows">
            <summary>
            Locks the position of the workbook window.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelProtection.LockRevision">
            <summary>
            Lock the workbook for revision
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelProtection.WriteProtection">
            <summary>
            File sharing settings for the workbook.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelRange">
            <summary>
            A range of cells. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRange.Item(System.String)">
            <summary>
            Access the range using an address
            </summary>
            <param name="Address">The address</param>
            <returns>A range object</returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelRange.Item(System.Int32,System.Int32)">
            <summary>
            Access a single cell
            </summary>
            <param name="Row">The row</param>
            <param name="Col">The column</param>
            <returns>A range object</returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelRange.Item(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Access a range of cells
            </summary>
            <param name="FromRow">Start row</param>
            <param name="FromCol">Start column</param>
            <param name="ToRow">End Row</param>
            <param name="ToCol">End Column</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ExcelRangeBase">
            <summary>
            A range of cells 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelRangeBase._worksheet">
            <summary>
            Reference to the worksheet
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ChangeAddress">
            <summary>
            On change address handler
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SetUnknown(OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase._setValue,System.Object)">
            <summary>
            We dont know the address yet. Set the delegate first time a property is set.
            </summary>
            <param name="range"></param>
            <param name="valueMethod"></param>
            <param name="value"></param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SetSingle(OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase._setValue,System.Object)">
            <summary>
            Set a single cell
            </summary>
            <param name="range"></param>
            <param name="valueMethod"></param>
            <param name="value"></param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SetRange(OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase._setValue,System.Object)">
            <summary>
            Set a range
            </summary>
            <param name="range"></param>
            <param name="valueMethod"></param>
            <param name="value"></param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SetMultiRange(OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase._setValue,System.Object)">
            <summary>
            Set a multirange (A1:A2,C1:C2)
            </summary>
            <param name="range"></param>
            <param name="valueMethod"></param>
            <param name="value"></param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SetValueAddress(OfficeOpenXml.ExcelAddress,OfficeOpenXml.ExcelRangeBase._setValue,System.Object)">
            <summary>
            Set the property for an address
            </summary>
            <param name="address"></param>
            <param name="valueMethod"></param>
            <param name="value"></param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Set_SharedFormula(OfficeOpenXml.ExcelRangeBase,System.String,OfficeOpenXml.ExcelAddress,System.Boolean)">
            <summary>
            Handles shared formulas
            </summary>
            <param name="range">The range</param>
            <param name="value">The  formula</param>
            <param name="address">The address of the formula</param>
            <param name="IsArray">If the forumla is an array formula.</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.Style">
            <summary>
            The style object for the range.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.StyleName">
            <summary>
            The named style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.StyleID">
            <summary>
            The style ID. 
            It is not recomended to use this one. Use Named styles as an alternative.
            If you do, make sure that you use the Style.UpdateXml() method to update any new styles added to the workbook.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.Value">
            <summary>
            Set the range to a specific value
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SetErrorValue(OfficeOpenXml.eErrorType)">
            <summary>
            Sets the range to an Error value
            </summary>
            <param name="errorType">The type of error</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.Text">
            <summary>
            Returns the formatted value.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.AutoFitColumns">
            <summary>
            Set the column width from the content of the range. Columns outside of the worksheets dimension are ignored.
            The minimum width is the value of the ExcelWorksheet.defaultColumnWidth property.
            </summary>
            <remarks>
            Cells containing formulas must be calculated before autofit is called.
            Wrapped and merged cells are also ignored.
            </remarks>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.AutoFitColumns(System.Double)">
            <summary>
            Set the column width from the content of the range. Columns outside of the worksheets dimension are ignored.
            </summary>
            <remarks>
            This method will not work if you run in an environment that does not support GDI.
            Cells containing formulas are ignored if no calculation is made.
            Wrapped and merged cells are also ignored.
            </remarks>
            <param name="MinimumWidth">Minimum column width</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.AutoFitColumns(System.Double,System.Double)">
            <summary>
            Set the column width from the content of the range. Columns outside of the worksheets dimension are ignored.
            </summary>
            <remarks>
            This method will not work if you run in an environment that does not support GDI.
            Cells containing formulas are ignored if no calculation is made.
            Wrapped and merged cells are also ignored.
            </remarks>        
            <param name="MinimumWidth">Minimum column width</param>
            <param name="MaximumWidth">Maximum column width</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.Formula">
            <summary>
            Gets or sets a formula for a range.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.FormulaR1C1">
            <summary>
            Gets or Set a formula in R1C1 format.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.CreateHtmlExporter">
            <summary>
            Creates an <see cref="T:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter"/> for html export of this range.
            </summary>
            <returns>A html exporter</returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.Hyperlink">
            <summary>
            Set the Hyperlink property for a range of cells
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SetHyperlink(System.Uri)">
            <summary>
            Sets the hyperlink property
            </summary>
            <param name="uri">The URI to set</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SetHyperlink(OfficeOpenXml.ExcelHyperLink)">
            <summary>
            Sets the Hyperlink property using the ExcelHyperLink class.
            </summary>
            <param name="uri">The <see cref="T:OfficeOpenXml.ExcelHyperLink"/> uri to set</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SetHyperlink(OfficeOpenXml.ExcelRange,System.String)">
            <summary>
            Sets the Hyperlink property to an url within the workbook.
            </summary>
            <param name="range">A reference within the same workbook</param>
            <param name="display">The displayed text in the cell. If display is null or empty, the address of the range will be set.</param>f
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SetHyperlink(OfficeOpenXml.ExcelRange)">
            <summary>
            Sets the Hyperlink property to an url within the workbook. The hyperlink will display the value of the cell.
            </summary>
            <param name="range">A reference within the same workbook</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.Merge">
            <summary>
            If the cells in the range are merged.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.AutoFilter">
            <summary>
            Set an autofilter for the range
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.IsRichText">
            <summary>
            If the value is in richtext format.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.IsTable">
            <summary>
            Returns true if the range is a table. If the range partly matches a table range false will be returned.
            <seealso cref="P:OfficeOpenXml.ExcelRangeBase.IsTable"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.GetTable">
            <summary>
            Returns the <see cref="T:OfficeOpenXml.Table.ExcelTable"/> if the range is a table. 
            If the range doesn't or partly matches a table range, null is returned.
            <seealso cref="P:OfficeOpenXml.ExcelRangeBase.IsTable"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Insert(OfficeOpenXml.eShiftTypeInsert)">
            <summary>
            Insert cells into the worksheet and shift the cells to the selected direction.
            </summary>
            <param name="shift">The direction that the cells will shift.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Delete(OfficeOpenXml.eShiftTypeDelete)">
            <summary>
            Delete the range from the worksheet and shift affected cells in the selected direction.
            </summary>
            <param name="shift">The direction that the cells will shift.</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.IsArrayFormula">
            <summary>
            Is the range a part of an Arrayformula
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelRangeBase._rtc">
            <summary>
            The richtext collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.RichText">
            <summary>
            The cell value is rich text formatted. 
            The RichText-property only apply to the left-top cell of the range.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.Comment">
            <summary>
            Returns the comment object of the first cell in the range
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.ThreadedComment">
            <summary>
            Returns the threaded comment object of the first cell in the range
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.Worksheet">
            <summary>
            WorkSheet object 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.FullAddress">
            <summary>
            Address including sheet name
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.FullAddressAbsolute">
            <summary>
            Address including sheetname
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SetValueRichText(System.Object)">
            <summary>
            Set the value without altering the richtext property
            </summary>
            <param name="value">the value</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ClearFormulas">
            <summary>
            Removes all formulas within the range, but keeps the calculated values.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ClearFormulaValues">
            <summary>
            Removes all values of cells with formulas, but keeps the formulas.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.ConditionalFormatting">
            <summary>
            Conditional Formatting for this range.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.DataValidation">
            <summary>
            Data validation for this range.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.GetValue``1">
            <summary>
                Convert cell value to desired type, including nullable structs.
                When converting blank string to nullable struct (e.g. ' ' to int?) null is returned.
                When attempted conversion fails exception is passed through.
            </summary>
            <typeparam name="T">
                The type to convert to.
            </typeparam>
            <returns>
                The <see cref="P:OfficeOpenXml.ExcelRangeBase.Value"/> converted to <typeparamref name="T"/>.
            </returns>
            <remarks>
                If  <see cref="P:OfficeOpenXml.ExcelRangeBase.Value"/> is string, parsing is performed for output types of DateTime and TimeSpan, which if fails throws <see cref="T:System.FormatException"/>.
                Another special case for output types of DateTime and TimeSpan is when input is double, in which case <see cref="M:System.DateTime.FromOADate(System.Double)"/>
                is used for conversion. This special case does not work through other types convertible to double (e.g. integer or string with number).
                In all other cases 'direct' conversion <see cref="M:System.Convert.ChangeType(System.Object,System.Type)"/> is performed.
            </remarks>
            <exception cref="T:System.FormatException">
                 <see cref="P:OfficeOpenXml.ExcelRangeBase.Value"/> is string and its format is invalid for conversion (parsing fails)
            </exception>
            <exception cref="T:System.InvalidCastException">
                 <see cref="P:OfficeOpenXml.ExcelRangeBase.Value"/> is not string and direct conversion fails
            </exception>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Offset(System.Int32,System.Int32)">
            <summary>
            Get a range with an offset from the top left cell.
            The new range has the same dimensions as the current range
            </summary>
            <param name="RowOffset">Row Offset</param>
            <param name="ColumnOffset">Column Offset</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Offset(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get a range with an offset from the top left cell.
            </summary>
            <param name="RowOffset">Row Offset</param>
            <param name="ColumnOffset">Column Offset</param>
            <param name="NumberOfRows">Number of rows. Minimum 1</param>
            <param name="NumberOfColumns">Number of colums. Minimum 1</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.AddComment(System.String,System.String)">
            <summary>
            Adds a new comment for the range.
            If this range contains more than one cell, the top left comment is returned by the method.
            </summary>
            <param name="Text">The text for the comment</param>
            <param name="Author">The author for the comment. If this property is null or blank EPPlus will set it to the identity of the ClaimsPrincipal if available otherwise to "Anonymous"</param>
            <returns>A reference comment of the top left cell</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.AddThreadedComment">
            <summary>
            Adds a new threaded comment for the range.
            If this range contains more than one cell, the top left comment is returned by the method.
            </summary>
            <returns>A reference comment of the top left cell</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Copy(OfficeOpenXml.ExcelRangeBase)">
            <summary>
            Copies the range of cells to another range. 
            </summary>
            <param name="Destination">The top-left cell where the range will be copied.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Copy(OfficeOpenXml.ExcelRangeBase,System.Nullable{OfficeOpenXml.ExcelRangeCopyOptionFlags})">
            <summary>
            Copies the range of cells to an other range
            </summary>
            <param name="Destination">The start cell where the range will be copied.</param>
            <param name="excelRangeCopyOptionFlags">Cell properties that will not be copied.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Copy(OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeCopyOptionFlags[])">
            <summary>
            Copies the range of cells to an other range
            </summary>
            <param name="Destination">The start cell where the range will be copied.</param>
            <param name="excelRangeCopyOptionFlags">Cell properties that will not be copied.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.CopyStyles(OfficeOpenXml.ExcelRangeBase)">
            <summary>
            Copy the styles from the source range to the destination range.
            If the destination range is larger than the source range, the styles of the column to the right and the row at the bottom will be expanded to the destination.
            </summary>
            <param name="Destination">The destination range</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Clear">
            <summary>
            Clear all cells
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.CreateArrayFormula(System.String)">
            <summary>
            Creates an array-formula.
            </summary>
            <param name="ArrayFormula">The formula</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ClearValue(OfficeOpenXml.Core.CellStore.CellStoreValue,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Clears either value or style for a range from the cellstore.
            </summary>
            <param name="values"></param>
            <param name="clearValue"></param>
            <param name="fromRow"></param>
            <param name="fromCol"></param>
            <param name="rows"></param>
            <param name="cols"></param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.Current">
            <summary>
            The current range when enumerating
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.System#Collections#IEnumerator#Current">
            <summary>
            The current range when enumerating
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.MoveNext">
            <summary>
            Iterate to the next cell
            </summary>
            <returns>False if no more cells exists</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Reset">
            <summary>
            Reset the enumerator
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Sort">
            <summary>
            Sort the range by value of the first column, Ascending.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Sort(System.Int32,System.Boolean)">
            <summary>
            Sort the range by value of the supplied column, Ascending.
            <param name="column">The column to sort by within the range. Zerobased</param>
            <param name="descending">Descending if true, otherwise Ascending. Default Ascending. Zerobased</param>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Sort(System.Int32[],System.Boolean[],System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
            <summary>
            Sort the range by value
            </summary>
            <param name="columns">The column(s) to sort by within the range. Zerobased</param>
            <param name="descending">Descending if true, otherwise Ascending. Default Ascending. Zerobased</param>
            <param name="culture">The CultureInfo used to compare values. A null value means CurrentCulture</param>
            <param name="compareOptions">String compare option</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SortInternal(System.Int32[],System.Boolean[],System.Collections.Generic.Dictionary{System.Int32,System.String[]},System.Globalization.CultureInfo,System.Globalization.CompareOptions,OfficeOpenXml.Table.ExcelTable,System.Boolean)">
            <summary>
            Sort the range by value
            </summary>
            <param name="columns">The column(s) to sort by within the range. Zerobased</param>
            <param name="descending">Descending if true, otherwise Ascending. Default Ascending. Zerobased</param>
            <param name="customLists">A Dictionary containing custom lists indexed by column</param>
            <param name="culture">The CultureInfo used to compare values. A null value means CurrentCulture</param>
            <param name="compareOptions">String compare option</param>
            <param name="table"><see cref="T:OfficeOpenXml.Table.ExcelTable"/> to be sorted</param>
            <param name="leftToRight">Indicates if the range should be sorted left to right (by column) instead of top-down (by row)</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SortInternal(OfficeOpenXml.Sorting.SortOptionsBase)">
            <summary>
            Sort the range by value
            </summary>
            <param name="options">An instance of <see cref="T:OfficeOpenXml.Sorting.RangeSortOptions"/> where sort parameters can be set</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Sort(System.Action{OfficeOpenXml.Sorting.RangeSortOptions})">
            <summary>
            Sort the range by value. Supports top-down and left to right sort.
            </summary>
            <param name="configuration">An action of <see cref="T:OfficeOpenXml.Sorting.RangeSortOptions"/> where sort parameters can be set.</param>
            <example> 
            <code>
            // 1. Sort rows (top-down)
            
            // The Column function takes the zero based column index in the range
            worksheet.Cells["A1:D15"].Sort(x => x.SortBy.Column(0).ThenSortBy.Column(1, eSortOrder.Descending));
            
            // 2. Sort columns(left to right)
            // The Row function takes the zero based row index in the range
            worksheet.Cells["A1:D15"].Sort(x => x.SortLeftToRightBy.Row(0));
            
            // 3. Sort using a custom list
            worksheet.Cells["A1:D15"].Sort(x => x.SortBy.Column(0).UsingCustomList("S", "M", "L", "XL"));
            worksheet.Cells["A1:D15"].Sort(x => x.SortLeftToRightBy.Row(0).UsingCustomList("S", "M", "L", "XL"));
            </code>
            </example>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Sort(OfficeOpenXml.Sorting.RangeSortOptions)">
            <summary>
            Sort the range by value. Use RangeSortOptions.Create() to create an instance of the sort options, then
            use the <see cref="P:OfficeOpenXml.Sorting.RangeSortOptions.SortBy"/> or <see cref="P:OfficeOpenXml.Sorting.RangeSortOptions.SortLeftToRightBy"/> properties to build up your sort parameters.
            </summary>
            <param name="options"><see cref="T:OfficeOpenXml.Sorting.RangeSortOptions">Options</see> for the sort</param>
            <example> 
            <code>
            var options = RangeSortOptions.Create();
            var builder = options.SortBy.Column(0);
            builder.ThenSortBy.Column(2).UsingCustomList("S", "M", "L", "XL");
            builder.ThenSortBy.Column(3);
            worksheet.Cells["A1:D15"].Sort(options);
            </code>
            </example>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.GetName">
            <summary>
            If the range is a name or a table, return the name.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.EntireColumn">
            <summary>
            A reference to the column properties for column(s= referenced by this range.
            If multiple ranges are addressed (e.g a1:a2,c1:c3), only the first address is used.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.EntireRow">
            <summary>
            A reference to the row properties for row(s) referenced by this range.
            If multiple ranges are addressed (e.g a1:a2,c1:c3), only the first address is used.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.GetCellValue``1">
            <summary>
            Gets the typed value of a cell 
            </summary>
            <typeparam name="T">The returned type</typeparam>
            <returns>The value of the cell</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.GetCellValue``1(System.Int32)">
            <summary>
            Gets the value of a cell using an offset from the top-left cell in the range.
            </summary>
            <typeparam name="T">The returned type</typeparam>
            <param name="columnOffset">Column offset from the top-left cell in the range</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.GetCellValue``1(System.Int32,System.Int32)">
            <summary>
            Gets the value of a cell using an offset from the top-left cell in the range.
            </summary>
            <typeparam name="T">The returned type</typeparam>
            <param name="rowOffset">Row offset from the top-left cell in the range</param>
            <param name="columnOffset">Column offset from the top-left cell in the range</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SetCellValue(System.Int32,System.Int32,System.Object)">
            <summary>
            Sets the value of a cell using an offset from the top-left cell in the range.
            </summary>
            <param name="rowOffset">Row offset from the top-left cell in the range</param>
            <param name="columnOffset">Column offset from the top-left cell in the range</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.FillNumber">
            <summary>
            Fills the range by adding 1 to each cell starting from the value in the top left cell by column
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.FillNumber(System.Nullable{System.Double},System.Double)">
            <summary>
            Fills a range by adding the step value to the start Value. If <paramref name="startValue"/> is null the first value in the row/column is used.
            Fill is done by column from top to bottom
            </summary>
            <param name="startValue">The start value of the first cell. If this value is null the value of the first cell is used.</param>
            <param name="stepValue">The value used for each step</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.FillNumber(System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams})">
            <summary>
            Fills a range by using the argument options. 
            </summary>
            <param name="options">The option to configure the fill.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.FillDateTime">
            <summary>
            Fills the range by adding 1 day to each cell starting from the value in the top left cell by column.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.FillDateTime(System.Nullable{System.DateTime},OfficeOpenXml.eDateTimeUnit,System.Int32)">
            <summary>
            Fills the range by adding 1 day to each cell per column starting from <paramref name="startValue"/>.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.FillDateTime(System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillDateParams})">
            <summary>
            Fill the range with dates.
            </summary>
            <param name="options">Options how to perform the fill</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.FillList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Fills the range columnwise using the values in the list. 
            </summary>
            <typeparam name="T">Type used in the list.</typeparam>
            <param name="list">The list to use.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.FillList``1(System.Collections.Generic.IEnumerable{``0},System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillListParams})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="options"></param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromDataReader(System.Data.IDataReader,System.Boolean,System.String,OfficeOpenXml.Table.TableStyles)">
            <summary>
            Load the data from the datareader starting from the top left cell of the range
            </summary>
            <param name="Reader">The datareader to loadfrom</param>
            <param name="PrintHeaders">Print the column caption property (if set) or the columnname property if not, on first row</param>
            <param name="TableName">The name of the table</param>
            <param name="TableStyle">The table style to apply to the data</param>
            <returns>The filled range</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromDataReader(System.Data.IDataReader,System.Boolean)">
            <summary>
            Load the data from the datareader starting from the top left cell of the range
            </summary>
            <param name="Reader">The datareader to load from</param>
            <param name="PrintHeaders">Print the caption property (if set) or the columnname property if not, on first row</param>
            <returns>The filled range</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromDataTable(System.Data.DataTable,System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles})">
            <summary>
            Load the data from the datatable starting from the top left cell of the range
            </summary>
            <param name="Table">The datatable to load</param>
            <param name="PrintHeaders">Print the column caption property (if set) or the columnname property if not, on first row</param>
            <param name="TableStyle">The table style to apply to the data</param>
            <returns>The filled range</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromDataTable(System.Data.DataTable,System.Boolean)">
            <summary>
            Load the data from the datatable starting from the top left cell of the range
            </summary>
            <param name="Table">The datatable to load</param>
            <param name="PrintHeaders">Print the caption property (if set) or the columnname property if not, on first row</param>
            <returns>The filled range</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromDataTable(System.Data.DataTable)">
            <summary>
            Load the data from the datatable starting from the top left cell of the range
            </summary>
            <param name="table">The datatable to load</param>
            <returns>The filled range</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromDataTable(System.Data.DataTable,System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromDataTableParams})">
            <summary>
            Load the data from the <see cref="T:System.Data.DataTable"/> starting from the top left cell of the range
            </summary>
            <param name="table"></param>
            <param name="paramsConfig"><see cref="T:System.Action`1"/> to provide parameters to the function</param>
            <example>
            <code>
            sheet.Cells["C1"].LoadFromDataTable(dataTable, c =>
            {
                c.PrintHeaders = true;
                c.TableStyle = TableStyles.Dark1;
            });
            </code>
            </example>
            <returns>The filled range</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromArrays(System.Collections.Generic.IEnumerable{System.Object[]})">
            <summary>
            Loads data from the collection of arrays of objects into the range, starting from
            the top-left cell.
            </summary>
            <param name="Data">The data.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Load a collection into a the worksheet starting from the top left row of the range.
            </summary>
            <typeparam name="T">The datatype in the collection</typeparam>
            <param name="Collection">The collection to load</param>
            <returns>The filled range</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Load a collection of T into the worksheet starting from the top left row of the range.
            Default option will load all public instance properties of T
            </summary>
            <typeparam name="T">The datatype in the collection</typeparam>
            <param name="Collection">The collection to load</param>
            <param name="PrintHeaders">Print the property names on the first row. If the property is decorated with a <see cref="T:System.ComponentModel.DisplayNameAttribute"/> or a <see cref="T:System.ComponentModel.DescriptionAttribute"/> that attribute will be used instead of the reflected member name.</param>
            <returns>The filled range</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles})">
            <summary>
            Load a collection of T into the worksheet starting from the top left row of the range.
            Default option will load all public instance properties of T
            </summary>
            <typeparam name="T">The datatype in the collection</typeparam>
            <param name="Collection">The collection to load</param>
            <param name="PrintHeaders">Print the property names on the first row. If the property is decorated with a <see cref="T:System.ComponentModel.DisplayNameAttribute"/> or a <see cref="T:System.ComponentModel.DescriptionAttribute"/> that attribute will be used instead of the reflected member name.</param>
            <param name="TableStyle">Will create a table with this style. If set to TableStyles.None no table will be created</param>
            <returns>The filled range</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles},System.Reflection.BindingFlags,System.Reflection.MemberInfo[])">
            <summary>
            Load a collection into the worksheet starting from the top left row of the range.
            </summary>
            <typeparam name="T">The datatype in the collection</typeparam>
            <param name="Collection">The collection to load</param>
            <param name="PrintHeaders">Print the property names on the first row. Any underscore in the property name will be converted to a space. If the property is decorated with a <see cref="T:System.ComponentModel.DisplayNameAttribute"/> or a <see cref="T:System.ComponentModel.DescriptionAttribute"/> that attribute will be used instead of the reflected member name.</param>
            <param name="TableStyle">Will create a table with this style. If set to TableStyles.None no table will be created</param>
            <param name="memberFlags">Property flags to use</param>
            <param name="Members">The properties to output. Must be of type T</param>
            <returns>The filled range</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0},System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromCollectionParams})">
            <summary>
            Load a collection into the worksheet starting from the top left row of the range.
            </summary>
            <typeparam name="T">The datatype in the collection</typeparam>
            <param name="collection">The collection to load</param>
            <param name="paramsConfig"><see cref="T:System.Action`1"/> to provide parameters to the function</param>
            <example>
            <code>
            sheet.Cells["C1"].LoadFromCollection(items, c =>
            {
                c.PrintHeaders = true;
                c.TableStyle = TableStyles.Dark1;
            });
            </code>
            </example>
            <returns>The filled range</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromText(System.String)">
            <summary>
            Loads a CSV text into a range starting from the top left cell.
            Default settings is Comma separation
            </summary>
            <param name="Text">The Text</param>
            <returns>The range containing the data</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromText(System.String,OfficeOpenXml.ExcelTextFormat)">
            <summary>
            Loads a CSV text into a range starting from the top left cell.
            </summary>
            <param name="Text">The Text</param>
            <param name="Format">Information how to load the text</param>
            <returns>The range containing the data</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromText(System.String,OfficeOpenXml.ExcelTextFormat,System.Nullable{OfficeOpenXml.Table.TableStyles},System.Boolean)">
            <summary>
            Loads a CSV text into a range starting from the top left cell.
            </summary>
            <param name="Text">The Text</param>
            <param name="Format">Information how to load the text</param>
            <param name="TableStyle">Create a table with this style. If this parameter is not null no table will be created.</param>
            <param name="FirstRowIsHeader">Use the first row as header</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromText(System.IO.FileInfo)">
            <summary>
            Loads a CSV file into a range starting from the top left cell using ASCII Encoding.
            </summary>
            <param name="TextFile">The Textfile</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromText(System.IO.FileInfo,OfficeOpenXml.ExcelTextFormat)">
            <summary>
            Loads a CSV file into a range starting from the top left cell.
            </summary>
            <param name="TextFile">The Textfile</param>
            <param name="Format">Information how to load the text</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromText(System.IO.FileInfo,OfficeOpenXml.ExcelTextFormat,System.Nullable{OfficeOpenXml.Table.TableStyles},System.Boolean)">
            <summary>
            Loads a CSV file into a range starting from the top left cell.
            </summary>
            <param name="TextFile">The Textfile</param>
            <param name="Format">Information how to load the text</param>
            <param name="TableStyle">Create a table with this style</param>
            <param name="FirstRowIsHeader">Use the first row as header</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}})">
            <summary>
            Load a collection of dictionaries (or dynamic/ExpandoObjects) into the worksheet starting from the top left row of the range.
            These dictionaries should have the same set of keys.
            </summary>
            <param name="items">A list of dictionaries/></param>
            <returns>The filled range</returns>
            <example>
            <code>
             var items = new List&lt;IDictionary&lt;string, object&gt;&gt;()
               {
                   new Dictionary&lt;string, object&gt;()
                   { 
                       { "Id", 1 },
                       { "Name", "TestName 1" }
                   },
                   new Dictionary&lt;string, object&gt;()
                   {
                       { "Id", 2 },
                       { "Name", "TestName 2" }
                   }
               };
               using(var package = new ExcelPackage())
               {
                   var sheet = package.Workbook.Worksheets.Add("test");
                   var r = sheet.Cells["A1"].LoadFromDictionaries(items);
               }
            </code>
            </example>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}},System.Boolean)">
            <summary>
            Load a collection of dictionaries (or dynamic/ExpandoObjects) into the worksheet starting from the top left row of the range.
            These dictionaries should have the same set of keys.
            </summary>
            <param name="items">A list of dictionaries/></param>
            <param name="printHeaders">If true the key names from the first instance will be used as headers</param>
            <returns>The filled range</returns>
            <example>
            <code>
             var items = new List&lt;IDictionary&lt;string, object&gt;&gt;()
               {
                   new Dictionary&lt;string, object&gt;()
                   { 
                       { "Id", 1 },
                       { "Name", "TestName 1" }
                   },
                   new Dictionary&lt;string, object&gt;()
                   {
                       { "Id", 2 },
                       { "Name", "TestName 2" }
                   }
               };
               using(var package = new ExcelPackage())
               {
                   var sheet = package.Workbook.Worksheets.Add("test");
                   var r = sheet.Cells["A1"].LoadFromDictionaries(items, true);
               }
            </code>
            </example>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}},System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles})">
            <summary>
            Load a collection of dictionaries (or dynamic/ExpandoObjects) into the worksheet starting from the top left row of the range.
            These dictionaries should have the same set of keys.
            </summary>
            <param name="items">A list of dictionaries/></param>
            <param name="printHeaders">If true the key names from the first instance will be used as headers</param>
            <param name="tableStyle">Will create a table with this style. If set to TableStyles.None no table will be created</param>
            <returns>The filled range</returns>
            <example>
            <code>
             var items = new List&lt;IDictionary&lt;string, object&gt;&gt;()
               {
                   new Dictionary&lt;string, object&gt;()
                   { 
                       { "Id", 1 },
                       { "Name", "TestName 1" }
                   },
                   new Dictionary&lt;string, object&gt;()
                   {
                       { "Id", 2 },
                       { "Name", "TestName 2" }
                   }
               };
               using(var package = new ExcelPackage())
               {
                   var sheet = package.Workbook.Worksheets.Add("test");
                   var r = sheet.Cells["A1"].LoadFromDictionaries(items, true, TableStyles.None);
               }
            </code>
            </example>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}},System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Load a collection of dictionaries (or dynamic/ExpandoObjects) into the worksheet starting from the top left row of the range.
            These dictionaries should have the same set of keys.
            </summary>
            <param name="items">A list of dictionaries</param>
            <param name="printHeaders">If true the key names from the first instance will be used as headers</param>
            <param name="tableStyle">Will create a table with this style. If set to TableStyles.None no table will be created</param>
            <param name="keys">Keys that should be used, keys omitted will not be included</param>
            <returns>The filled range</returns>
            <example>
            <code>
             var items = new List&lt;IDictionary&lt;string, object&gt;&gt;()
               {
                   new Dictionary&lt;string, object&gt;()
                   { 
                       { "Id", 1 },
                       { "Name", "TestName 1" }
                   },
                   new Dictionary&lt;string, object&gt;()
                   {
                       { "Id", 2 },
                       { "Name", "TestName 2" }
                   }
               };
               using(var package = new ExcelPackage())
               {
                   var sheet = package.Workbook.Worksheets.Add("test");
                   var r = sheet.Cells["A1"].LoadFromDictionaries(items, true, TableStyles.None, null);
               }
            </code>
            </example>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}},System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams})">
            <summary>
            Load a collection of dictionaries (or dynamic/ExpandoObjects) into the worksheet starting from the top left row of the range.
            These dictionaries should have the same set of keys.
            </summary>
            <param name="items">A list of dictionaries/ExpandoObjects</param>
            <param name="paramsConfig"><see cref="T:System.Action`1"/> to provide parameters to the function</param>
            <example>
            sheet.Cells["C1"].LoadFromDictionaries(items, c =>
            {
                c.PrintHeaders = true;
                c.TableStyle = TableStyles.Dark1;
            });
            </example>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ToDataTable">
            <summary>
            Returns the range as a <see cref="T:System.Data.DataTable"/> with the <see cref="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.Default"/> settings.
            </summary>
            <returns>A <see cref="T:System.Data.DataTable"/> representing the range.</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ToDataTable(System.Action{OfficeOpenXml.Export.ToDataTable.ToDataTableOptions})">
            <summary>
            Returns the range as a <see cref="T:System.Data.DataTable"/> with the option supplied.
            </summary>
            <param name="configHandler">Configures the settings used to convert the range.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> representing the range.</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ToDataTable(OfficeOpenXml.Export.ToDataTable.ToDataTableOptions)">
            <summary>
            Returns the range as a <see cref="T:System.Data.DataTable"/> with the option supplied.
            </summary>
            <param name="options">Sets the settings used to convert the range.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> representing the range.</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ToDataTable(System.Action{OfficeOpenXml.Export.ToDataTable.ToDataTableOptions},System.Data.DataTable)">
            <summary>
            Returns the range as a <see cref="T:System.Data.DataTable"/> with the option supplied.
            </summary>
            <param name="configHandler">Configures the settings used to convert the range.</param>
            <param name="dataTable">The data table to add the range data to.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> representing the range.</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ToDataTable(System.Data.DataTable)">
            <summary>
            Returns the range as a <see cref="T:System.Data.DataTable"/> with the option supplied.
            </summary>
            <param name="dataTable">The data table to add the range data to.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> representing the range.</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ToDataTable(OfficeOpenXml.Export.ToDataTable.ToDataTableOptions,System.Data.DataTable)">
            <summary>
            Returns the range as a <see cref="T:System.Data.DataTable"/> with the option supplied.
            </summary>
            <param name="options">Sets the settings used to convert the range.</param>
            <param name="dataTable">The data table to add the range data to.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> representing the range.</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ToText">
            <summary>
            Converts a range to text in CSV format.
            </summary>
            <returns>A string containing the text</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ToText(OfficeOpenXml.ExcelOutputTextFormat)">
            <summary>
            Converts a range to text in CSV format.
            Invariant culture is used by default.
            </summary>
            <param name="Format">Information how to create the csv text</param>
            <returns>A string containing the text</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SaveToText(System.IO.FileInfo,OfficeOpenXml.ExcelOutputTextFormat)">
            <summary>
            Converts a range to text in CSV format.
            Invariant culture is used by default.
            </summary>
            <param name="file">The file to write to</param>
            <param name="Format">Information how to create the csv text</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SaveToText(System.IO.Stream,OfficeOpenXml.ExcelOutputTextFormat)">
            <summary>
            Converts a range to text in CSV format.
            Invariant culture is used by default.
            </summary>
            <param name="stream">The strem to write to</param>
            <param name="Format">Information how to create the csv text</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ToJson">
            <summary>
            Returns the range as JSON
            </summary>
            <returns>A JSON string</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ToJson(System.Action{OfficeOpenXml.JsonRangeExportSettings})">
            <summary>
            Returns the range as JSON
            </summary>
            <param name="settings">Configures settings for the JSON export</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SaveToJson(System.IO.Stream)">
            <summary>
            Saves the range as JSON to a stream.
            </summary>
            <param name="stream">The writable stream to write the JSON to.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SaveToJson(System.IO.Stream,System.Action{OfficeOpenXml.JsonRangeExportSettings})">
            <summary>
            Saves the range as JSON to a stream.
            </summary>
            <param name="stream">The writable stream to write the JSON to</param>
            <param name="settings">Configures settings for the JSON export</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ToCollectionWithMappings``1(System.Func{OfficeOpenXml.Export.ToCollection.ToCollectionRow,``0})">
            <summary>
            Returns a collection of T for the range. 
            If the range contains multiple addresses the first range is used.
            The first row must containt the unique headers used as keys in the row dictionary.
            </summary>
            <typeparam name="T">The type to map to</typeparam>
            <param name="setRow">The call back function to map each row to the item of type T.</param>
            <returns>A list of T</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ToCollectionWithMappings``1(System.Func{OfficeOpenXml.Export.ToCollection.ToCollectionRow,``0},System.Action{OfficeOpenXml.ToCollectionRangeOptions})">
            <summary>
            Returns a collection of T for the range. 
            If the range contains multiple addresses the first range is used.
            The first row must contain the unique headers used as keys in the row dictionary.
            </summary>
            <typeparam name="T">The type to map to</typeparam>
            <param name="setRow">The call back function to map each row to the item of type T.</param>
            <param name="options">Configures the settings for the function</param>
            <returns>A list of T</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ToCollectionWithMappings``1(System.Func{OfficeOpenXml.Export.ToCollection.ToCollectionRow,``0},OfficeOpenXml.ToCollectionRangeOptions)">
            <summary>
            Returns a collection of T for the range. 
            If the range contains multiple addresses the first range is used.
            The first row must containt the unique headers used as keys in the row dictionary.
            </summary>
            <typeparam name="T">The type to map to</typeparam>
            <param name="setRow">The call back function to map each row to the item of type T.</param>
            <param name="options">Parameters to the function</param>
            <returns>A list of T</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ToCollection``1">
            <summary>
            Returns a collection of T for the range. 
            If the range contains multiple addresses the first range is used.
            The first row must contain the unique headers used as keys in the row dictionary.
            Headers will be mapped to properties using the name or the attributes without white spaces. 
            The attributes that can be used are: EpplusTableColumnAttributeBase.Header, DescriptionAttribute.Description or DisplayNameAttribute.Name.
            </summary>
            <typeparam name="T">The type to map to</typeparam>
            <returns>A list of T</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ToCollection``1(System.Action{OfficeOpenXml.ToCollectionRangeOptions})">
            <summary>
            Automatically maps the range to the properties <see cref="T:OfficeOpenXml.FormulaParsing.Excel.Functions.Text.T"/> using the headers.
            Using this method requires a headers.
            Headers will be mapped to properties using the name or the attributes without white spaces. 
            The attributes that can be used are: EpplusTableColumnAttributeBase.Header, DescriptionAttribute.Description or DisplayNameAttribute.Name.
            </summary>
            <typeparam name="T">The type to use</typeparam>
            <param name="options">Configures the settings for the function</param>
            <returns>A list of <see cref="T:OfficeOpenXml.FormulaParsing.Excel.Functions.Text.T"/></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ToCollection``1(OfficeOpenXml.ToCollectionRangeOptions)">
            <summary>
            Automatically maps the range to the properties <see cref="T:OfficeOpenXml.FormulaParsing.Excel.Functions.Text.T"/> using the headers.
            Using this method requires a headers.
            Headers will be mapped to properties using the name or the attributes without white spaces. 
            The attributes that can be used are: EpplusTableColumnAttributeBase.Header, DescriptionAttribute.Description or DisplayNameAttribute.Name.
            </summary>
            <typeparam name="T">The type to use</typeparam>
            <param name="options">Settings for the method</param>
            <returns>A list of <see cref="T:OfficeOpenXml.FormulaParsing.Excel.Functions.Text.T"/></returns>
        </member>
        <member name="T:OfficeOpenXml.IExcelColumn">
            <summary>
            A column in a worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.IExcelColumn.Collapsed">
            <summary>
            If the column is collapsed in outline mode
            </summary>
        </member>
        <member name="P:OfficeOpenXml.IExcelColumn.OutlineLevel">
            <summary>
            Outline level. Zero if no outline
            </summary>
        </member>
        <member name="P:OfficeOpenXml.IExcelColumn.Phonetic">
            <summary>
            Phonetic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.IExcelColumn.BestFit">
            <summary>
            If set to true a column automaticlly resize(grow wider) when a user inputs numbers in a cell. 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.IExcelColumn.AutoFit(System.Double,System.Double)">
            <summary>
            Set the column width from the content.
            Note: Cells containing formulas are ignored unless a calculation is performed.
                  Wrapped and merged cells are also ignored.
            </summary>
            <param name="MinimumWidth">Minimum column width</param>
            <param name="MaximumWidth">Maximum column width</param>
        </member>
        <member name="P:OfficeOpenXml.IExcelColumn.PageBreak">
            <summary>
            Adds a manual page break after the column.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.IExcelColumn.Group">
            <summary>
            Groups the columns using an outline. 
            Adds one to <see cref="P:OfficeOpenXml.IExcelColumn.OutlineLevel" /> for each column if the outline level is less than 8.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.IExcelColumn.UnGroup">
            <summary>
            Ungroups the columns from the outline. 
            Subtracts one from <see cref="P:OfficeOpenXml.IExcelColumn.OutlineLevel" /> for each column if the outline level is larger that zero. 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.IExcelColumn.CollapseChildren(System.Boolean)">
            <summary>
            Collapses and hides the column's children. Children are columns immegetaly to the right or left of the column depending on the <see cref="P:OfficeOpenXml.ExcelWorksheet.OutLineSummaryRight"/>
            <paramref name="allLevels">If true, all children will be collapsed and hidden. If false, only the children of the referenced columns are collapsed.</paramref>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.IExcelColumn.ExpandChildren(System.Boolean)">
            <summary>
            Expands and shows the column's children. Children are columns immegetaly to the right or left of the column depending on the <see cref="P:OfficeOpenXml.ExcelWorksheet.OutLineSummaryRight"/>
            <paramref name="allLevels">If true, all children will be expanded and shown. If false, only the children of the referenced columns will be expanded.</paramref>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.IExcelColumn.SetVisibleOutlineLevel(System.Int32,System.Boolean)">
            <summary>
            Expands the columns to the <see cref="P:OfficeOpenXml.IExcelColumn.OutlineLevel"/> supplied. 
            </summary>
            <param name="level">Expand all columns with a <see cref="P:OfficeOpenXml.IExcelColumn.OutlineLevel"/> Equal or Greater than this number.</param>
            <param name="collapseChildren">Collapse all children with a greater <see cref="P:OfficeOpenXml.IExcelColumn.OutlineLevel"/> than <paramref name="level"/></param>
        </member>
        <member name="T:OfficeOpenXml.ExcelRangeColumn">
            <summary>
            Represents a range of columns
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.StartColumn">
            <summary>
            The first column in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.EndColumn">
            <summary>
            The last column in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.Collapsed">
            <summary>
            If the column is collapsed in outline mode
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeColumn.Group">
            <summary>
            Groups the columns using an outline. Adds one to <see cref="P:OfficeOpenXml.ExcelRangeColumn.OutlineLevel" /> for each column if the outline level is less than 8.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeColumn.UnGroup">
            <summary>
            Ungroups the columns from the outline. 
            Subtracts one from <see cref="P:OfficeOpenXml.ExcelRangeColumn.OutlineLevel" /> for each column if the outline level is larger that zero. 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeColumn.CollapseChildren(System.Boolean)">
            <summary>
            Collapses and hides the column's children. Children are columns immegetaly to the right or left of the column depending on the <see cref="P:OfficeOpenXml.ExcelWorksheet.OutLineSummaryRight"/>
            <paramref name="allLevels">If true, all children will be collapsed and hidden. If false, only the children of the referenced columns are collapsed.</paramref>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeColumn.ExpandChildren(System.Boolean)">
            <summary>
            Expands and shows the column's children. Children are columns immegetaly to the right or left of the column depending on the <see cref="P:OfficeOpenXml.ExcelWorksheet.OutLineSummaryRight"/>
            <paramref name="allLevels">If true, all children will be expanded and shown. If false, only the children of the referenced columns will be expanded.</paramref>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeColumn.SetVisibleOutlineLevel(System.Int32,System.Boolean)">
            <summary>
            Expands the rows to the <see cref="P:OfficeOpenXml.ExcelRangeColumn.OutlineLevel"/> supplied. 
            </summary>
            <param name="level">Expands all rows with a <see cref="P:OfficeOpenXml.ExcelRangeColumn.OutlineLevel"/> Equal or Greater than this number.</param>
            <param name="collapseChildren">Collapses all children with a greater <see cref="P:OfficeOpenXml.ExcelRangeColumn.OutlineLevel"/> than <paramref name="level"/></param>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.OutlineLevel">
            <summary>
            Outline level. Zero if no outline. Can not be negative.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.Phonetic">
            <summary>
            True if the column should show phonetic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.BestFit">
            <summary>
            Indicates that the column should resize when numbers are entered into the column to fit the size of the text.
            This only applies to columns where the size has not been set.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.Hidden">
            <summary>
            If the column is hidden.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.Width">
            <summary>
            Row width of the column.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.PageBreak">
            <summary>
            Adds a manual page break after the column.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.Style">
            <summary>
            The Style applied to the whole column(s). Only effects cells with no individual style set. 
            Use Range object if you want to set specific styles.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.StyleName">
            <summary>
            Sets the style for the entire column using a style name.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.StyleID">
            <summary>
            Sets the style for the entire column using the style ID.           
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.Current">
            <summary>
            The current range when enumerating
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.System#Collections#IEnumerator#Current">
            <summary>
            The current range when enumerating
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeColumn.AutoFit">
            <summary>
            Set the column width from the content of the range. Columns outside of the worksheets dimension are ignored.
            The minimum width is the value of the ExcelWorksheet.defaultColumnWidth property.
            </summary>
            <remarks>
            Cells containing formulas must be calculated before autofit is called.
            Wrapped and merged cells are also ignored.
            </remarks>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeColumn.AutoFit(System.Double)">
            <summary>
            Set the column width from the content of the range. Columns outside of the worksheets dimension are ignored.
            </summary>
            <remarks>
            This method will not work if you run in an environment that does not support GDI.
            Cells containing formulas are ignored if no calculation is made.
            Wrapped and merged cells are also ignored.
            </remarks>
            <param name="MinimumWidth">Minimum column width</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeColumn.AutoFit(System.Double,System.Double)">
            <summary>
            Set the column width from the content of the range. Columns outside of the worksheets dimension are ignored.
            </summary>
            <remarks>
            This method will not work if you run in an environment that does not support GDI.
            Cells containing formulas are ignored if no calculation is made.
            Wrapped and merged cells are also ignored.
            </remarks>        
            <param name="MinimumWidth">Minimum column width</param>
            <param name="MaximumWidth">Maximum column width</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.Range">
            <summary>
            Reference to the cell range of the column(s)
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeColumn.GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeColumn.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeColumn.MoveNext">
            <summary>
            Iterate to the next row
            </summary>
            <returns>False if no more row exists</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeColumn.Reset">
            <summary>
            Reset the enumerator
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeColumn.Dispose">
            <summary>
            Disposes this object
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelRangeCopyOptionFlags">
            <summary>
            Flag enum, specify all flags that you want to exclude from the copy.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelRangeCopyOptionFlags.ExcludeFormulas">
            <summary>
            Exclude formulas from being copied. Only the value of the cell will be copied
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelRangeCopyOptionFlags.ExcludeValues">
            <summary>
            Will exclude formulas and values from being copied
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelRangeCopyOptionFlags.ExcludeStyles">
            <summary>
            Exclude styles from being copied. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelRangeCopyOptionFlags.ExcludeComments">
            <summary>
            Exclude comments from being copied. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelRangeCopyOptionFlags.ExcludeThreadedComments">
            <summary>
            Exclude threaded comments from being copied. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelRangeCopyOptionFlags.ExcludeHyperLinks">
            <summary>
            Exclude hyperlinks from being copied. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelRangeCopyOptionFlags.ExcludeMergedCells">
            <summary>
            Exclude merged cells from being copied. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelRangeCopyOptionFlags.ExcludeDataValidations">
            <summary>
            Exclude data validations from being copied. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelRangeCopyOptionFlags.ExcludeConditionalFormatting">
            <summary>
            Exclude conditional formatting from being copied. 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.IExcelRow">
            <summary>
            A row in a worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.IExcelRow.Collapsed">
            <summary>
            If the row is collapsed in outline mode
            </summary>
        </member>
        <member name="P:OfficeOpenXml.IExcelRow.OutlineLevel">
            <summary>
            Outline level. Zero if no outline
            </summary>
        </member>
        <member name="P:OfficeOpenXml.IExcelRow.Phonetic">
            <summary>
            True if the row should show phonetic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.IExcelRow.Hidden">
            <summary>
            If the row is hidden.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.IExcelRow.Height">
            <summary>
            Row height in points if specified manually.
            <seealso cref="P:OfficeOpenXml.IExcelRow.CustomHeight"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.IExcelRow.PageBreak">
            <summary>
            Adds a manual page break after the column.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.IExcelRow.CustomHeight">
            <summary>
            True if height is set manually
            </summary>
        </member>
        <member name="M:OfficeOpenXml.IExcelRow.Group">
            <summary>
            Groups the rows using an outline. 
            Adds one to <see cref="P:OfficeOpenXml.IExcelRow.OutlineLevel" /> for each row if the outline level is less than 8.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.IExcelRow.Ungroup">
            <summary>
            Ungroups the rows from the outline. 
            Subtracts one from <see cref="P:OfficeOpenXml.IExcelRow.OutlineLevel" /> for each row if the outline level is larger that zero. 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.IExcelRow.CollapseChildren(System.Boolean)">
            <summary>
            Collapses and hides the rows's children. Children are rows immegetaly below or top of the row depending on the <see cref="P:OfficeOpenXml.ExcelWorksheet.OutLineSummaryBelow"/>
            <paramref name="allLevels">If true, all children will be collapsed and hidden. If false, only the children of the referenced rows are collapsed.</paramref>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.IExcelRow.ExpandChildren(System.Boolean)">
            <summary>
            Expands and shows the rows's children. Children are columns immegetaly below or top of the row depending on the <see cref="P:OfficeOpenXml.ExcelWorksheet.OutLineSummaryBelow"/>
            <paramref name="allLevels">If true, all children will be expanded and shown. If false, only the children of the referenced columns will be expanded.</paramref>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.IExcelRow.SetVisibleOutlineLevel(System.Int32,System.Boolean)">
            <summary>
            Expands the rows to the <see cref="P:OfficeOpenXml.IExcelRow.OutlineLevel"/> supplied. 
            </summary>
            <param name="level">Expands all rows with a <see cref="P:OfficeOpenXml.IExcelRow.OutlineLevel"/> Equal or Greater than this number.</param>
            <param name="collapseChildren">Collapses all children with a greater <see cref="P:OfficeOpenXml.IExcelRow.OutlineLevel"/> than <paramref name="level"/></param>
        </member>
        <member name="T:OfficeOpenXml.ExcelRangeRow">
            <summary>
            Represents a range of rows
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.StartRow">
            <summary>
            The first row in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.EndRow">
            <summary>
            The last row in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.Collapsed">
            <summary>
            If the row is collapsed in outline mode
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.OutlineLevel">
            <summary>
            Outline level. Zero if no outline
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.Phonetic">
            <summary>
            True if the row should show phonetic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.Hidden">
            <summary>
            If the row is hidden.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.Height">
            <summary>
            Row height in points. Setting this property will also set <see cref="P:OfficeOpenXml.ExcelRangeRow.CustomHeight"/> to true.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.CustomHeight">
            <summary>
            True if the row <see cref="P:OfficeOpenXml.ExcelRangeRow.Height" /> has been manually set.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.PageBreak">
            <summary>
            Adds a manual page break after the column.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.Style">
            <summary>
            The Style applied to the whole row(s). Only effects cells with no individual style set. 
            Use the Range object if you want to set specific styles.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.StyleName">
            <summary>
            Sets the style for the entire row using a style name.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.StyleID">
            <summary>
            Sets the style for the entire column using the style ID.           
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.Range">
            <summary>
            Reference to the cell range of the row(s)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.Current">
            <summary>
            The current row object in the iteration
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.System#Collections#IEnumerator#Current">
            <summary>
            The current row object in the iteration
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeRow.GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeRow.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeRow.MoveNext">
            <summary>
            Iterate to the next row
            </summary>
            <returns>False if no more row exists</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeRow.Reset">
            <summary>
            Reset the enumerator
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeRow.Dispose">
            <summary>
            Disposes this object
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeRow.Group">
            <summary>
            Groups the rows using an outline. 
            Adds one to <see cref="P:OfficeOpenXml.ExcelRangeRow.OutlineLevel" /> for each row if the outline level is less than 8.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeRow.Ungroup">
            <summary>
            Ungroups the rows from the outline. 
            Subtracts one from <see cref="P:OfficeOpenXml.ExcelRangeRow.OutlineLevel" /> for each row if the outline level is larger that zero. 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeRow.CollapseChildren(System.Boolean)">
            <summary>
            Collapses and hides the rows's children. Children are rows immegetaly below or top of the row depending on the <see cref="P:OfficeOpenXml.ExcelWorksheet.OutLineSummaryBelow"/>
            <paramref name="allLevels">If true, all children will be collapsed and hidden. If false, only the children of the referenced rows are collapsed.</paramref>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeRow.ExpandChildren(System.Boolean)">
            <summary>
            Expands and shows the rows's children. Children are columns immegetaly below or top of the row depending on the <see cref="P:OfficeOpenXml.ExcelWorksheet.OutLineSummaryBelow"/>
            <paramref name="allLevels">If true, all children will be expanded and shown. If false, only the children of the referenced columns will be expanded.</paramref>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeRow.SetVisibleOutlineLevel(System.Int32,System.Boolean)">
            <summary>
            Expands the rows to the <see cref="P:OfficeOpenXml.ExcelRangeRow.OutlineLevel"/> supplied. 
            </summary>
            <param name="level">Expand all rows with a <see cref="P:OfficeOpenXml.ExcelRangeRow.OutlineLevel"/> Equal or Greater than this number.</param>
            <param name="collapseChildren">Collapse all children with a greater <see cref="P:OfficeOpenXml.ExcelRangeRow.OutlineLevel"/> than <paramref name="level"/></param>
        </member>
        <member name="T:OfficeOpenXml.ExcelRow">
            <summary>
            Represents an individual row in the spreadsheet.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRow.RowID">
            <summary>
            Internal RowID.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRow.#ctor(OfficeOpenXml.ExcelWorksheet,System.Int32)">
            <summary>
            Creates a new instance of the ExcelRow class. 
            For internal use only!
            </summary>
            <param name="Worksheet">The parent worksheet</param>
            <param name="row">The row number</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelRow.Node">
            <summary>
            Provides access to the node representing the row.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRow.Hidden">
            <summary>
            Allows the row to be hidden in the worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRow.Height">
            <summary>
            Sets the height of the row
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRow.CustomHeight">
            <summary>
            Set to true if You don't want the row to Autosize
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRow.StyleName">
            <summary>
            Sets the style for the entire column using a style name.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRow.StyleID">
            <summary>
            Sets the style for the entire row using the style ID.  
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRow.Row">
            <summary>
            Rownumber
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRow.Collapsed">
            <summary>
            If outline level is set this tells that the row is collapsed
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRow.OutlineLevel">
            <summary>
            Outline level.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRow.Phonetic">
            <summary>
            Show phonetic Information
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRow.Style">
            <summary>
            The Style applied to the whole row. Only effekt cells with no individual style set. 
            Use the <see cref="P:OfficeOpenXml.ExcelWorksheet.Cells"/> Style property if you want to set specific styles.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRow.PageBreak">
            <summary>
            Adds a manual page break after the row.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRow.Merged">
            <summary>
            Merge all cells in the row
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRow.Clone(OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Copies the current row to a new worksheet
            </summary>
            <param name="added">The worksheet where the copy will be created</param>
        </member>
        <member name="T:OfficeOpenXml.ExcelRowsCollection">
            <summary>
            A collection of rows in a worksheet.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRowsCollection.Item(System.Int32)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="row">The row index</param>
            <returns>The <see cref="T:OfficeOpenXml.ExcelRangeRow"/></returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelRowsCollection.Item(System.Int32,System.Int32)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="fromRow">The row index from which collection should start</param>
            <param name="toRow">index from which collection should end</param>
            <returns>The <see cref="T:OfficeOpenXml.ExcelRangeRow"/></returns>
        </member>
        <member name="T:OfficeOpenXml.ExcelSheetProtection">
             <summary>
             Sheet protection
            <seealso cref="T:OfficeOpenXml.ExcelEncryption"/> 
            <seealso cref="T:OfficeOpenXml.ExcelProtection"/> 
             </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.IsProtected">
            <summary>
            If the worksheet is protected.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowSelectLockedCells">
            <summary>
            Allow users to select locked cells
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowSelectUnlockedCells">
            <summary>
            Allow users to select unlocked cells
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowEditObject">
            <summary>
            Allow users to edit objects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowEditScenarios">
            <summary>
            Allow users to edit senarios
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowFormatCells">
            <summary>
            Allow users to format cells
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowFormatColumns">
            <summary>
            Allow users to Format columns
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowFormatRows">
            <summary>
            Allow users to Format rows
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowInsertColumns">
            <summary>
            Allow users to insert columns
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowInsertRows">
            <summary>
            Allow users to Format rows
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowInsertHyperlinks">
            <summary>
            Allow users to insert hyperlinks
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowDeleteColumns">
            <summary>
            Allow users to delete columns
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowDeleteRows">
            <summary>
            Allow users to delete rows
            </summary>  
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowSort">
            <summary>
            Allow users to sort a range
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowAutoFilter">
            <summary>
            Allow users to use autofilters
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowPivotTables">
            <summary>
            Allow users to use pivottables
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelSheetProtection.SetPassword(System.String)">
            <summary>
            Sets a password for the sheet.
            </summary>
            <param name="Password"></param>
        </member>
        <member name="T:OfficeOpenXml.ExcelNamedStyleCollection`1">
            <summary>
            A collection of named styles in the workbooks styles.
            </summary>
            <typeparam name="T">The type of style</typeparam>
        </member>
        <member name="P:OfficeOpenXml.ExcelNamedStyleCollection`1.Item(System.String)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="name">The name of the Style</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ExcelStyleCollection`1">
            <summary>
            Base collection class for styles.
            </summary>
            <typeparam name="T">The style type</typeparam>
        </member>
        <member name="P:OfficeOpenXml.ExcelStyleCollection`1.TopNode">
            <summary>
            The top xml node of the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyleCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyleCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelStyleCollection`1.Item(System.Int32)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="PositionID">The index of the Style</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelStyleCollection`1.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyleCollection`1.FindById(System.String,`0@)">
            <summary>
            Finds the key 
            </summary>
            <param name="key">the key to be found</param>
            <param name="obj">The found object.</param>
            <returns>True if found</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyleCollection`1.FindIndexById(System.String)">
            <summary>
            Find Index
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ExcelStyles">
            <summary>
            Containts all shared cell styles for a workbook
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.LoadFromDocument">
            <summary>
            Loads the style XML to memory
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.PropertyChange(OfficeOpenXml.Style.StyleBase,OfficeOpenXml.Style.StyleChangeEventArgs)">
            <summary>
            Handels changes of properties on the style objects
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.NamedStylePropertyChange(OfficeOpenXml.Style.StyleBase,OfficeOpenXml.Style.StyleChangeEventArgs)">
            <summary>
            Handles property changes on Named styles.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="F:OfficeOpenXml.ExcelStyles.NumberFormats">
            <summary>
            Contains all numberformats for the package
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelStyles.Fonts">
            <summary>
            Contains all font styles for the package
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelStyles.Fills">
            <summary>
            Contains all fill styles for the package
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelStyles.Borders">
            <summary>
            Contain all border styles for the package
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelStyles.CellStyleXfs">
            <summary>
            Contain all named cell styles for the package
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelStyles.CellXfs">
            <summary>
            Contain all cell styles for the package
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelStyles.NamedStyles">
            <summary>
            Contain all named styles for the package
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelStyles.TableStyles">
            <summary>
            Contain all table styles for the package. Tables styles can be used to customly format tables and pivot tables.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelStyles.SlicerStyles">
            <summary>
            Contain all slicer styles for the package. Tables styles can be used to customly format tables and pivot tables.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelStyles.Dxfs">
            <summary>
            Contain differential formatting styles for the package. This collection does not contain style records for slicers.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreateNamedStyle(System.String)">
            <summary>
            Creates a named style that can be applied to cells in the worksheet.
            </summary>
            <param name="name">The name of the style</param>
            <returns>A named style object that can be custumized</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreateNamedStyle(System.String,OfficeOpenXml.Style.ExcelStyle)">
            <summary>
            Creates a named style that can be applied to cells in the worksheet.
            </summary>
            <param name="name">The name of the style</param>
            <param name="Template">A template style</param>
            <returns>A named style object that can be custumized</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreatePivotTableStyle(System.String)">
            <summary>
            Creates a tables style only visible for pivot tables and with elements specific to pivot tables.
            </summary>
            <param name="name">The name of the style</param>
            <returns>The table style object</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreatePivotTableStyle(System.String,OfficeOpenXml.Table.PivotTableStyles)">
            <summary>
            Creates a tables style only visible for pivot tables and with elements specific to pivot tables.
            </summary>
            <param name="name">The name of the style</param>
            <param name="templateStyle">The built-in table style to use as a template for this custom style</param>
            <returns>The table style object</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreatePivotTableStyle(System.String,OfficeOpenXml.Style.Table.ExcelTableNamedStyleBase)">
            <summary>
            Creates a tables style only visible for pivot tables and with elements specific to pivot tables.
            </summary>
            <param name="name">The name of the style</param>
            <param name="templateStyle">The table style to use as a template for this custom style</param>
            <returns>The table style object</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreateTableStyle(System.String)">
            <summary>
            Creates a tables style only visible for tables and with elements specific to pivot tables.
            </summary>
            <param name="name">The name of the style</param>
            <returns>The table style object</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreateTableStyle(System.String,OfficeOpenXml.Table.TableStyles)">
            <summary>
            Creates a tables style only visible for tables and with elements specific to pivot tables.
            </summary>
            <param name="name">The name of the style</param>
            <param name="templateStyle">The built-in table style to use as a template for this custom style</param>
            <returns>The table style object</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreateTableStyle(System.String,OfficeOpenXml.Style.Table.ExcelTableNamedStyleBase)">
            <summary>
            Creates a tables style only visible for tables and with elements specific to pivot tables.
            </summary>
            <param name="name">The name of the style</param>
            <param name="templateStyle">The table style to use as a template for this custom style</param>
            <returns>The table style object</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreateTableAndPivotTableStyle(System.String)">
            <summary>
            Creates a tables visible for tables and pivot tables and with elements for both.
            </summary>
            <param name="name">The name of the style</param>
            <returns>The table style object</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreateTableAndPivotTableStyle(System.String,OfficeOpenXml.Table.TableStyles)">
            <summary>
            Creates a tables visible for tables and pivot tables and with elements for both.
            </summary>
            <param name="name">The name of the style</param>
            <param name="templateStyle">The built-in table style to use as a template for this custom style</param>
            <returns>The table style object</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreateTableAndPivotTableStyle(System.String,OfficeOpenXml.Table.PivotTableStyles)">
            <summary>
            Creates a tables visible for tables and pivot tables and with elements for both.
            </summary>
            <param name="name">The name of the style</param>
            <param name="templateStyle">The built-in pivot table style to use as a template for this custom style</param>
            <returns>The table style object</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreateTableAndPivotTableStyle(System.String,OfficeOpenXml.Style.Table.ExcelTableNamedStyleBase)">
            <summary>
            Creates a tables visible for tables and pivot tables and with elements for both.
            </summary>
            <param name="name">The name of the style</param>
            <param name="templateStyle">The table style to use as a template for this custom style</param>
            <returns>The table style object</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreateSlicerStyle(System.String)">
            <summary>
            Creates a custom slicer style.
            </summary>
            <param name="name">The name of the style</param>
            <returns>The slicer style object</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreateSlicerStyle(System.String,OfficeOpenXml.eSlicerStyle)">
            <summary>
            Creates a custom slicer style.
            </summary>
            <param name="name">The name of the style</param>
            <param name="templateStyle">The slicer style to use as a template for this custom style</param>
            <returns>The slicer style object</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreateSlicerStyle(System.String,OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerNamedStyle)">
            <summary>
            Creates a custom named slicer style from another style.
            </summary>
            <param name="name">The name of the style.</param>
            <param name="templateStyle">The slicer style to us as template.</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.UpdateXml">
            <summary>
            Update the changes to the Style.Xml file inside the package.
            This will remove any unused styles from the collections.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelTableAddress">
            <summary>
            Extended address information for a table address
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTableAddress.Name">
            <summary>
            The name of the table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTableAddress.ColumnSpan">
            <summary>
            Column span
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTableAddress.IsAll">
            <summary>
            Reference entire table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTableAddress.IsHeader">
            <summary>
            Reference the table header row
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTableAddress.IsData">
            <summary>
            Reference table data
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTableAddress.IsTotals">
            <summary>
            Reference table totals row
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTableAddress.IsThisRow">
            <summary>
            Reference the current table row
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eDataTypes">
            <summary>
            Discribes a column when reading a text using the ExcelRangeBase.LoadFromText method
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDataTypes.Unknown">
            <summary>
            Let the the import decide.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDataTypes.String">
            <summary>
            Always a string.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDataTypes.Number">
            <summary>
            Try to convert it to a number. If it fails then add it as a string.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDataTypes.DateTime">
            <summary>
            Try to convert it to a date. If it fails then add it as a string.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDataTypes.Percent">
            <summary>
            Try to convert it to a number and divide with 100. 
            Removes any tailing percent sign (%). If it fails then add it as a string.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelTextFormatBase">
            <summary>
            Describes how to split a CSV text. Used by the ExcelRange.LoadFromText method.
            Base class for ExcelTextFormat and ExcelOutputTextFormat
            <seealso cref="T:OfficeOpenXml.ExcelTextFormat"/>
            <seealso cref="T:OfficeOpenXml.ExcelOutputTextFormat"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelTextFormatBase.#ctor">
            <summary>
            Creates a new instance if ExcelTextFormatBase
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTextFormatBase.Delimiter">
            <summary>
            Delimiter character
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTextFormatBase.TextQualifier">
            <summary>
            Text qualifier character. Default no TextQualifier (\0)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTextFormatBase.EOL">
            <summary>
            End of line characters. Default is CRLF
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTextFormatBase.Culture">
            <summary>
            Culture used when parsing. Default CultureInfo.InvariantCulture
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTextFormatBase.SkipLinesBeginning">
            <summary>
            Number of lines skipped in the begining of the file. Default 0.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTextFormatBase.SkipLinesEnd">
            <summary>
            Number of lines skipped at the end of the file. Default 0.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTextFormatBase.Encoding">
            <summary>
            Only used when reading/writing files from disk using a FileInfo object. Default AscII
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelTextFormat">
            <summary>
            Describes how to split a CSV text. Used by the ExcelRange.LoadFromText method
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelTextFormat.#ctor">
            <summary>
            Describes how to split a CSV text
            
            Default values
            <list>
            <listheader><term>Property</term><description>Value</description></listheader>
            <item><term>Delimiter</term><description>,</description></item>
            <item><term>TextQualifier</term><description>None (\0)</description></item>
            <item><term>EOL</term><description>CRLF</description></item>
            <item><term>Culture</term><description>CultureInfo.InvariantCulture</description></item>
            <item><term>SkipLinesBeginning</term><description>0</description></item>
            <item><term>SkipLinesEnd</term><description>0</description></item>
            <item><term>DataTypes</term><description>Column datatypes</description></item>
            <item><term>Encoding</term><description>Encoding.ASCII</description></item>
            </list>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTextFormat.DataTypes">
            <summary>
            Datatypes list for each column (if column is not present Unknown is assumed)
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelOutputTextFormat">
            <summary>
            Describes how to split a CSV text. Used by the ExcelRange.SaveFromText method
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelOutputTextFormat.#ctor">
            <summary>
            Describes how to split a CSV text
            
            Default values
            <list>
            <listheader><term>Property</term><description>Value</description></listheader>
            <item><term>Delimiter</term><description>,</description></item>
            <item><term>TextQualifier</term><description>None (\0)</description></item>
            <item><term>EOL</term><description>CRLF</description></item>
            <item><term>Culture</term><description>CultureInfo.InvariantCulture</description></item>
            <item><term>SkipLinesBeginning</term><description>0</description></item>
            <item><term>SkipLinesEnd</term><description>0</description></item>
            <item><term>Header</term><description></description></item>
            <item><term>Footer</term><description></description></item>
            <item><term>FirstRowIsHeader</term><description>true</description></item>
            <item><term>Encoding</term><description>Encoding.ASCII</description></item>
            <item><term>UseCellFormat</term><description>true</description></item>
            <item><term>Formats</term><description>Formats can be .NET number format, dateformats. For text use a $. A blank formats will try to autodetect</description></item>
            <item><term>DecimalSeparator</term><description>From Culture(null)</description></item>
            <item><term>ThousandsSeparator</term><description>From Culture(null)</description></item>
            </list> 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelOutputTextFormat.Header">
            <summary>
            A text written at the start of the file.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelOutputTextFormat.Footer">
            <summary>
            A text written at the end of the file
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelOutputTextFormat.FirstRowIsHeader">
            <summary>
            First row of the range contains the headers.
            All header cells will be treated as strings.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelOutputTextFormat.UseCellFormat">
            <summary>
            Use the cells Text property with the applied culture.
            This only applies to columns with no format set in the Formats collection.
            If SkipLinesBeginning is larger than zero, headers will still be read from the first row in the range.
            If a TextQualifier is set, non numeric and date columns will be wrapped with the TextQualifier
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelOutputTextFormat.Formats">
            <summary>
            A specific .NET format for the column.
            Format is applied with the used culture.
            For a text column use $ as format
            </summary>        
        </member>
        <member name="P:OfficeOpenXml.ExcelOutputTextFormat.DecimalSeparator">
            <summary>
            Decimal separator, if other than the used culture.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelOutputTextFormat.ThousandsSeparator">
            <summary>
            Thousands separator, if other than the used culture.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelOutputTextFormat.EncodedTextQualifiers">
            <summary>
            What to replace Text Qualifiers inside a text, when Text Qualifiers is set.
            Default is two Text Qualifiers characters. For example " is replaced with "".
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelTextSettings">
            <summary>
            This class contains settings for text measurement.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTextSettings.PrimaryTextMeasurer">
            <summary>
            This is the primary text measurer
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTextSettings.FallbackTextMeasurer">
            <summary>
            If the primary text measurer fails to measure the text, this one will be used.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTextSettings.AutofitScaleFactor">
            <summary>
            All measurements of texts will be multiplied with this value. Default is 1.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTextSettings.GenericTextMeasurer">
            <summary>
            Returns an instance of the internal generic text measurer
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTextSettings.DefaultTextMeasurer">
            <summary>
            Measures a text with default settings when there is no other option left...
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelCalcMode">
            <summary>
            How the application should calculate formulas in the workbook
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelCalcMode.Automatic">
            <summary>
            Indicates that calculations in the workbook are performed automatically when cell values change. 
            The application recalculates those cells that are dependent on other cells that contain changed values. 
            This mode of calculation helps to avoid unnecessary calculations.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelCalcMode.AutomaticNoTable">
            <summary>
            Indicates tables be excluded during automatic calculation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelCalcMode.Manual">
            <summary>
            Indicates that calculations in the workbook be triggered manually by the user. 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelWorkbook">
            <summary>
            Represents the Excel workbook and provides access to all the 
            document properties and worksheets within the workbook.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorkbook.#ctor(OfficeOpenXml.ExcelPackage,System.Xml.XmlNamespaceManager)">
            <summary>
            Creates a new instance of the ExcelWorkbook class.
            </summary>
            <param name="package">The parent package</param>
            <param name="namespaceManager">NamespaceManager</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorkbook.LoadPivotTableCaches">
            <summary>
            Load all pivot cache ids and there uri's
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorkbook.GetSharedStrings">
            <summary>
            Read shared strings to list
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.Worksheets">
            <summary>
            Provides access to all the worksheets in the workbook.
            Note: Worksheets index either starts by 0 or 1 depending on the Excelpackage.Compatibility.IsWorksheets1Based property.
            Default is 1 for .Net 3.5 and .Net 4 and 0 for .Net Core.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorkbook.CreateHtmlExporter(OfficeOpenXml.ExcelRangeBase[])">
            <summary>
            Create an html exporter for the supplied ranges.
            </summary>
            <param name="ranges">The ranges to create the report from. All ranges must originate from the current workbook. </param>
            <returns>The HTML exporter.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.Names">
            <summary>
            Provides access to named ranges
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.ExternalLinks">
            <summary>
            A collection of links to external workbooks and it's cached data.
            This collection can also contain DDE and OLE links. DDE and OLE are readonly and cannot be added.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.FormulaParserManager">
            <summary>
            Manage the formula parser.
            Add your own functions or replace native ones, parse formulas or attach a logger.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.ThreadedCommentPersons">
            <summary>
            Represents a collection of <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/>s in the workbook.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.MaxFontWidth">
            <summary>
            Max font width for the workbook
            <remarks>This method uses GDI. If you use Azure or another environment that does not support GDI, you have to set this value manually if you don't use the standard Calibri font</remarks>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.Protection">
            <summary>
            Access properties to protect or unprotect a workbook
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.View">
            <summary>
            Access to workbook view properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.VbaProject">
            <summary>
            A reference to the VBA project.
            Null if no project exists.
            Use Workbook.CreateVBAProject to create a new VBA-Project
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorkbook.RemoveVBAProject">
            <summary>
            Remove the from the file VBA project.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorkbook.CreateVBAProject">
            <summary>
            Create an empty VBA project.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.WorkbookUri">
            <summary>
            URI to the workbook inside the package
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.StylesUri">
            <summary>
            URI to the styles inside the package
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.SharedStringsUri">
            <summary>
            URI to the shared strings inside the package
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.PersonsUri">
            <summary>
            URI to the person elements inside the package
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.Part">
            <summary>
            Returns a reference to the workbook's part within the package
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.WorkbookXml">
            <summary>
            Provides access to the XML data representing the workbook in the package.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.CodeModule">
            <summary>
            The VBA code module if the package has a VBA project. Otherwise this propery is null.
            <seealso cref="M:OfficeOpenXml.ExcelWorkbook.CreateVBAProject"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.Date1904">
            <summary>
            The date systems used by Microsoft Excel can be based on one of two different dates. By default, a serial number of 1 in Microsoft Excel represents January 1, 1900.
            The default for the serial number 1 can be changed to represent January 2, 1904.
            This option was included in Microsoft Excel for Windows to make it compatible with Excel for the Macintosh, which defaults to January 2, 1904.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorkbook.CreateWorkbookXml(System.Xml.XmlNamespaceManager)">
            <summary>
            Create or read the XML for the workbook.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.StylesXml">
            <summary>
            Provides access to the XML data representing the styles in the package. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.Styles">
            <summary>
            Package styles collection. Used internally to access style data.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.Properties">
            <summary>
            The office document properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.CalcMode">
            <summary>
            Calculation mode for the workbook.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.FullCalcOnLoad">
            <summary>
            Should Excel do a full calculation after the workbook has been loaded?
            <remarks>This property is always true for both new workbooks and loaded templates(on load). If this is not the wanted behavior set this property to false.</remarks>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.ThemeManager">
            <summary>
            Create and manage the theme for the workbook.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.DefaultThemeVersion">
            <summary>
            The default version of themes to apply in the workbook
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorkbook.Save">
            <summary>
            Saves the workbook and all its components to the package.
            For internal use only!
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorkbook.ExistsNames">
            <summary>
            Is their any names in the workbook or in the sheets.
            </summary>
            <returns>?</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorkbook.ClearFormulas">
            <summary>
            Removes all formulas within the entire workbook, but keeps the calculated values.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorkbook.ClearFormulaValues">
            <summary>
            Removes all values of cells with formulas in the entire workbook, but keeps the formulas.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorkbook.Dispose">
            <summary>
            Disposes the workbooks
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.HasLoadedPivotTables">
            <summary>
            Returns true if the workbook has pivot tables in any worksheet.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelWorkbookView">
            <summary>
            Access to workbook view properties
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorkbookView.#ctor(System.Xml.XmlNamespaceManager,System.Xml.XmlNode,OfficeOpenXml.ExcelWorkbook)">
            <summary>
            Creates a new ExcelWorkbookView which provides access to all the 
            view states of the worksheet.
            </summary>
            <param name="ns"></param>
            <param name="node"></param>
            <param name="wb"></param>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbookView.Left">
            <summary>
            Position of the upper left corner of the workbook window. In twips.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbookView.Top">
            <summary>
            Position of the upper left corner of the workbook window. In twips.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbookView.Width">
            <summary>
            Width of the workbook window. In twips.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbookView.Height">
            <summary>
            Height of the workbook window. In twips.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbookView.Minimized">
            <summary>
            If true the the workbook window is minimized.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbookView.ShowVerticalScrollBar">
            <summary>
            Show the vertical scrollbar
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbookView.ShowHorizontalScrollBar">
            <summary>
            Show the horizontal scrollbar
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbookView.ShowSheetTabs">
            <summary>
            Show or hide the sheet tabs
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorkbookView.SetWindowSize(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the window position in twips
            </summary>
            <param name="left">Left coordinat</param>
            <param name="top">Top coordinat</param>
            <param name="width">Width in twips</param>
            <param name="height">Height in twips</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbookView.ActiveTab">
            <summary>
            The active worksheet in the workbook. Zero based.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbookView.FirstSheet">
            <summary>
            The first visible worksheet in the worksheets collection. 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelWorksheet">
            <summary>
            Represents an Excel worksheet and provides access to its properties and methods
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelWorksheet.MetaDataReference">
            <summary>
            Keeps track of meta data referencing cells or values.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.ClearFormulas">
            <summary>
            Removes all formulas within the entire worksheet, but keeps the calculated values.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.ClearFormulaValues">
            <summary>
            Removes all values of cells with formulas in the entire worksheet, but keeps the formulas.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelWorksheet.MergeCellsCollection">
            <summary>
            Collection containing merged cell addresses
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.MergeCellsCollection.Item(System.Int32,System.Int32)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="row">The Top row of the merged cells</param>
            <param name="column">The Left column of the merged cells</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.MergeCellsCollection.Item(System.Int32)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="index">The index in the collection</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.MergeCellsCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.MergeCellsCollection.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.#ctor(System.Xml.XmlNamespaceManager,OfficeOpenXml.ExcelPackage,System.String,System.Uri,System.String,System.Int32,System.Int32,System.Nullable{OfficeOpenXml.eWorkSheetHidden})">
            <summary>
            A worksheet
            </summary>
            <param name="ns">Namespacemanager</param>
            <param name="excelPackage">Package</param>
            <param name="relID">Relationship ID</param>
            <param name="uriWorksheet">URI</param>
            <param name="sheetName">Name of the sheet</param>
            <param name="sheetID">Sheet id</param>
            <param name="positionID">Position</param>
            <param name="hide">hide</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.WorksheetUri">
            <summary>
            The Uri to the worksheet within the package
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.Part">
            <summary>
            The Zip.ZipPackagePart for the worksheet within the package
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.RelationshipId">
            <summary>
            The ID for the worksheet's relationship with the workbook in the package
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.SheetId">
            <summary>
            The unique identifier for the worksheet.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.PositionId">
            <summary>
            The position of the worksheet.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.Index">
            <summary>
            The index in the worksheets collection
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelWorksheet.SortStatePath">
            <summary>
            Address for autofilter
            <seealso cref="P:OfficeOpenXml.ExcelRangeBase.AutoFilter" />        
            </summary>
            
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.AutoFilterAddress">
            <summary>
            The auto filter address. 
            null means no auto filter.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.AutoFilter">
            <summary>
            Autofilter settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.SortState">
            <summary>
            Sets the sort state
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.View">
            <summary>
            Returns a ExcelWorksheetView object that allows you to set the view state properties of the worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.Name">
            <summary>
            The worksheet's display name as it appears on the tab
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.Names">
            <summary>
            Provides access to named ranges
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.Hidden">
            <summary>
            Indicates if the worksheet is hidden in the workbook
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.DefaultRowHeight">
            <summary>
            Get/set the default height of all rows in the worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.RowZeroHeight">
            <summary>
            If true, empty rows are hidden by default.
            This reduces the size of the package and increases performance if most of the rows in a worksheet are hidden.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.CustomHeight">
            <summary>
            'True' if defaultRowHeight value has been manually set, or is different from the default value.
            Is automaticlly set to 'True' when assigning the DefaultRowHeight property
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.DefaultColWidth">
            <summary>
            Get/set the default width of all columns in the worksheet
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelWorksheet.outLineSummaryBelowPath">
            <outlinePr applyStyles="1" summaryBelow="0" summaryRight="0" /> *
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.OutLineSummaryBelow">
            <summary>
            If true, summary rows are showen below the details, otherwise above.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.OutLineSummaryRight">
            <summary>
            If true, summary columns are to right of details otherwise to the left.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.OutLineApplyStyle">
            <summary>
            Automatic styles
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.TabColor">
            <summary>
            Color of the sheet tab
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.CodeModule">
            <summary>
            The VBA code modul for the worksheet, if the package contains a VBA project.
            <seealso cref="M:OfficeOpenXml.ExcelWorkbook.CreateVBAProject"/>
            </summary>  
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.WorksheetXml">
            <summary>
            The XML document holding the worksheet data.
            All column, row, cell, pagebreak, merged cell and hyperlink-data are loaded into memory and removed from the document when loading the document.        
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.VmlDrawings">
            <summary>
            Vml drawings. underlaying object for comments
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.Comments">
            <summary>
            Collection of comments
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.ThreadedComments">
            <summary>
            A collection of threaded comments referenced in the worksheet.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.GetAttributeLength(System.Xml.XmlReader)">
            <summary>
            Get the lenth of the attributes
            Conditional formatting attributes can be extremly long som get length of the attributes to finetune position.
            </summary>
            <param name="xr"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.LoadHyperLinks(System.Xml.XmlReader)">
            <summary>
            Load Hyperlinks
            </summary>
            <param name="xr">The reader</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.DataValidations">
            <summary>
            DataValidation defined in the worksheet. Use the Add methods to create DataValidations and add them to the worksheet. Then
            set the properties on the instance returned.
            Must know worksheet or at least worksheet name to determine if extLst when user input DataValidations in API.
            </summary>
            <seealso cref="T:OfficeOpenXml.DataValidation.ExcelDataValidationCollection"/>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.LoadCells(System.Xml.XmlReader)">
            <summary>
            Load cells
            </summary>
            <param name="xr">The reader</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.LoadMergeCells(System.Xml.XmlReader)">
            <summary>
            Load merged cells
            </summary>
            <param name="xr"></param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.AddRow(System.Xml.XmlReader,System.Int32)">
            <summary>
            Reads a row from the XML reader
            </summary>
            <param name="xr">The reader</param>
            <param name="row">The row number</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.HeaderFooter">
            <summary>
            A reference to the header and footer class which allows you to 
            set the header and footer for all odd, even and first pages of the worksheet
            </summary>
            <remarks>
            To format the text you can use the following format
            <list type="table">
            <listheader><term>Prefix</term><description>Description</description></listheader>
            <item><term>&amp;U</term><description>Underlined</description></item>
            <item><term>&amp;E</term><description>Double Underline</description></item>
            <item><term>&amp;K:xxxxxx</term><description>Color. ex &amp;K:FF0000 for red</description></item>
            <item><term>&amp;"Font,Regular Bold Italic"</term><description>Changes the font. Regular or Bold or Italic or Bold Italic can be used. ex &amp;"Arial,Bold Italic"</description></item>
            <item><term>&amp;nn</term><description>Change font size. nn is an integer. ex &amp;24</description></item>
            <item><term>&amp;G</term><description>Placeholder for images. Images cannot be added by the library, but its possible to use in a template.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.PrinterSettings">
            <summary>
            Printer settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.Cells">
            <summary>
            Provides access to a range of cells
            </summary>  
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.SelectedRange">
            <summary>
            Provides access to the selected range of cells
            </summary>  
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.MergedCells">
            <summary>
            Addresses to merged ranges
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.Row(System.Int32)">
            <summary>
            Provides access to an individual row within the worksheet so you can set its properties.
            </summary>
            <param name="row">The row number in the worksheet</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.Column(System.Int32)">
            <summary>
            Provides access to an individual column within the worksheet so you can set its properties.
            </summary>
            <param name="col">The column number in the worksheet</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.ToString">
            <summary>
            Returns the name of the worksheet
            </summary>
            <returns>The name of the worksheet</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.Select">
            <summary>
            Make the current worksheet active.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.Select(System.String)">
            <summary>
            Selects a range in the worksheet. The active cell is the topmost cell.
            Make the current worksheet active.
            </summary>
            <param name="Address">An address range</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.Select(System.String,System.Boolean)">
            <summary>
            Selects a range in the worksheet. The actice cell is the topmost cell.
            </summary>
            <param name="Address">A range of cells</param>
            <param name="SelectSheet">Make the sheet active</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.Select(OfficeOpenXml.ExcelAddress)">
            <summary>
            Selects a range in the worksheet. The active cell is the topmost cell of the first address.
            Make the current worksheet active.
            </summary>
            <param name="Address">An address range</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.Select(OfficeOpenXml.ExcelAddress,System.Boolean)">
            <summary>
            Selects a range in the worksheet. The active cell is the topmost cell of the first address.
            </summary>
            <param name="Address">A range of cells</param>
            <param name="SelectSheet">Make the sheet active</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.InsertRow(System.Int32,System.Int32)">
            <summary>
            Inserts new rows into the spreadsheet.  Existing rows below the position are 
            shifted down.  All formula are updated to take account of the new row(s).
            </summary>
            <param name="rowFrom">The position of the new row(s)</param>
            <param name="rows">Number of rows to insert</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.InsertRow(System.Int32,System.Int32,System.Int32)">
            <summary>
            Inserts new rows into the spreadsheet.  Existing rows below the position are 
            shifted down.  All formula are updated to take account of the new row(s).
            </summary>
            <param name="rowFrom">The position of the new row(s)</param>
            <param name="rows">Number of rows to insert.</param>
            <param name="copyStylesFromRow">Copy Styles from this row. Applied to all inserted rows</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.InsertColumn(System.Int32,System.Int32)">
            <summary>
            Inserts new columns into the spreadsheet.  Existing columns below the position are 
            shifted down.  All formula are updated to take account of the new column(s).
            </summary>
            <param name="columnFrom">The position of the new column(s)</param>
            <param name="columns">Number of columns to insert</param>        
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.InsertColumn(System.Int32,System.Int32,System.Int32)">
            <summary>
             Inserts new columns into the spreadsheet.  Existing column to the left are 
             shifted.  All formula are updated to take account of the new column(s).
             </summary>
             <param name="columnFrom">The position of the new column(s)</param>
             <param name="columns">Number of columns to insert.</param>
             <param name="copyStylesFromColumn">Copy Styles from this column. Applied to all inserted columns</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.DeleteRow(System.Int32)">
            <summary>
            Delete the specified row from the worksheet.
            </summary>
            <param name="row">A row to be deleted</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.DeleteRow(System.Int32,System.Int32)">
            <summary>
            Delete the specified rows from the worksheet.
            </summary>
            <param name="rowFrom">The start row</param>
            <param name="rows">Number of rows to delete</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.DeleteRow(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Deletes the specified rows from the worksheet.
            </summary>
            <param name="rowFrom">The number of the start row to be deleted</param>
            <param name="rows">Number of rows to delete</param>
            <param name="shiftOtherRowsUp">Not used. Rows are always shifted</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.DeleteColumn(System.Int32)">
            <summary>
            Delete the specified column from the worksheet.
            </summary>
            <param name="column">The column to be deleted</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.DeleteColumn(System.Int32,System.Int32)">
            <summary>
            Delete the specified columns from the worksheet.
            </summary>
            <param name="columnFrom">The start column</param>
            <param name="columns">Number of columns to delete</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.GetValue(System.Int32,System.Int32)">
            <summary>
            Get the cell value from thw worksheet
            </summary>
            <param name="Row">The row number</param>
            <param name="Column">The row number</param>
            <returns>The value</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.GetValue``1(System.Int32,System.Int32)">
            <summary>
            Get a strongly typed cell value from the worksheet
            </summary>
            <typeparam name="T">The type</typeparam>
            <param name="Row">The row number</param>
            <param name="Column">The row number</param>
            <returns>The value. If the value can't be converted to the specified type, the default value will be returned</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.SetValue(System.Int32,System.Int32,System.Object)">
            <summary>
            Set the value of a cell
            </summary>
            <param name="Row">The row number</param>
            <param name="Column">The column number</param>
            <param name="Value">The value</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.SetValue(System.String,System.Object)">
            <summary>
            Set the value of a cell
            </summary>
            <param name="Address">The Excel address</param>
            <param name="Value">The value</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.GetMergeCellId(System.Int32,System.Int32)">
            <summary>
            Get MergeCell Index No
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.DeletePrinterSettings">
            <summary>
            Delete the printersettings relationship and part.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.SaveTables">
            <summary>
            Save all table data
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.Dimension">
            <summary>
            Dimension address for the worksheet. 
            Top left cell to Bottom right.
            If the worksheet has no cells, null is returned
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.Protection">
            <summary>
            Access to sheet protection properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.ProtectedRanges">
            <summary>
            Access to protected ranges in the worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.Drawings">
            <summary>
            Collection of drawing-objects like shapes, images and charts
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.SparklineGroups">
            <summary>
            Collection of Sparkline-objects. 
            Sparklines are small in-cell charts.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.Tables">
            <summary>
            Tables defined in the worksheet.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.PivotTables">
            <summary>
            Pivottables defined in the worksheet.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.ConditionalFormatting">
            <summary>
            ConditionalFormatting defined in the worksheet. Use the Add methods to create ConditionalFormatting and add them to the worksheet. Then
            set the properties on the instance returned.
            </summary>
            <seealso cref="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection"/>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.IgnoredErrors">
            <summary>
            Ignore Errors for the specified ranges and error types.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.BackgroundImage">
            <summary>
            An image displayed as the background of the worksheet.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.Workbook">
            <summary>
            The workbook object
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.GetMaxShareFunctionIndex(System.Boolean)">
            <summary>
            Get the next ID from a shared formula or an Array formula
            Sharedforumlas will have an id from 0-x. Array formula ids start from 0x4000001-. 
            </summary>
            <param name="isArray">If the formula is an array formula</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.Dispose">
            <summary>
            Disposes the worksheet
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.GetColumn(System.Int32)">
            <summary>
            Get the ExcelColumn for column (span ColumnMin and ColumnMax)
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.Equals(OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Check if a worksheet is equal to another
            </summary>
            <param name="x">First worksheet </param>
            <param name="y">Second worksheet</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.GetHashCode(OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Returns a hashcode generated from the WorksheetXml
            </summary>
            <param name="obj">The worksheet</param>
            <returns>The hashcode</returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.Rows">
            <summary>
            A collection of row specific properties in the worksheet.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.Columns">
            <summary>
            A collection of column specific properties in the worksheet.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.GetCoreValueInner(System.Int32,System.Int32)">
            <summary>
            Get accessor of sheet value
            </summary>
            <param name="row">row</param>
            <param name="col">column</param>
            <returns>cell value</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.GetValueInner(System.Int32,System.Int32)">
            <summary>
            Get accessor of sheet value
            </summary>
            <param name="row">row</param>
            <param name="col">column</param>
            <returns>cell value</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.GetStyleInner(System.Int32,System.Int32)">
            <summary>
            Get accessor of sheet styleId
            </summary>
            <param name="row">row</param>
            <param name="col">column</param>
            <returns>cell styleId</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.SetValueInner(System.Int32,System.Int32,System.Object)">
            <summary>
            Set accessor of sheet value
            </summary>
            <param name="row">row</param>
            <param name="col">column</param>
            <param name="value">value</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.SetStyleInner(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set accessor of sheet styleId
            </summary>
            <param name="row">row</param>
            <param name="col">column</param>
            <param name="styleId">styleId</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.SetValueStyleIdInner(System.Int32,System.Int32,System.Object,System.Int32)">
            <summary>
            Set accessor of sheet styleId
            </summary>
            <param name="row">row</param>
            <param name="col">column</param>
            <param name="value">value</param>
            <param name="styleId">styleId</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.SetRangeValueInner(System.Int32,System.Int32,System.Int32,System.Int32,System.Object[0:,0:],System.Boolean)">
            <summary>
            Bulk(Range) set accessor of sheet value, for value array
            </summary>
            <param name="fromRow">start row</param>
            <param name="fromColumn">start column</param>
            <param name="toRow">end row</param>
            <param name="toColumn">end column</param>
            <param name="values">set values</param>
            <param name="setHyperLinkFromValue">If the value is of type Uri or ExcelHyperlink the Hyperlink property is set.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.ExistsValueInner(System.Int32,System.Int32)">
            <summary>
            Existance check of sheet value
            </summary>
            <param name="row">row</param>
            <param name="col">column</param>
            <returns>is exists</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.ExistsStyleInner(System.Int32,System.Int32)">
            <summary>
            Existance check of sheet styleId
            </summary>
            <param name="row">row</param>
            <param name="col">column</param>
            <returns>is exists</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.ExistsValueInner(System.Int32,System.Int32,System.Object@)">
            <summary>
            Existence check of sheet value
            </summary>
            <param name="row">row</param>
            <param name="col">column</param>
            <param name="value"></param>
            <returns>is exists</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.ExistsStyleInner(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Existence check of sheet styleId
            </summary>
            <param name="row">row</param>
            <param name="col">column</param>
            <param name="styleId"></param>
            <returns>is exists</returns>
        </member>
        <member name="T:OfficeOpenXml.ExcelWorksheets">
            <summary>
            The collection of worksheets for the workbook
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheets.Count">
            <summary>
            Returns the number of worksheets in the workbook
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.GetEnumerator">
            <summary>
            Foreach support
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.Add(System.String)">
            <summary>
            Adds a new blank worksheet.
            </summary>
            <param name="Name">The name of the workbook</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.Add(System.String,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Adds a copy of a worksheet
            </summary>
            <param name="Name">The name of the workbook</param>
            <param name="Copy">The worksheet to be copied</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.AddChart(System.String,OfficeOpenXml.Drawing.Chart.eChartType)">
            <summary>
            Adds a chartsheet to the workbook.
            </summary>
            <param name="Name">The name of the worksheet</param>
            <param name="chartType">The type of chart</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.AddChart(System.String,OfficeOpenXml.Drawing.Chart.eChartType,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Adds a chartsheet to the workbook.
            </summary>
            <param name="Name">The name of the worksheet</param>
            <param name="chartType">The type of chart</param>
            <param name="pivotTableSource">The pivottable source</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.AddStockChart(System.String,OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase)">
            <summary>
            Adds a stock chart sheet to the workbook.
            </summary>
            <param name="Name">The name of the worksheet</param>
            <param name="CategorySerie">The category serie. A serie containing dates or names</param>
            <param name="HighSerie">The high price serie</param>    
            <param name="LowSerie">The low price serie</param>    
            <param name="CloseSerie">The close price serie containing</param>    
            <param name="OpenSerie">The opening price serie. Supplying this serie will create a StockOHLC or StockVOHLC chart</param>
            <param name="VolumeSerie">The volume represented as a column chart. Supplying this serie will create a StockVHLC or StockVOHLC chart</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.ValidateName(System.String)">
            <summary>
            Validate the sheetname
            </summary>
            <param name="Name">The Name</param>
            <returns>True if valid</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.CreateNewWorksheet(System.Boolean)">
            <summary>
            Creates the XML document representing a new empty worksheet
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.Delete(System.Int32)">
            <summary>
            Deletes a worksheet from the collection
            </summary>
            <param name="Index">The position of the worksheet in the workbook</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.Delete(System.String)">
            <summary>
            Deletes a worksheet from the collection
            </summary>
            <param name="name">The name of the worksheet in the workbook</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.Delete(OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Delete a worksheet from the collection
            </summary>
            <param name="Worksheet">The worksheet to delete</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheets.Item(System.Int32)">
            <summary>
            Returns the worksheet at the specified position. 
            </summary>
            <param name="PositionID">The position of the worksheet. Collection is zero-based or one-base depending on the Package.Compatibility.IsWorksheets1Based propery. Default is One based</param>
            <seealso cref="P:OfficeOpenXml.ExcelPackage.Compatibility"/>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheets.Item(System.String)">
            <summary>
            Returns the worksheet matching the specified name
            </summary>
            <param name="Name">The name of the worksheet</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.Copy(System.String,System.String)">
            <summary>
            Copies the named worksheet and creates a new worksheet in the same workbook
            </summary>
            <param name="Name">The name of the existing worksheet</param>
            <param name="NewName">The name of the new worksheet to create</param>
            <returns>The new copy added to the end of the worksheets collection</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.GetWorksheetByName(System.String,System.String,System.Boolean)">
            <summary>
            Return a worksheet by its name. Can throw an exception if the worksheet does not exist.
            </summary>
            <param name="worksheetName">Name of the reqested worksheet</param>
            <param name="paramName">Name of the parameter</param>
            <param name="throwIfNull">Throws an <see cref="T:System.ArgumentNullException"></see> if the worksheet doesn't exist.</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.MoveBefore(System.String,System.String)">
            <summary>
            Moves the source worksheet to the position before the target worksheet
            </summary>
            <param name="sourceName">The name of the source worksheet</param>
            <param name="targetName">The name of the target worksheet</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.MoveBefore(System.Int32,System.Int32)">
            <summary>
            Moves the source worksheet to the position before the target worksheet
            </summary>
            <param name="sourcePositionId">The id of the source worksheet</param>
            <param name="targetPositionId">The id of the target worksheet</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.MoveAfter(System.String,System.String)">
            <summary>
            Moves the source worksheet to the position after the target worksheet
            </summary>
            <param name="sourceName">The name of the source worksheet</param>
            <param name="targetName">The name of the target worksheet</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.MoveAfter(System.Int32,System.Int32)">
            <summary>
            Moves the source worksheet to the position after the target worksheet
            </summary>
            <param name="sourcePositionId">The id of the source worksheet</param>
            <param name="targetPositionId">The id of the target worksheet</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.MoveToStart(System.String)">
            <summary>
            Moves the source worksheet to the start of the worksheets collection
            </summary>
            <param name="sourceName">The name of the source worksheet</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.MoveToStart(System.Int32)">
            <summary>
            Moves the source worksheet to the start of the worksheets collection
            </summary>
            <param name="sourcePositionId">The position of the source worksheet</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.MoveToEnd(System.String)">
            <summary>
            Moves the source worksheet to the end of the worksheets collection
            </summary>
            <param name="sourceName">The name of the source worksheet</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.MoveToEnd(System.Int32)">
            <summary>
            Moves the source worksheet to the end of the worksheets collection
            </summary>
            <param name="sourcePositionId">The position of the source worksheet</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.Dispose">
            <summary>
            Dispose the worksheets collection
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ePaneState">
            <summary>
            The state of the pane.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaneState.Frozen">
            <summary>
            Panes are frozen, but were not split being frozen.In this state, when the panes are unfrozen again, a single pane results, with no split. In this state, the split bars are not adjustable.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaneState.FrozenSplit">
            <summary>
            Frozen Split
            Panes are frozen and were split before being frozen. In this state, when the panes are unfrozen again, the split remains, but is adjustable.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaneState.Split">
            <summary>
            Panes are split, but not frozen.In this state, the split bars are adjustable by the user.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ePanePosition">
            <summary>
            The position of the pane.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePanePosition.BottomLeft">
            <summary>
            Bottom Left Pane.
            Used when worksheet view has both vertical and horizontal splits.
            Also used when the worksheet is horizontaly split only, specifying this is the bottom pane.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePanePosition.BottomRight">
            <summary>
            Bottom Right Pane. 
            This property is only used when the worksheet has both vertical and horizontal splits.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePanePosition.TopLeft">
            <summary>
            Top Left Pane.
            Used when worksheet view has both vertical and horizontal splits.
            Also used when the worksheet is horizontaly split only, specifying this is the top pane.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePanePosition.TopRight">
            <summary>
            Top Right Pane
            Used when the worksheet view has both vertical and horizontal splits.
            Also used when the worksheet is verticaly split only, specifying this is the right pane.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelWorksheetView">
            <summary>
            Represents the different view states of the worksheet
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelWorksheetView.ExcelWorksheetViewPaneSettings">
            <summary>
            Defines general properties for the panes, if the worksheet is frozen or split.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.ExcelWorksheetViewPaneSettings.State">
            <summary>
            The state of the pane.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.ExcelWorksheetViewPaneSettings.ActivePanePosition">
            <summary>
            The active pane
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.ExcelWorksheetViewPaneSettings.XSplit">
            <summary>
            The horizontal position of the split. 1/20 of a point if the pane is split. Number of columns in the top pane if this pane is frozen.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.ExcelWorksheetViewPaneSettings.YSplit">
            <summary>
            The vertical position of the split. 1/20 of a point if the pane is split. Number of rows in the left pane if this pane is frozen.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.ExcelWorksheetViewPaneSettings.TopLeftCell">
            <summary>
            
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelWorksheetView.ExcelWorksheetPanes">
            <summary>
            The selection properties for panes after a freeze or split.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.ExcelWorksheetPanes.ActiveCell">
            <summary>
            Set the active cell. Must be set within the SelectedRange.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.ExcelWorksheetPanes.Position">
            <summary>
            The position of the pane.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.ExcelWorksheetPanes.ActiveCellId">
            <summary>
            
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.ExcelWorksheetPanes.SelectedRange">
            <summary>
            Selected Cells. Used in combination with ActiveCell
            </summary>        
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheetView.#ctor(System.Xml.XmlNamespaceManager,System.Xml.XmlNode,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Creates a new ExcelWorksheetView which provides access to all the view states of the worksheet.
            </summary>
            <param name="ns"></param>
            <param name="node"></param>
            <param name="xlWorksheet"></param>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.SheetViewElement">
            <summary>
            Returns a reference to the sheetView element
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.ActiveCell">
            <summary>
            The active cell. Single cell address.                
            This cell must be inside the selected range. If not, the selected range is set to the active cell address
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.TopLeftCell">
            <summary>
            The Top-Left Cell visible. Single cell address.
            Empty string or null is the same as A1.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.SelectedRange">
            <summary>
            Selected Cells in the worksheet. Used in combination with ActiveCell.
            If the active cell is not inside the selected range, the active cell will be set to the first cell in the selected range.
            If the selected range has multiple adresses, these are separated with space. If the active cell is not within the first address in this list, the attribute ActiveCellId must be set (not supported, so it must be set via the XML).
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.PaneSettings">
            <summary>
            Contains settings for the active pane
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.TabSelected">
            <summary>
            If the worksheet is selected within the workbook. NOTE: Setter clears other selected tabs.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.TabSelectedMulti">
            <summary>
            If the worksheet is selected within the workbook. NOTE: Setter keeps other selected tabs.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheetView.SetTabSelected(System.Boolean,System.Boolean)">
            <summary>
            Sets whether the worksheet is selected within the workbook.
            </summary>
            <param name="isSelected">Whether the tab is selected, defaults to true.</param>
            <param name="allowMultiple">Whether to allow multiple active tabs, defaults to false.</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.PageLayoutView">
            <summary>
            Sets the view mode of the worksheet to pagelayout
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.PageBreakView">
            <summary>
            Sets the view mode of the worksheet to pagebreak
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.ShowGridLines">
            <summary>
            Show gridlines in the worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.ShowHeaders">
            <summary>
            Show the Column/Row headers (containg column letters and row numbers)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.ZoomScale">
            <summary>
            Window zoom magnification for current view representing percent values.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.RightToLeft">
            <summary>
            If the sheet is in 'right to left' display mode. Column A is on the far right and column B to the left of A. Text is also 'right to left'.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.Panes">
            <summary>
            Reference to the panes
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.TopLeftPane">
            <summary>
            The top left pane or the top pane if the sheet is horizontaly split. This property returns null if the pane does not exist in the <see cref="P:OfficeOpenXml.ExcelWorksheetView.Panes"/> array.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.TopRightPane">
            <summary>
            The top right pane. This property returns null if the pane does not exist in the <see cref="P:OfficeOpenXml.ExcelWorksheetView.Panes"/> array.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.BottomLeftPane">
            <summary>
            The bottom left pane. This property returns null if the pane does not exist in the <see cref="P:OfficeOpenXml.ExcelWorksheetView.Panes"/> array.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.BottomRightPane">
            <summary>
            The bottom right pane. This property returns null if the pane does not exist in the <see cref="P:OfficeOpenXml.ExcelWorksheetView.Panes"/> array.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheetView.FreezePanes(System.Int32,System.Int32)">
            <summary>
            Freeze the columns/rows to left and above the cell
            </summary>
            <param name="Row"></param>
            <param name="Column"></param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheetView.SplitPanesPixels(System.Int32,System.Int32)">
            <summary>
            Split panes at the position in pixels from the top-left corner.
            </summary>
            <param name="pixelsY">Vertical pixels</param>
            <param name="pixelsX">Horizontal pixels</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheetView.SplitPanes(System.Int32,System.Int32)">
            <summary>
            Split the window at the supplied row/column. 
            The split is performed using the current width/height of the visible rows and columns, so any changes to column width or row heights after the split will not effect the split position.
            To remove split call this method with zero as value of both paramerters or use <seealso cref="M:OfficeOpenXml.ExcelWorksheetView.UnFreezePanes"/>
            </summary>
            <param name="rowsTop">Splits the panes at the coordinate after this visible row. Zero mean no split on row level</param>
            <param name="columnsLeft">Splits the panes at the coordinate after this visible column. Zero means no split on column level.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheetView.UnFreezePanes">
            <summary>
            Unlock all rows and columns to scroll freely
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelXMLWriter.ExcelXmlWriter.#ctor(OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.ExcelPackage)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="package"></param>
        </member>
        <member name="M:OfficeOpenXml.ExcelXMLWriter.ExcelXmlWriter.WriteNodes(System.IO.StreamWriter,System.String,System.Int32@,System.Int32@)">
            <summary>
            Replaces placeholder nodes by writing the system's held information
            </summary>
            <param name="sw">The streamwriter file info is written to</param>
            <param name="xml">The original XML</param>
            <param name="startOfNode">Start position of the current node</param>
            <param name="endOfNode">End position of the current node</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelXMLWriter.ExcelXmlWriter.UpdateColumnData(System.IO.StreamWriter,System.String)">
            <summary>
            Inserts the cols collection into the XML document
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelXMLWriter.ExcelXmlWriter.FixSharedFormulas">
            <summary>
            Check all Shared formulas that the first cell has not been deleted.
            If so create a standard formula of all cells in the formula .
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelXMLWriter.ExcelXmlWriter.UpdateRowCellData(System.IO.StreamWriter,System.String)">
            <summary>
            Insert row and cells into the XML document
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelXMLWriter.ExcelXmlWriter.UpdateMergedCells(System.IO.StreamWriter,System.String)">
            <summary>
            Update merged cells
            </summary>
            <param name="sw">The writer</param>
            <param name="prefix">Namespace prefix for the main schema</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelXMLWriter.ExcelXmlWriter.UpdateHyperLinks(System.IO.StreamWriter,System.String)">
            <summary>
            Update xml with hyperlinks 
            </summary>
            <param name="sw">The stream</param>
            <param name="prefix">The namespace prefix for the main schema</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelXMLWriter.ExcelXmlWriter.UpdateExtLstDataValidations(System.String)">
            <summary>
            ExtLst updater for DataValidations
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelXMLWriter.ExtLstHelper.InsertExt(System.String,System.String,System.String)">
            <summary>
            Inserts content after the uriNode
            Note that this is only intended to be done once per type of node and it will throw error
            if the same uri is attempted in two separate calls or if it's already been read in initally.
            </summary>
            <param name="uri"></param>
            <param name="content"></param>
            If <param name="uriOfNodeBefore"> is blank sets content as the first ext</param>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.Accessibility.AccessibilitySettings">
            <summary>
            This class contains settings for usage of accessibility/ARIA attributes in the exported html.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Accessibility.AccessibilitySettings.TableSettings">
            <summary>
            Settings for a html table
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.Accessibility.TableAccessibilitySettings">
            <summary>
            This class controls how accessibility attributes will be set in the exported html.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Accessibility.TableAccessibilitySettings.ResetToDefault">
            <summary>
            Reset all properties to their default value
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Accessibility.TableAccessibilitySettings.Copy(OfficeOpenXml.Export.HtmlExport.Accessibility.TableAccessibilitySettings)">
            <summary>
            Copies all properties from one instance to another.
            </summary>
            <param name="copy"></param>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Accessibility.TableAccessibilitySettings.AddAccessibilityAttributes">
            <summary>
            Controls whether accessibility attributes will be added to the html.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Accessibility.TableAccessibilitySettings.AriaLabel">
            <summary>
            Value of the aria-label attribute
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Accessibility.TableAccessibilitySettings.AriaLabelledBy">
            <summary>
            Value of the aria-labelledby attribute
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Accessibility.TableAccessibilitySettings.AriaDescribedBy">
            <summary>
            Value of the aria-describedby attribute
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Accessibility.TableAccessibilitySettings.TableRole">
            <summary>
            Value of the role attribute on the table element. Default value: table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Accessibility.TableAccessibilitySettings.TheadRole">
            <summary>
            Value of the role attribute on the thead element. Default value: rowgroup
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Accessibility.TableAccessibilitySettings.TbodyRole">
            <summary>
            Value of the role attribute on the tbody element. Default value: rowgroup
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Accessibility.TableAccessibilitySettings.TfootRole">
            <summary>
            Value of the role attribute on the tfoot element. Default value: rowgroup
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Accessibility.TableAccessibilitySettings.TableHeaderCellRole">
            <summary>
            Value of the role attribute on the thead.tr.td element. Default value: columnheader
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.eBorderExclude">
            <summary>
            Exclude border properties in the css
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eBorderExclude.All">
            <summary>
            Exclude all border properties.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eBorderExclude.Top">
            <summary>
            Exclude top border properties
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eBorderExclude.Bottom">
            <summary>
            Exclude bottom border properties
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eBorderExclude.Left">
            <summary>
            Exclude left border properties
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eBorderExclude.Right">
            <summary>
            Exclude right border properties
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.eFontExclude">
            <summary>
            Exclude font properties in the css
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eFontExclude.All">
            <summary>
            Exclude all font properties.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eFontExclude.Name">
            <summary>
            Exclude the font name property
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eFontExclude.Size">
            <summary>
            Exclude the font size property
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eFontExclude.Color">
            <summary>
            Exclude the font color property
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eFontExclude.Bold">
            <summary>
            Exclude the font bold property
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eFontExclude.Italic">
            <summary>
            Exclude the font italic property
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eFontExclude.Strike">
            <summary>
            Exclude the font strike property
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eFontExclude.Underline">
            <summary>
            Exclude the font underline property
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.eHiddenState">
            <summary>
            How hidden rows are handled.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eHiddenState.Exclude">
            <summary>
            Exclude hidden rows
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eHiddenState.IncludeButHide">
            <summary>
            Include hidden rows, but hide them.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eHiddenState.Include">
            <summary>
            Include hidden rows.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.eHtmlGeneralAlignmentHandling">
            <summary>
            How the text alignment is handled when the style is set to General
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eHtmlGeneralAlignmentHandling.DontSet">
            <summary>
            Dont set any alignment when alignment is set to general
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eHtmlGeneralAlignmentHandling.ColumnDataType">
            <summary>
            If the column data type is numeric or date, alignment will be right otherwise left.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eHtmlGeneralAlignmentHandling.CellDataType">
            <summary>
            If the cell value data type is numeric or date, alignment will be right otherwise left.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.ePictureInclude">
            <summary>
            How to include picture drawings in the html
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.ePictureInclude.Exclude">
            <summary>
            Do not include pictures in the html export. Default
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.ePictureInclude.IncludeInCssOnly">
            <summary>
            Include in css only, so they images can be added manually. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.ePictureInclude.Include">
            <summary>
            Include the images in the html export.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.ePicturePosition">
            <summary>
            If the Picture is absolut or relative to the table cell
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.ePicturePosition.DontSet">
            <summary>
            No CSS is added for Position
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.ePicturePosition.Absolute">
            <summary>
            Position is Absolute in the CSS
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.ePicturePosition.Relative">
            <summary>
            Position is Relative in the CSS
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.CssRangeExporterSync.GetCssString">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.CssRangeExporterSync.RenderCss(System.IO.Stream)">
            <summary>
            Exports the css part of the html export.
            </summary>
            <param name="stream">The stream to write the css to.</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.CssTableExporterSync.GetCssString">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.CssTableExporterSync.RenderCss(System.IO.Stream)">
            <summary>
            Exports the css part of an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlExporterBase">
            <summary>
            Base class for Html exporters
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlExporterBase.#ctor(OfficeOpenXml.ExcelRangeBase)">
            <summary>
            Constructor
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlExporterBase.#ctor(OfficeOpenXml.ExcelRangeBase[])">
            <summary>
            Constructor
            </summary>
            <param name="ranges"></param>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlExporterBase.Ranges">
            <summary>
            Exported ranges
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter.GetHtmlString">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter.GetHtmlString(System.Int32)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">0-based index of the requested range</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter.GetHtmlString(System.Int32,OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="settings">Override some of the settings for this html exclusively</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter.GetHtmlString(System.Int32,System.Action{OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings})">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="config">Override some of the settings for this html exclusively</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter.RenderHtml(System.IO.Stream)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter.RenderHtml(System.IO.Stream,System.Int32,OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="rangeIndex">The index of the range to output.</param>
            <param name="overrideSettings">Settings for this specific range index</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter.RenderHtml(System.IO.Stream,System.Int32,System.Action{OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings})">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="rangeIndex">The index of the range to output.</param>
            <param name="config">Settings for this specific range index</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter.GetSinglePage(System.String)">
            <summary>
            Renders both the Html and the Css to a single page. 
            </summary>
            <param name="htmlDocument">The html string where to insert the html and the css. The Html will be inserted in string parameter {0} and the Css will be inserted in parameter {1}.</param>
            <returns>The html document</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter.GetCssString">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>Cascading style sheet for the exported range</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter.RenderCss(System.IO.Stream)">
            <summary>
            Exports the css part of the html export.
            </summary>
            <param name="stream">The stream to write the css to.</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlTableExporter.GetHtmlString">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlTableExporter.RenderHtml(System.IO.Stream)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlTableExporter.GetSinglePage(System.String)">
            <summary>
            Renders both the Html and the Css to a single page. 
            </summary>
            <param name="htmlDocument">The html string where to insert the html and the css. The Html will be inserted in string parameter {0} and the Css will be inserted in parameter {1}.</param>
            <returns>The html document</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlTableExporter.GetCssString">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>Cascading style sheet for the exported range</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlTableExporter.RenderCss(System.IO.Stream)">
            <summary>
            Exports the css part of the html export.
            </summary>
            <param name="stream">The stream to write the css to.</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter.GetHtmlString">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter.GetHtmlString(System.Int32)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">0-based index of the requested range</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter.GetHtmlString(System.Int32,OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="settings">Override some of the settings for this html exclusively</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter.GetHtmlString(System.Int32,System.Action{OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings})">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="config">Override some of the settings for this html exclusively</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter.RenderHtml(System.IO.Stream)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter.RenderHtml(System.IO.Stream,System.Int32,OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="rangeIndex">The index of the range to output.</param>
            <param name="overrideSettings">Settings for this specific range index</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter.RenderHtml(System.IO.Stream,System.Int32,System.Action{OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings})">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="rangeIndex">The index of the range to output.</param>
            <param name="config">Settings for this specific range index</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter.GetSinglePage(System.String)">
            <summary>
            Renders both the Html and the Css to a single page. 
            </summary>
            <param name="htmlDocument">The html string where to insert the html and the css. The Html will be inserted in string parameter {0} and the Css will be inserted in parameter {1}.</param>
            <returns>The html document</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter.GetCssString">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>Cascading style sheet for the exported range</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter.RenderCss(System.IO.Stream)">
            <summary>
            Exports the css part of the html export.
            </summary>
            <param name="stream">The stream to write the css to.</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterSync.GetHtmlString">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterSync.GetHtmlString(System.Int32)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterSync.GetHtmlString(System.Int32,OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="settings">Override some of the settings for this html exclusively</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterSync.GetHtmlString(System.Int32,System.Action{OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings})">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="config">Override some of the settings for this html exclusively</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterSync.RenderHtml(System.IO.Stream)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterSync.RenderHtml(System.IO.Stream,System.Int32,OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="rangeIndex">The index of the range to output.</param>
            <param name="overrideSettings">Settings for this specific range index</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterSync.RenderHtml(System.IO.Stream,System.Int32,System.Action{OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings})">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="config">Override some of the settings for this html exclusively</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterSync.Ranges">
            <summary>
            The ranges used in the export.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterSync.GetSinglePage(System.String)">
            <summary>
            Renders both the Html and the Css to a single page. 
            </summary>
            <param name="htmlDocument">The html string where to insert the html and the css. The Html will be inserted in string parameter {0} and the Css will be inserted in parameter {1}.</param>
            <returns>The html document</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterSyncBase.RenderHyperlink(OfficeOpenXml.Export.HtmlExport.EpplusHtmlWriter,OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.Export.HtmlExport.HtmlExportSettings)">
            <summary>
            Renders a hyperlink
            </summary>
            <param name="writer"></param>
            <param name="cell"></param>
            <param name="settings"></param>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlTableExporterSync.GetHtmlString">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlTableExporterSync.RenderHtml(System.IO.Stream)">
            <summary>
            Exports the html part of an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string.
            </summary>
            <param name="stream">The stream to write to.</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlTableExporterSync.GetSinglePage(System.String)">
            <summary>
            Renders both the Css and the Html to a single page. 
            </summary>
            <param name="htmlDocument">The html string where to insert the html and the css. The Html will be inserted in string parameter {0} and the Css will be inserted in parameter {1}.</param>
            <returns>The html document</returns>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter">
            <summary>
            Public interface for the Html exporter
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.Settings">
            <summary>
             Settings for how to perform the html export
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.Ranges">
            <summary>
            Exported ranges
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.GetHtmlString">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.GetHtmlString(System.Int32)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">0-based index of the requested range</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.GetHtmlString(System.Int32,OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="settings">Override some of the settings for this html exclusively</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.GetHtmlString(System.Int32,System.Action{OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings})">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="config">Override some of the settings for this html exclusively</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.RenderHtml(System.IO.Stream)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.RenderHtml(System.IO.Stream,System.Int32,OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="rangeIndex">The index of the range to output.</param>
            <param name="overrideSettings">Settings for this specific range index</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.RenderHtml(System.IO.Stream,System.Int32,System.Action{OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings})">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="rangeIndex">The index of the range to output.</param>
            <param name="config">Settings for this specific range index</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.GetSinglePage(System.String)">
            <summary>
            Renders both the Html and the Css to a single page. 
            </summary>
            <param name="htmlDocument">The html string where to insert the html and the css. The Html will be inserted in string parameter {0} and the Css will be inserted in parameter {1}.</param>
            <returns>The html document</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.GetCssString">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>Cascading style sheet for the exported range</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.RenderCss(System.IO.Stream)">
            <summary>
            Exports the css part of the html export.
            </summary>
            <param name="stream">The stream to write the css to.</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlTableExporter">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to html and css.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlTableExporter.Settings">
            <summary>
            Settings for the html export
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlTableExporter.GetHtmlString">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlTableExporter.RenderHtml(System.IO.Stream)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlTableExporter.GetSinglePage(System.String)">
            <summary>
            Renders both the Html and the Css to a single page. 
            </summary>
            <param name="htmlDocument">The html string where to insert the html and the css. The Html will be inserted in string parameter {0} and the Css will be inserted in parameter {1}.</param>
            <returns>The html document</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlTableExporter.GetCssString">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>Cascading style sheet for the exported range</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlTableExporter.RenderCss(System.IO.Stream)">
            <summary>
            Exports the css part of the html export.
            </summary>
            <param name="stream">The stream to write the css to.</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.CssExclude">
            <summary>
            Css settings to exclude individual styles.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExclude.Font">
            <summary>
            Exclude Font styles.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExclude.Border">
            <summary>
            Exclude Border styles
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExclude.Fill">
            <summary>
            Exclude Fill styles
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExclude.VerticalAlignment">
            <summary>
            Exclude vertical alignment.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExclude.HorizontalAlignment">
            <summary>
            Exclude horizontal alignment.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExclude.WrapText">
            <summary>
            Exclude Wrap Text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExclude.TextRotation">
            <summary>
            Exclude Text Rotation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExclude.Indent">
            <summary>
            Exclude Indent.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.CssExclude.ResetToDefault">
            <summary>
            Reset the settings to it's default values.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.CssExclude.Copy(OfficeOpenXml.Export.HtmlExport.CssExclude)">
            <summary>
            Copy the values from another settings object.
            </summary>
            <param name="copy">The object to copy.</param>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.CssExcludeStyle">
            <summary>
            Exclude css on an <see cref="T:OfficeOpenXml.Table.ExcelTable"/>.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExcludeStyle.TableStyle">
            <summary>
            Css settings for table styles
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExcludeStyle.CellStyle">
            <summary>
            Css settings for cell styles.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.CssExportSettings">
            <summary>
            Base class for css export settings.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExportSettings.IncludeSharedClasses">
            <summary>
            If set to true shared css classes used on table elements are included in the css. 
            If set to false, these classes has to be included manually. <see cref="P:OfficeOpenXml.Export.HtmlExport.CssExportSettings.IncludeNormalFont"/> will be ignored if set to false and no font css will be added.        
            Default is true
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExportSettings.IncludeNormalFont">
            <summary>
            If true the normal font will be included in the css. Default is true
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExportSettings.AdditionalCssElements">
            <summary>
            Css elements added to the table.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExportSettings.IndentValue">
            <summary>
            The value used in the stylesheet for an indentation in a cell
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExportSettings.IndentUnit">
            <summary>
            The unit used in the stylesheet for an indentation in a cell
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.CssRangeExportSettings">
            <summary>
            Settings for css export for tables
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssRangeExportSettings.CssExclude">
            <summary>
            Settings to exclude specific styles from the css.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.CssRangeExportSettings.ResetToDefault">
            <summary>
            Reset the settings to it's default values.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.CssRangeExportSettings.Copy(OfficeOpenXml.Export.HtmlExport.CssRangeExportSettings)">
            <summary>
            Copy the values from another settings object.
            </summary>
            <param name="copy">The object to copy.</param>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.CssTableExportSettings">
            <summary>
            Settings for css export for tables
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssTableExportSettings.IncludeTableStyles">
            <summary>
            Include Css for the current table style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssTableExportSettings.IncludeCellStyles">
            <summary>
            Include Css for cell styling.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssTableExportSettings.Exclude">
            <summary>
            Exclude flags for styles
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.CssTableExportSettings.ResetToDefault">
            <summary>
            Reset the settings to it's default values.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.CssTableExportSettings.Copy(OfficeOpenXml.Export.HtmlExport.CssTableExportSettings)">
            <summary>
            Copy the values from another settings object.
            </summary>
            <param name="copy">The object to copy.</param>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings">
            <summary>
            When exporting multiple ranges from the same workbook, this class can be used
            to override certain properties of the settings.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.TableId">
            <summary>
            Html id of the exported table.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.AdditionalTableClassNames">
            <summary>
            Use this property to set additional class names that will be set on the exported html-table.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.Accessibility">
            <summary>
            Settings for usage of accessibility (aria, role) attributes of the table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.HeaderRows">
            <summary>
            Number of header rows before the actual data. Default is 1.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.Headers">
            <summary>
            If <see cref="P:OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.HeaderRows"/> is 0, this collection contains the headers. 
            If this collection is empty the table will have no headers.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.Settings.HtmlTableExportSettings">
            <summary>
            Settings for html export for tables
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Settings.HtmlTableExportSettings.Css">
            <summary>
            Css export settings.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Settings.HtmlTableExportSettings.ResetToDefault">
            <summary>
            Reset the settings to it's default values.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Settings.HtmlTableExportSettings.Copy(OfficeOpenXml.Export.HtmlExport.Settings.HtmlTableExportSettings)">
            <summary>
            Copy the values from another settings object.
            </summary>
            <param name="copy">The object to copy.</param>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Settings.HtmlTableExportSettings.Configure(System.Action{OfficeOpenXml.Export.HtmlExport.Settings.HtmlTableExportSettings})">
            <summary>
            Configure the settings.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings">
            <summary>
            Base class for HTML export for ranges and tables.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.TableId">
            <summary>
            The html id attribute for the exported table. The id attribute is only added to the table if this property is not null or empty.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.Minify">
            <summary>
            If set to true the rendered html will be formatted with indents and linebreaks.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.HiddenRows">
            <summary>
            How hidden rows will be handled. Default is <see cref="F:OfficeOpenXml.Export.HtmlExport.eHiddenState.Exclude"/> 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.HorizontalAlignmentWhenGeneral">
            <summary>
            How to set the alignment for a cell if it's alignment is set to General.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.Accessibility">
            <summary>
            Settings for usage of accessibility (aria, role) attributes of the table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.AdditionalTableClassNames">
            <summary>
            Use this property to set additional class names that will be set on the exported html-table.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.DataValueAttributeName">
            <summary>
            Use this property to set the name of the html data-* attribute that contains the raw value.
            Default value is "value" which means that the name of the attribute is "data-value".
            To change the name to "data-x", set this property to "x"
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.Culture">
            <summary>
            The culture used when formatting the cell output.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.Encoding">
            <summary>
            Encoding for the output
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.SetColumnWidth">
            <summary>
            Set the column width for columns in the table via the columngroup/col element.
            Columns with the default width will have the default column width class set, ({Settings.StyleClassPrefix}dcw). 
            Columns with custom column width will have the width set directly via the style attribute.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.SetRowHeight">
            <summary>
            Set the row height for rows in the table.
            Rows with the default height will have the default row height class set, ({Settings.StyleClassPrefix}drh). 
            Rows with custom row height will have the height set directly via the style attribute.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.StyleClassPrefix">
            <summary>
            Prefix for style classes added by EPPlus. 
            <list type="table">
            <listheader><term>type</term><term>Class name</term></listheader>
            <item><term>Cell styles</term><term>{StyleClassPrefix}{CellStyleClassName}{index}</term></item>
            <item><term>Hidden Row{StyleClassPrefix}hidden</term></item>
            <item><term>Alignment Left </term><term>{StyleClassPrefix}al</term></item>
            <item><term>Alignment Right</term><term>{StyleClassPrefix}ar</term></item>
            <item><term>Default column width</term><term>{StyleClassPrefix}dcw</term></item>
            <item><term>Default row height</term><term>{StyleClassPrefix}drh</term></item>
            <item><term>Image content and position</term><term>{StyleClassPrefix}image-{imageName}</term></item>
            <item><term>Properties for an image, for example position or border settings</term><term>{StyleClassPrefix}image-prop-{imageName}</term></item>
            <item><term>Alignment for cells containing an image</term><term>{StyleClassPrefix}image-cell}</term></item>
            </list>
            <seealso cref="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.CellStyleClassName"/>
            <seealso cref="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.Pictures"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.CellStyleClassName">
            <summary>
            The name of the classes used for cell styles. 
            The name will be prefixed with the <see cref="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.StyleClassPrefix"/> and suffixed with the cell style index.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.Pictures">
            <summary>
            If picture drawings will be included. Default is true.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.IncludeCssClassNames">
            <summary>
            If set to true classes that identifies Excel table styling will be included in the html. Default value is true.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.HyperlinkTarget">
            <summary>
            Set the target attribute for hyperlinks (a elements) in the exported html.
            Can be null/empty (no target attribute), _blank, _top, _self, _parent or a frame-name.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.TableStyle">
            <summary>
            If and how table styles should export, if the range is a table.
            The range must be the same as the table range.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.RenderDataAttributes">
            <summary>
            If true data-* attributes will be rendered
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.RenderDataTypes">
            <summary>
            If true, data types are renedered on the header objects.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.HtmlPictureSettings">
            <summary>
            Setting for rendering of picture drawings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlPictureSettings.Include">
            <summary>
            If picture drawings should be included in the html. Default is <see cref="F:OfficeOpenXml.Export.HtmlExport.ePictureInclude.Exclude"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlPictureSettings.Position">
            <summary>
            If the image should be added as absolut or relative in the css.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlPictureSettings.AddMarginTop">
            <summary>
            If the margin in pixels from the top corner should be used. 
            If this property is set to true, the cells vertical alignment will be set to 'top', 
            otherwise alignment will be set to middle.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlPictureSettings.AddMarginLeft">
            <summary>
            If the margin in pixels from the left corner should be used.
            If this property is set to true, the cells text alignment will be set to 'left', 
            otherwise alignment will be set to center.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlPictureSettings.KeepOriginalSize">
            <summary>
            If set to true the original size of the image is used, 
            otherwise the size in the workbook is used. Default is false.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlPictureSettings.CssExclude">
            <summary>
            Exclude settings 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlPictureSettings.AddNameAsId">
            <summary>
            Adds the Picture name as Id for the img element in the HTML.
            Characters [A-Z][0-9]-_ are allowed. The first character allows [A-Z]_. 
            Other characters will be replaced with an hyphen (-).
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.HtmlPictureSettings.ResetToDefault">
            <summary>
            Reset the setting to it's default values.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.HtmlPictureSettings.Copy(OfficeOpenXml.Export.HtmlExport.HtmlPictureSettings)">
            <summary>
            Copy the values from another settings object.
            </summary>
            <param name="copy">The object to copy.</param>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.HtmlRangeExportSettings">
            <summary>
            Settings for html export for ranges
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlRangeExportSettings.HeaderRows">
            <summary>
            Number of header rows before the actual data. Default is 1.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlRangeExportSettings.Headers">
            <summary>
            If <see cref="P:OfficeOpenXml.Export.HtmlExport.HtmlRangeExportSettings.HeaderRows"/> is 0, this collection contains the headers. 
            If this collection is empty the table will have no headers.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlRangeExportSettings.Css">
            <summary>
            Options to exclude css elements
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.HtmlRangeExportSettings.ResetToDefault">
            <summary>
            Reset the setting to it's default values.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.HtmlRangeExportSettings.Copy(OfficeOpenXml.Export.HtmlExport.HtmlRangeExportSettings)">
            <summary>
            Copy the values from another settings object.
            </summary>
            <param name="copy">The object to copy.</param>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.PictureCssExclude">
            <summary>
            HTML Settings for excluding picture css settings.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.PictureCssExclude.Border">
            <summary>
            Exclude image border CSS
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.PictureCssExclude.Alignment">
            <summary>
            Exclude image alignment CSS
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.PictureCssExclude.ResetToDefault">
            <summary>
            Reset the setting to it's default values.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.PictureCssExclude.Copy(OfficeOpenXml.Export.HtmlExport.PictureCssExclude)">
            <summary>
            Copy the values from another settings object.
            </summary>
            <param name="copy">The object to copy.</param>
        </member>
        <member name="T:OfficeOpenXml.Export.ToCollection.ToCollectionRow">
            <summary>
            An object that represents a row in the callback function in <see cref="M:OfficeOpenXml.ExcelRangeBase.ToCollectionWithMappings``1(System.Func{OfficeOpenXml.Export.ToCollection.ToCollectionRow,``0},OfficeOpenXml.ToCollectionRangeOptions)"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToCollection.ToCollectionRow.Headers">
            <summary>
            Headers used to access cell values.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToCollection.ToCollectionRow._cellValues">
            <summary>
            The rows values
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToCollection.ToCollectionRow.Item(System.Int32)">
            <summary>
            Returns the value of the row at the column index
            </summary>
            <param name="index">the column index</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Export.ToCollection.ToCollectionRow.Item(System.String)">
            <summary>
            Returns the value of the row at the column index
            </summary>
            <param name="columnName">the column index</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Export.ToCollection.ToCollectionRow.GetValue``1(System.Int32)">
            <summary>
            Returns the typed value of the cell at the column index within the row of the range.
            </summary>
            <typeparam name="T">The type to convert to</typeparam>
            <param name="index">The column index</param>
            <returns>The value</returns>
            <exception cref="T:OfficeOpenXml.Export.ToCollection.Exceptions.EPPlusDataTypeConvertionException">Returned if the data type conversion fails and <see cref="P:OfficeOpenXml.ToCollectionOptions.ConversionFailureStrategy"/> is set to Exception</exception>
        </member>
        <member name="M:OfficeOpenXml.Export.ToCollection.ToCollectionRow.GetValue``1(System.String)">
            <summary>
            Returns the typed value of the cell at the column index within the row of the range.
            </summary>
            <typeparam name="T">The type to convert to</typeparam>
            <param name="columnName">The column name</param>
            <returns>The value</returns>
            <exception cref="T:OfficeOpenXml.Export.ToCollection.Exceptions.EPPlusDataTypeConvertionException">Returned if the data type conversion fails and <see cref="P:OfficeOpenXml.ToCollectionOptions.ConversionFailureStrategy"/> is set to Exception</exception>
        </member>
        <member name="M:OfficeOpenXml.Export.ToCollection.ToCollectionRow.GetText(System.Int32)">
            <summary>
            Returns formatted value of the cell at the column index within the row of the range.
            </summary>
            <param name="index">The column index</param>
            <returns>The formatted value</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.ToCollection.ToCollectionRow.GetText(System.String)">
            <summary>
            Returns formatted value of the cell at the column index within the row of the range.
            </summary>
            <param name="columnName">The column name</param>
            <returns>The formatted value</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.ToCollection.ToCollectionRow.Automap``1(``0)">
            <summary>
            Maps properties on the item to values matching the column header with the property name or attibutes without white spaces.
            The attributes that can be used are: EpplusTableColumnAttributeBase.Header, DescriptionAttribute.Description or DisplayNameAttribute.Name.
            </summary>
            <typeparam name="T">The type used, must be a class</typeparam>
            <param name="item">The item to set the values on.</param>
        </member>
        <member name="T:OfficeOpenXml.Export.ToCollection.ToCollectionConversionFailureStrategy">
            <summary>
            How conversion failures should be handled when mapping properties in the ToCollection method.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.ToCollection.ToCollectionConversionFailureStrategy.Exception">
            <summary>
            Throw an Exception if the conversion fails. Blank values will return the default value for the type. An <see cref="T:OfficeOpenXml.Export.ToCollection.Exceptions.EPPlusDataTypeConvertionException"/> will be thrown on any datatype conversion failure when mapping properties.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.ToCollection.ToCollectionConversionFailureStrategy.SetDefaultValue">
            <summary>
            Set the default value for the property.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.ToDataTable.DataColumnMapping">
            <summary>
            Class used to map columns in the <see cref="M:OfficeOpenXml.ExcelRangeBase.ToDataTable(OfficeOpenXml.Export.ToDataTable.ToDataTableOptions,System.Data.DataTable)"/> method
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.DataColumn">
            <summary>
            The <see cref="T:System.Data.DataColumn"/> used for the mapping
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.ZeroBasedColumnIndexInRange">
            <summary>
            Zero based index of the mappings column in the range
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.DataColumnName">
            <summary>
            Name of the data column, corresponds to <see cref="P:System.Data.DataColumn.ColumnName"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.ColumnDataType">
            <summary>
            <see cref="T:System.Type">Type</see> of the column, corresponds to <see cref="P:System.Data.DataColumn.DataType"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.AllowNull">
            <summary>
            Indicates whether empty cell values should be allowed. Corresponds to <see cref="P:System.Data.DataColumn.AllowDBNull"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.TransformCellValue">
            <summary>
            A function which allows casting of an <see cref="T:System.Object"/> before it is written to the <see cref="T:System.Data.DataTable"/>
            </summary>
            <example>
            <code>
            var options = ToDataTableOptions.Create(o =>
            {
                // the last argument is a lambda function that will call the read value's ToString method
                // and this string will be written to the DataTable
                o.Mappings.Add(0, "Id", typeof(string), true, c => "Id: " + c.ToString());
            });
            </code>
            </example>
        </member>
        <member name="T:OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection">
            <summary>
            A collection of <see cref="T:OfficeOpenXml.Export.ToDataTable.DataColumnMapping"/>s that will be used when reading data from the source range.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.Data.DataColumn)">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.Export.ToDataTable.DataColumnMapping"/>
            </summary>
            <param name="zeroBasedIndexInRange">Zero based index of the column in the source range</param>
            <param name="dataColumn">The destination <see cref="T:System.Data.DataColumn"/> in the <see cref="T:System.Data.DataTable"/></param>
        </member>
        <member name="M:OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.Data.DataColumn,System.Func{System.Object,System.Object})">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.Export.ToDataTable.DataColumnMapping"/>
            </summary>
            <param name="zeroBasedIndexInRange">Zero based index of the column in the source range</param>
            <param name="dataColumn">The destination <see cref="T:System.Data.DataColumn"/> in the <see cref="T:System.Data.DataTable"/></param>
            <param name="transformCellValueFunc">A function that casts/transforms the value before it is written to the <see cref="T:System.Data.DataTable"/></param>
            <seealso cref="P:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.TransformCellValue"/>
        </member>
        <member name="M:OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String)">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.Export.ToDataTable.DataColumnMapping"/>
            </summary>
            <param name="zeroBasedIndexInRange">Zero based index of the column in the source range</param>
            <param name="columnName">Name of the <see cref="T:System.Data.DataColumn"/> in the <see cref="T:System.Data.DataTable"/></param>
        </member>
        <member name="M:OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String,System.Boolean)">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.Export.ToDataTable.DataColumnMapping"/>
            </summary>
            <param name="zeroBasedIndexInRange">Zero based index of the column in the source range</param>
            <param name="columnName">Name of the <see cref="T:System.Data.DataColumn"/> in the <see cref="T:System.Data.DataTable"/></param>
            <param name="allowNull">Indicates if values read from the source range can be null</param>
        </member>
        <member name="M:OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String,System.Func{System.Object,System.Object})">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.Export.ToDataTable.DataColumnMapping"/>
            </summary>
            <param name="zeroBasedIndexInRange">Zero based index of the column in the source range</param>
            <param name="columnName">Name of the <see cref="T:System.Data.DataColumn"/> in the <see cref="T:System.Data.DataTable"/></param>
            <param name="transformCellValueFunc">A function that casts/transforms the value before it is written to the <see cref="T:System.Data.DataTable"/></param>
        </member>
        <member name="M:OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String,System.Type)">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.Export.ToDataTable.DataColumnMapping"/>
            </summary>
            <param name="zeroBasedIndexInRange">Zero based index of the column in the source range</param>
            <param name="columnName">Name of the <see cref="T:System.Data.DataColumn"/> in the <see cref="T:System.Data.DataTable"/></param>
            <param name="columnDataType"><see cref="T:System.Type"/> of the <see cref="T:System.Data.DataColumn"/></param>
        </member>
        <member name="M:OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String,System.Type,System.Boolean)">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.Export.ToDataTable.DataColumnMapping"/>
            </summary>
            <param name="zeroBasedIndexInRange">Zero based index of the column in the source range</param>
            <param name="columnName">Name of the <see cref="T:System.Data.DataColumn"/> in the <see cref="T:System.Data.DataTable"/></param>
            <param name="columnDataType"><see cref="T:System.Type"/> of the <see cref="T:System.Data.DataColumn"/></param>
            <param name="allowNull">Indicates if values read from the source range can be null</param>
        </member>
        <member name="M:OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String,System.Type,System.Boolean,System.Func{System.Object,System.Object})">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.Export.ToDataTable.DataColumnMapping"/>
            </summary>
            <param name="zeroBasedIndexInRange">Zero based index of the column in the source range</param>
            <param name="columnName">Name of the <see cref="T:System.Data.DataColumn"/> in the <see cref="T:System.Data.DataTable"/></param>
            <param name="columnDataType"><see cref="T:System.Type"/> of the <see cref="T:System.Data.DataColumn"/></param>
            <param name="allowNull">Indicates if values read from the source range can be null</param>
            <param name="transformCellValueFunc">A function that casts/transforms the value before it is written to the <see cref="T:System.Data.DataTable"/></param>
            <seealso cref="P:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.TransformCellValue"/>
        </member>
        <member name="T:OfficeOpenXml.Export.ToDataTable.EmptyRowsStrategy">
            <summary>
            Defines how empty rows (all cells are blank) in the source range should be handled.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.ToDataTable.EmptyRowsStrategy.Ignore">
            <summary>
            Ignore the empty row and continue with next
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.ToDataTable.EmptyRowsStrategy.StopAtFirst">
            <summary>
            Stop reading when the first empty row occurs
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.ToDataTable.ExcelErrorParsingStrategy">
            <summary>
            Defines how cells with errors in the source range should be handled.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.ToDataTable.ExcelErrorParsingStrategy.HandleExcelErrorsAsBlankCells">
            <summary>
            Excel Errors in cells will be handles as blank cells
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.ToDataTable.ExcelErrorParsingStrategy.ThrowException">
            <summary>
            An exception will be thrown when an error occurs in a cell
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.ToDataTable.ExcelErrorParsingStrategy.IgnoreRowWithErrors">
            <summary>
            If an error is detected, the entire row will be ignored
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.ToDataTable.NameParsingStrategy">
            <summary>
            Defines options for how to build a valid property or DataTable column name out of a string
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.ToDataTable.NameParsingStrategy.Preserve">
            <summary>
            Preserve the input string as it is
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.ToDataTable.NameParsingStrategy.SpaceToUnderscore">
            <summary>
            Replace any spaces with underscore
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.ToDataTable.NameParsingStrategy.RemoveSpace">
            <summary>
            Remove all spaces
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions">
            <summary>
            This class contains options for the ToDataTable method of <see cref="T:OfficeOpenXml.ExcelRangeBase"/>.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.Default">
            <summary>
            Returns an instance of ToDataTableOptions with default values set. <see cref="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.ColumnNameParsingStrategy"/> is set to <see cref="F:OfficeOpenXml.Export.ToDataTable.NameParsingStrategy.Preserve"/>, <see cref="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.PredefinedMappingsOnly"/> is set to false, <see cref="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.FirstRowIsColumnNames"/> is set to true
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.Create">
            <summary>
            Creates an instance of ToDataTableOptions with default values set.
            </summary>
            <returns></returns>
            <seealso cref="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.Default"/>
        </member>
        <member name="M:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.Create(System.Action{OfficeOpenXml.Export.ToDataTable.ToDataTableOptions})">
            <summary>
            Creates an instance of <see cref="T:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions"/>. Use the <paramref name="configHandler"/> parameter to set the values on it.
            </summary>
            <param name="configHandler">Use this to configure the <see cref="T:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions"/> instance in a lambda expression body.</param>
            <returns>The configured <see cref="T:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions"/></returns>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.FirstRowIsColumnNames">
            <summary>
            If true, the first row of the range will be used to collect the column names of the <see cref="T:System.Data.DataTable"/>. The column names will be set according to the <see cref="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.ColumnNameParsingStrategy"></see> used.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.ColumnNameParsingStrategy">
            <summary>
            <see cref="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.ColumnNameParsingStrategy">NameParsingStrategy</see> to use when parsing the first row of the range to column names
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.SkipNumberOfRowsStart">
            <summary>
            Number of rows that will be skipped from the start (top) of the range. If <see cref="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.FirstRowIsColumnNames"/> is true, this will be applied after the first row (column names) has been read.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.SkipNumberOfRowsEnd">
            <summary>
            Number of rows that will be skipped from the end (bottom) of the range.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.ExcelErrorParsingStrategy">
            <summary>
            Sets how Excel error values are handled when detected.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.EmptyRowStrategy">
            <summary>
            Sets how empty rows in the range are handled when detected
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.Mappings">
            <summary>
            Mappings that specifies columns from the range and how these should be mapped to the <see cref="T:System.Data.DataTable"/>
            </summary>
            <seealso cref="T:OfficeOpenXml.Export.ToDataTable.DataColumnMapping"/>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.PredefinedMappingsOnly">
            <summary>
            If true, only columns that are specified in the <see cref="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.Mappings"></see> collection are included in the DataTable.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.ColumnNamePrefix">
            <summary>
            If no column names are specified, this prefix will be used followed by a number
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.DataTableName">
            <summary>
            Name of the data table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.DataTableNamespace">
            <summary>
            Namespace of the data table
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.SetPrimaryKey(System.String[])">
            <summary>
            Sets the primary key of the data table. 
            </summary>
            <param name="columnNames">The name or names of one or more column in the <see cref="T:System.Data.DataTable"/> that constitutes the primary key</param>
        </member>
        <member name="M:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.SetPrimaryKey(System.Int32[])">
            <summary>
            Sets the primary key of the data table. 
            </summary>
            <param name="zeroBasedRangeIndexes">The index or indexes of one or more column in the range that builds up the primary key of the <see cref="T:System.Data.DataTable"/></param>
        </member>
        <member name="T:OfficeOpenXml.eHtmlRangeTableInclude">
            <summary>
            How to handle a range when it is a table.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eHtmlRangeTableInclude.Exclude">
            <summary>
            Do not set the table style css classes on the html table or create the table style css.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eHtmlRangeTableInclude.ClassNamesOnly">
            <summary>
            Set the css table style classes on the table, but do not include the table classes in the css.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eHtmlRangeTableInclude.Include">
            <summary>
            Include the css table style for the table and set the corresponding classes on the html table.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eDataTypeOn">
            <summary>
            How to set the data type when exporting json.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDataTypeOn.NoDataTypes">
            <summary>
            Do not set the data type.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDataTypeOn.OnColumn">
            <summary>
            Set the data type on the column level.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDataTypeOn.OnCell">
            <summary>
            Set the data type on each cell.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.JsonExportSettings">
            <summary>
            Base class for settings used when exporting a range or a table as Json.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonExportSettings.Minify">
            <summary>
            If the json is minified when written.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonExportSettings.RootElementName">
            <summary>
            The name of the root element
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonExportSettings.AddDataTypesOn">
            <summary>
            Set the dataType attribute depending on the data. The attribute can be set per column or per cell.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonExportSettings.ColumnsElementName">
            <summary>
            The name of the element containing the columns data
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonExportSettings.RowsElementName">
            <summary>
            The name of the element containg the rows data
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonExportSettings.CellsElementName">
            <summary>
            The name of the element containg the cells data
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonExportSettings.WriteHyperlinks">
            <summary>
            Write the uri attribute if an hyperlink exists in a cell
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonExportSettings.WriteComments">
            <summary>
            Write the comment attribute if an comment exists in a cell.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonExportSettings.Encoding">
            <summary>
            Encoding for the output
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonExportSettings.Culture">
            <summary>
            The CulturInfo used when formatting values.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.JsonRangeExportSettings">
            <summary>
            Settings used when exporting a range to Json
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonRangeExportSettings.RootElementName">
            <summary>
            The name of the root element
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonRangeExportSettings.FirstRowIsHeader">
            <summary>
            If the first row in the range is the column headers.
            The columns array element will be added and the headers will be set using the Name attribute.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonRangeExportSettings.AddDataTypesOn">
            <summary>
            Set the dataType attribute depending on the data. The attribute can be set per column or per cell.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.JsonTableExportSettings">
            <summary>
            Settings used when exporting a table to Json
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonTableExportSettings.RootElementName">
            <summary>
            The name of the root element
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonTableExportSettings.AddDataTypesOn">
            <summary>
            Set the dataType attribute depending on the data. The attribute can be set per column or per cell.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonTableExportSettings.WriteColumnsElement">
            <summary>
            If true the the column array element is written to the output
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonTableExportSettings.WriteNameAttribute">
            <summary>
            If true the table Name attribute is written to the output.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonTableExportSettings.WriteShowHeaderAttribute">
            <summary>
            If true the ShowHeader attribute is written to the output.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonTableExportSettings.WriteShowTotalsAttribute">
            <summary>
            If true the ShowTotals attribute is written to the output.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ToCollectionRangeOptions">
            <summary>
            Settings for the ToCollection method.
            <see cref="M:OfficeOpenXml.ExcelRangeBase.ToCollection``1"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ToCollectionRangeOptions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ToCollectionRangeOptions.HeaderRow">
            <summary>
            0-based index of the Header row in the range, if applicable. 
            A null value means there is no header row.
            See also: <seealso cref="M:OfficeOpenXml.ToCollectionOptions.SetCustomHeaders(System.String[])"/>
            <seealso cref="P:OfficeOpenXml.ToCollectionRangeOptions.DataStartRow"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ToCollectionRangeOptions.DataStartRow">
            <summary>
            The data start row in the range.
            A null value means the data rows starts direcly after the header row.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ToCollectionRangeOptions.Default">
            <summary>
            A <see cref="T:OfficeOpenXml.ToCollectionRangeOptions"/> with default values.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ToCollectionOptions">
            <summary>
            Base class for settings to the ToCollection method.
            <see cref="M:OfficeOpenXml.ExcelRangeBase.ToCollection``1"/>
            <see cref="!:ExcelTable.ToCollection&lt;T&gt;()"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ToCollectionOptions.Headers">
            <summary>
            An array of column headers. If set, used instead of the header row. 
            <see cref="M:OfficeOpenXml.ToCollectionOptions.SetCustomHeaders(System.String[])"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ToCollectionOptions.SetCustomHeaders(System.String[])">
            <summary>
            Sets custom headers.  If set, used instead of the header row. 
            </summary>
            <param name="header"></param>
        </member>
        <member name="P:OfficeOpenXml.ToCollectionOptions.ConversionFailureStrategy">
            <summary>
            How conversion failures should be handled when mapping properties.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ToCollectionTableOptions">
            <summary>
            Settings for the ToCollection method.
            <see cref="!:ExcelTable.ToCollection&lt;T&gt;()"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ToCollectionTableOptions.Default">
            <summary>
            A <see cref="T:OfficeOpenXml.ToCollectionTableOptions"/> with default values.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExternalLinksHandler.BreakAllFormulaLinks(OfficeOpenXml.ExcelWorkbook)">
            <summary>
            Clears all formulas leaving the value only for formulas containing external links
            </summary>
            <param name="wb"></param>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.eDdeValueType">
            <summary>
            The type of DDE value.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExternalReferences.eDdeValueType.Boolean">
            <summary>
            The value is a boolean.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExternalReferences.eDdeValueType.Error">
            <summary>
            The value is an error.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExternalReferences.eDdeValueType.Number">
            <summary>
            The value is a real number.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExternalReferences.eDdeValueType.Nil">
            <summary>
            The value is nil.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExternalReferences.eDdeValueType.String">
            <summary>
            The value is a string.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.eExternalLinkType">
            <summary>
            The type of external link
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExternalReferences.eExternalLinkType.ExternalWorkbook">
            <summary>
            The external link is of type <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook" />
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExternalReferences.eExternalLinkType.DdeLink">
            <summary>
            The external link is of type <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalDdeLink" />
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExternalReferences.eExternalLinkType.OleLink">
            <summary>
            The external link is of type <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalOleLink" />
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.eExternalWorkbookCacheStatus">
            <summary>
            The status of an external workbooks cache.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExternalReferences.eExternalWorkbookCacheStatus.NotUpdated">
            <summary>
            Cache has not been updated. Saving an external reference with this status will update the cache on save.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExternalReferences.eExternalWorkbookCacheStatus.LoadedFromPackage">
            <summary>
            Cache has been loaded from the external reference cache within the package.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExternalReferences.eExternalWorkbookCacheStatus.Failed">
            <summary>
            Update of the cache failed. Any loaded data from the package is still available. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExternalReferences.eExternalWorkbookCacheStatus.Updated">
            <summary>
            The cache has been successfully updated
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection">
            <summary>
            A collection of <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalCellValue" />
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Item(System.String)">
            <summary>
            An indexer to access the the external cell values 
            </summary>
            <param name="cellAddress">The cell address</param>
            <returns>The <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalCellValue"/></returns>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Item(System.Int32,System.Int32)">
            <summary>
            An indexer to access the the external cell values 
            </summary>
            <param name="row">The row of the cell to get the value from</param>
            <param name="column">The column of the cell to get the value from</param>
            <returns>The <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalCellValue"/></returns>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Current">
            <summary>
            The current value of the <see cref="T:System.Collections.IEnumerable"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.System#Collections#IEnumerator#Current">
            <summary>
            The current value of the <see cref="T:System.Collections.IEnumerable"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Dispose">
            <summary>
            Disposed the object
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.GetEnumerator">
            <summary>
            Get the enumerator for this collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.MoveNext">
            <summary>
            Move to the next item in the collection
            </summary>
            <returns>true if more items exists</returns>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Reset">
            <summary>
            Resets the enumeration
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator for this collection
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalCellValue">
            <summary>
            Represents a cell value of an external worksheets cell.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalCellValue.Address">
            <summary>
            The address of the cell
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalCellValue.Row">
            <summary>
            The row of the cell
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalCellValue.Column">
            <summary>
            The column of the cell
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalCellValue.Value">
            <summary>
            The value of the cell
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalCellValue.MetaDataReference">
            <summary>
            A reference index to meta data for the cell
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalDdeItem">
            <summary>
            Represents a DDE link. This class is read-only.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDdeItem.Name">
            <summary>
            The name of the DDE link item
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDdeItem.Advise">
            <summary>
            If the linked object should notify the application when the external data changes.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDdeItem.PreferPicture">
            <summary>
            If the linked object is represented by an image.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDdeItem.Ole">
            <summary>
            If this is item uses an ole technology.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDdeItem.Values">
            <summary>
            A collection of DDE values
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalDdeItemCollection">
            <summary>
            A collection of <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalDdeItem" />
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalDdeLink">
            <summary>
            Represents an external DDE link.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDdeLink.ExternalLinkType">
            <summary>
            The type of external link
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDdeLink.DdeService">
            <summary>
            Service name for the DDE connection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDdeLink.DdeTopic">
            <summary>
            Topic for DDE server. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDdeLink.DdeItems">
            <summary>
            A collection of <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalDdeItem" />
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalDdeValue">
            <summary>
            Represents a value for a DDE item.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDdeValue.DdeValueType">
            <summary>
            The data type of the value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDdeValue.Value">
            <summary>
            The value of the item
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalDdeValueCollection">
            <summary>
            A collection of <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalDdeValue" />
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDdeValueCollection.Rows">
            <summary>
            The number of rows returned by the server for this dde item.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDdeValueCollection.Columns">
            <summary>
            The number of columns returned by the server for this dde item.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalDefinedName">
            <summary>
            Represents a defined name in an external workbook
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDefinedName.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDefinedName.RefersTo">
            <summary>
            The address that the defined name referes to
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDefinedName.SheetId">
            <summary>
            The sheet id
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalDefinedName.ToString">
            <summary>
            The string representation of the name
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalLink">
            <summary>
            Base class for external references
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalLink.ExternalLinkType">
            <summary>
            The type of external link
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalLink.As">
            <summary>
            Provides an easy way to type cast the object to it's top level class
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalLink.ToString">
            <summary>
            Returns the string representation of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalLink.Index">
            <summary>
            The index of the external link. The index can be used in formulas between brackets to reference this link.
            </summary>
            <example>
            <code>worksheet.Cells["A1"].Formula="'[1]Sheet1'!A1"</code>
            </example>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalLink.ErrorLog">
            <summary>
            A list of errors that occured during load or update of the external workbook.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalLinkAsType">
            <summary>
            Provides a simple way to type cast <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalLink"/> object top its top level class.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalLinkAsType.Type``1">
            <summary>
            Converts the external link to it's top level .
            </summary>
            <typeparam name="T">The type of external link. T must be inherited from ExcelExternalLink</typeparam>
            <returns>The external link as type T</returns>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalLinkAsType.ExternalWorkbook">
            <summary>
            Return the external link as an external workbook. If the external link is not of type <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook" />, null is returned
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalLinkAsType.DdeLink">
            <summary>
            Return the external link as a dde link. If the external link is not of type <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalDdeLink"/>, null is returned
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalLinkAsType.OleLink">
            <summary>
            Return the external link as a ole link. If the external link is not of type <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalOleLink"/>, null is returned
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalLinksCollection">
            <summary>
            A collection of external links referenced by the workbook.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalLinksCollection.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalLinksCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalLinksCollection.Count">
            <summary>
            Gets the number of items in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalLinksCollection.Item(System.Int32)">
            <summary>
            The indexer for the collection
            </summary>
            <param name="index">The index</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalLinksCollection.AddExternalWorkbook(System.IO.FileInfo)">
            <summary>
            Adds an external reference to another workbook. 
            </summary>
            <param name="file">The location of the external workbook. The external workbook must of type .xlsx, .xlsm or xlst</param>
            <returns>The <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook"/> object</returns>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalLinksCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the external link at the zero-based index. If the external reference is an workbook any formula links are broken.
            </summary>
            <param name="index">The zero-based index</param>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalLinksCollection.Remove(OfficeOpenXml.ExternalReferences.ExcelExternalLink)">
            <summary>
            Removes the external link from the package.If the external reference is an workbook any formula links are broken.
            </summary>
            <param name="externalLink"></param>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalLinksCollection.Clear">
            <summary>
            Clear all external links and break any formula links.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalLinksCollection.Directories">
            <summary>
            A list of directories to look for the external files that cannot be found on the path of the uri.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalLinksCollection.LoadWorkbooks">
            <summary>
            Will load all external workbooks that can be accessed via the file system.
            External workbook referenced via other protocols must be loaded manually.
            </summary>
            <returns>Returns false if any workbook fails to loaded otherwise true. </returns>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalLinksCollection.UpdateCaches">
            <summary>
            Updates the value cache for any external workbook in the collection. The link must be an workbook and of type xlsx, xlsm or xlst.
            </summary>
            <returns>True if all updates succeeded, otherwise false. Any errors can be found on the External links. <seealso cref="P:OfficeOpenXml.ExternalReferences.ExcelExternalLink.ErrorLog"/></returns>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalNamedItemCollection`1">
            <summary>
            A collection of cached defined names in an external workbook
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalNamedItemCollection`1.Item(System.String)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="name">The name if the defined name</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalNamedItemCollection`1.ContainsKey(System.String)">
            <summary>
            If the name exists in the collection
            </summary>
            <param name="name">The name. Case insensitive</param>
            <returns>true if the name exists in the collection, otherwise false</returns>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalOleItem">
            <summary>
            An OLE item in an external OLE link. Readonly.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalOleItem.Advise">
            <summary>
            If the linked object should notify the application when the external data changes.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalOleItem.PreferPicture">
            <summary>
            If the linked object is represented by an image.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalOleItem.Icon">
            <summary>
            If the linked object is represented by an icon
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalOleItem.Name">
            <summary>
            The name of the OLE link item
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalOleItemsCollection">
            <summary>
            A collection of <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalOleItem" />
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalOleLink">
            <summary>
            Represents an external DDE link.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalOleLink.ExternalLinkType">
            <summary>
            The type of external link.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalOleLink.OleItems">
            <summary>
            A collection of OLE items
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalOleLink.ProgId">
            <summary>
            The id for the connection. This is the ProgID of the OLE object
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook">
            <summary>
            Represents an external workbook.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.ExternalLinkType">
            <summary>
            Sets the external link type
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.ExternalLinkUri">
            <summary>
            The Uri to the external workbook. This property will be set by the <see cref="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.File"/> property on save, if it has been set.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.File">
            <summary>
            If the external reference is a file in the filesystem
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.Package">
            <summary>
            A reference to the external package, it it has been loaded.
            <seealso cref="M:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.Load"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.Load">
            <summary>
            Tries to Loads the external package using the External Uri into the <see cref="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.Package"/> property
            </summary>
            <returns>True if the load succeeded, otherwise false. If false, see <see cref="P:OfficeOpenXml.ExternalReferences.ExcelExternalLink.ErrorLog"/></returns>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.Load(System.IO.FileInfo)">
            <summary>
            Tries to Loads the external package using the External Uri into the <see cref="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.Package"/> property
            </summary>
            <returns>True if the load succeeded, otherwise false. If false, see <see cref="P:OfficeOpenXml.ExternalReferences.ExcelExternalLink.ErrorLog"/></returns>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.Load(OfficeOpenXml.ExcelPackage)">
            <summary>
            Tries to Loads the external package using the External Uri into the <see cref="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.Package"/> property
            </summary>
            <returns>True if the load succeeded, otherwise false. If false, see <see cref="P:OfficeOpenXml.ExternalReferences.ExcelExternalLink.ErrorLog"/> and <see cref="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.CacheStatus"/> of each <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook"/></returns>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.IsPathRelative">
            <summary>
            If true, sets the path to the workbook as a relative path on <see cref="M:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.Load"/>, if the link is on the same drive.
            Otherwise set it as an absolute path. If set to false, the path will always be saved as an absolute path.
            If the file path is relative and the file can not be found, the file path will not be updated.
            <see cref="M:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.Load"/>
            <see cref="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.File"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.UpdateCache">
            <summary>
            Updates the external reference cache for the external workbook. To be used a <see cref="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.Package"/> must be loaded via the <see cref="M:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.Load"/> method.
            <seealso cref="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.CacheStatus"/>
            <seealso cref="P:OfficeOpenXml.ExternalReferences.ExcelExternalLink.ErrorLog"/>
            </summary>
            <returns>True if the update was successful otherwise false</returns>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.CacheStatus">
            <summary>
            The status of the cache. If the <see cref="M:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.UpdateCache" />method fails this status is set to <see cref="F:OfficeOpenXml.ExternalReferences.eExternalWorkbookCacheStatus.Failed" />
            If cache status is set to NotUpdated, the cache will be updated when the package is saved.
            <seealso cref="M:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.UpdateCache"/>
            <seealso cref="P:OfficeOpenXml.ExternalReferences.ExcelExternalLink.ErrorLog"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.ToString">
            <summary>
            String representation
            </summary>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.CachedNames">
            <summary>
            A collection of cached defined names in the external workbook
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.CachedWorksheets">
            <summary>
            A collection of cached worksheets in the external workbook
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalWorksheet">
            <summary>
            A representation of an external cached worksheet.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorksheet.SheetId">
            <summary>
            The sheet id
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorksheet.Name">
            <summary>
            The name of the worksheet.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorksheet.RefreshError">
            <summary>
            If errors have occured on the last update of the cached values.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorksheet.CachedNames">
            <summary>
            A collection of cached names for an external worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorksheet.CellValues">
            <summary>
            Cached cell values for the worksheet. Only cells referenced in the workbook are stored in the cache.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalWorksheet.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalWorksheetCollection">
            <summary>
            A collection of external worksheets
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorksheetCollection.Item(System.String)">
            <summary>
            The indexer to reference the external worksheet objects 
            </summary>
            <param name="name">The name of the worksheet</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.IExcelExternalNamedItem">
            <summary>
            An interface for an external object that contains a name
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.IExcelExternalNamedItem.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.eCalendarType">
            <summary>
            The calendar to be used.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eCalendarType.Gregorian">
            <summary>
            The Gregorian calendar
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eCalendarType.GregorianArabic">
            <summary>
            The Gregorian calendar, as defined in ISO 8601. Arabic. This calendar should be localized into the appropriate language.        
            /// </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eCalendarType.GregorianMeFrench">
            <summary>
            The Gregorian calendar, as defined in ISO 8601. Middle East French.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eCalendarType.GregorianUs">
            <summary>
             The Gregorian calendar, as defined in ISO 8601. English.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eCalendarType.GregorianXlitEnglish">
            <summary>
            The Gregorian calendar, as defined in ISO 8601. English strings in the corresponding Arabic characters. The Arabic transliteration of the English for the Gregoriancalendar.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eCalendarType.GregorianXlitFrench">
            <summary>
            The Gregorian calendar, as defined in ISO 8601. French strings in the corresponding Arabic characters. The Arabic transliteration of the French for the Gregoriancalendar.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eCalendarType.Hijri">
            <summary>
            The Hijri lunar calendar, as described by the Kingdom of Saudi Arabia, Ministry of Islamic Affairs, Endowments, Da‘wah and Guidance
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eCalendarType.Hebrew">
            <summary>
            The Hebrew lunar calendar, as described by the Gauss formula for Passover [Har'El, Zvi] and The Complete Restatement of Oral Law(Mishneh Torah).
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eCalendarType.Japan">
            <summary>
            The Japanese Emperor Era calendar, as described by Japanese Industrial Standard JIS X 0301.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eCalendarType.Korea">
            <summary>
            The Korean Tangun Era calendar, as described by Korean Law Enactment No. 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eCalendarType.None">
            <summary>
            No calendar
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eCalendarType.Taiwan">
            <summary>
            The Saka Era calendar, as described by the Calendar Reform Committee of India, as part of the Indian Ephemeris and Nautical Almanac
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eCalendarType.Thai">
            <summary>
            The Thai calendar, as defined by the Royal Decree of H.M. King Vajiravudh (Rama VI) in Royal Gazette B. E. 2456 (1913 A.D.) and by the decree of Prime Minister Phibunsongkhram (1941 A.D.) to start the year on the Gregorian January 1 and to map year zero to Gregorian year 543 B.C.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.eDateTimeGrouping">
            <summary>
            Date grouping for a filter
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDateTimeGrouping.Day">
            <summary>
            Group by day
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDateTimeGrouping.Hour">
            <summary>
            Group by hour
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDateTimeGrouping.Minute">
            <summary>
            Group by minute
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDateTimeGrouping.Month">
            <summary>
            Group by month
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDateTimeGrouping.Second">
            <summary>
            Group by second
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDateTimeGrouping.Year">
            <summary>
            Group by year
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.eDynamicFilterType">
            <summary>
            Dynamic filter types.
            A dynamic filter returns a result set which might vary due to a change in the data itself.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.AboveAverage">
            <summary>
            Shows values that are above average. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.BelowAverage">
            <summary>
            Shows values that are below average. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.LastMonth">
            <summary>
            Shows last month's dates.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.LastQuarter">
            <summary>
            Shows last calendar quarter's dates.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.LastWeek">
            <summary>
            Shows last week's dates, using Sunday as the first weekday.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.LastYear">
            <summary>
             Shows last year's dates.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.M1">
            <summary>
            Shows the dates that are in January, regardless of year.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.M2">
            <summary>
            Shows the dates that are in February, regardless of year. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.M3">
            <summary>
            Shows the dates that are in March, regardless of year.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.M4">
            <summary>
            Shows the dates that are in April, regardless of year.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.M5">
            <summary>
            Shows the dates that are in May, regardless of year.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.M6">
            <summary>
            Shows the dates that are in June, regardless of year.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.M7">
            <summary>
            Shows the dates that are in July, regardless of year.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.M8">
            <summary>
            Shows the dates that are in August, regardless of year.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.M9">
            <summary>
            Shows the dates that are in September, regardless of
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.M10">
            <summary>
            Shows the dates that are in October, regardless of year.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.M11">
            <summary>
            Shows the dates that are in November, regardless of year.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.M12">
            <summary>
            Shows the dates that are in December, regardless of year.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.NextMonth">
            <summary>
            Shows next month's dates.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.NextQuarter">
            <summary>
            Shows next calendar quarter's dates.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.NextWeek">
            <summary>
            Shows next week's dates, using Sunday as the firstweekday.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.NextYear">
            <summary>
            Shows next year's dates.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.Null">
            <summary>
            No filter
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.Q1">
            <summary>
            Shows the dates that are in the 1st calendar quarter, regardless of year. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.Q2">
            <summary>
            Shows the dates that are in the 2nd calendar quarter, regardless of year. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.Q3">
            <summary>
            Shows the dates that are in the 3rd calendar quarter, regardless of year. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.Q4">
            <summary>
            Shows the dates that are in the 4th calendar quarter, regardless of year.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.ThisMonth">
            <summary>
            Shows this month's dates.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.ThisQuarter">
            <summary>
            Shows this calendar quarter's dates.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.ThisWeek">
            <summary>
            Shows this week's dates, using Sunday as the first weekday.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.ThisYear">
            <summary>
            Shows this year's dates.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.Today">
            <summary>
            Shows today's dates.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.Tomorrow">
            <summary>
            Shows tomorrow's dates.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.YearToDate">
            <summary>
            Shows the dates between the beginning of the year and today, inclusive.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.Yesterday">
            <summary>
            Shows yesterday's dates.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.eFilterOperator">
            <summary>
            Operator used by the filter comparison
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eFilterOperator.Equal">
            <summary>
            Show results which are equal to the criteria
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eFilterOperator.GreaterThan">
            <summary>
            Show results which are greater than the criteria
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eFilterOperator.GreaterThanOrEqual">
            <summary>
            Show results which are greater than or equal to the criteria
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eFilterOperator.LessThan">
            <summary>
            Show results which are less than the criteria
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eFilterOperator.LessThanOrEqual">
            <summary>
            Show results which are less than or equal to the criteria
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eFilterOperator.NotEqual">
            <summary>
            Show results which are Not Equal to the criteria
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelAutoFilter">
            <summary>
            Represents an Autofilter for a worksheet or a filter of a table
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelAutoFilter.ApplyFilter(System.Boolean)">
            <summary>
            Applies the filter, hiding rows not matching the filter columns
            </summary>
            <param name="calculateRange">If true, any formula in the autofilter range will be calculated before the filter is applied.</param>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelAutoFilter.Address">
            <summary>
            The range of the autofilter
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelAutoFilter.Columns">
            <summary>
            The columns to filter
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelColorFilterColumn">
            <summary>
            Represents a column filtered by colors.
            
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelColorFilterColumn.CellColor">
            <summary>
            Indicating whether or not to filter by the cell's fill color. 
            True filters by cell fill. 
            False filter by the cell's font color.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelColorFilterColumn.DxfId">
            <summary>
            The differencial Style Id, referencing the DXF styles collection
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelCustomFilterColumn">
            <summary>
            Represents a custom filter column
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelCustomFilterColumn.IsNumericFilter">
            <summary>
            If true filter is numeric otherwise it's textual.
            If this property is not set, the value is set from the first value in column of the filtered range
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelCustomFilterColumn.And">
            <summary>
            Flag indicating whether the two criteria have an "and" relationship. true indicates "and", false indicates "or".
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelCustomFilterColumn.Filters">
            <summary>
            The filters to apply
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelFilterDateGroupItem">
            <summary>
            A date group for filters
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterDateGroupItem.#ctor(System.Int32)">
            <summary>
            Filter out the specified year
            </summary>
            <param name="year">The year</param>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterDateGroupItem.#ctor(System.Int32,System.Int32)">
            <summary>
            Filter out the specified year and month
            </summary>
            <param name="year">The year</param>
            <param name="month">The month</param>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterDateGroupItem.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Filter out the specified year, month and day
            </summary>
            <param name="year">The year</param>
            <param name="month">The month</param>
            <param name="day">The day</param>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterDateGroupItem.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Filter out the specified year, month, day and hour
            </summary>
            <param name="year">The year</param>
            <param name="month">The month</param>
            <param name="day">The day</param>
            <param name="hour">The hour</param>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterDateGroupItem.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Filter out the specified year, month, day, hour and and minute
            </summary>
            <param name="year">The year</param>
            <param name="month">The month</param>
            <param name="day">The day</param>
            <param name="hour">The hour</param>
            <param name="minute">The minute</param>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterDateGroupItem.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Filter out the specified year, month, day, hour and and minute
            </summary>
            <param name="year">The year</param>
            <param name="month">The month</param>
            <param name="day">The day</param>
            <param name="hour">The hour</param>
            <param name="minute">The minute</param>
            <param name="second">The second</param>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterDateGroupItem.Grouping">
            <summary>
            The grouping. Is set depending on the selected constructor
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterDateGroupItem.Year">
            <summary>
            Year to filter on
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterDateGroupItem.Month">
            <summary>
            Month to filter on
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterDateGroupItem.Day">
            <summary>
            Day to filter on
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterDateGroupItem.Hour">
            <summary>
            Hour to filter on
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterDateGroupItem.Minute">
            <summary>
            Minute to filter on
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterDateGroupItem.Second">
            <summary>
            Second to filter on
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelDynamicFilterColumn">
            <summary>
            Various filters that are set depending on the filter <c>Type</c>
            <see cref="P:OfficeOpenXml.Filter.ExcelDynamicFilterColumn.Type"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelDynamicFilterColumn.Type">
            <summary>
            Type of filter
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelDynamicFilterColumn.Value">
            <summary>
            The value of the filter. Can be the Average or minimum value depending on the type
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelDynamicFilterColumn.MaxValue">
            <summary>
            The maximum value for for a daterange, for example ThisMonth
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelFilterCollectionBase`1">
            <summary>
            A collection of filters for a filter column
            </summary>
            <typeparam name="T">The filter type</typeparam>
        </member>
        <member name="F:OfficeOpenXml.Filter.ExcelFilterCollectionBase`1._list">
            <summary>
            A list of columns
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterCollectionBase`1.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterCollectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterCollectionBase`1.Item(System.Int32)">
            <summary>
            The indexer for the collection
            </summary>
            <param name="index">The index of the item</param>
            <returns>The item at the index.</returns>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterCollectionBase`1.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelFilterCollection`1">
            <summary>
            A collection of filters for a filter column
            </summary>
            <typeparam name="T">The filter type</typeparam>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterCollection`1.Add(`0)">
            <summary>
            Add a new filter item
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelFilterColumn">
            <summary>
            Base class for filter columns
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterColumn.GetFilterValue(System.String)">
            <summary>
            Gets the filter value
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterColumn.Position">
            <summary>
            Zero-based index indicating the AutoFilter column to which this filter information applies
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterColumn.HiddenButton">
            <summary>
            If true the AutoFilter button for this column is hidden.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterColumn.ShowButton">
            <summary>
            Should filtering interface elements on this cell be shown.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelFilterColumnCollection">
            <summary>
            A collection of filter columns for an autofilter of table in a worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterColumnCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterColumnCollection.Item(System.Int32)">
            <summary>
            Indexer of filtercolumns
            </summary>
            <param name="index">The column index starting from zero</param>
            <returns>A filter column</returns>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterColumnCollection.AddValueFilterColumn(System.Int32)">
            <summary>
            Adds a value filter for the specified column position
            </summary>
            <param name="position">The column position</param>
            <returns>The value filter</returns>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterColumnCollection.AddCustomFilterColumn(System.Int32)">
            <summary>
            Adds a custom filter for the specified column position
            </summary>
            <param name="position">The column position</param>
            <returns>The custom filter</returns>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterColumnCollection.AddColorFilterColumn(System.Int32)">
            <summary>
            Adds a color filter for the specified column position
            Note: EPPlus doesn't filter color filters when <c>ApplyFilter</c> is called.
            </summary>
            <param name="position">The column position</param>
            <returns>The color filter</returns>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterColumnCollection.AddIconFilterColumn(System.Int32)">
            <summary>
            Adds a icon filter for the specified column position
            Note: EPPlus doesn't filter icon filters when <c>ApplyFilter</c> is called.
            </summary>
            <param name="position">The column position</param>
            <returns>The color filter</returns>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterColumnCollection.AddTop10FilterColumn(System.Int32)">
            <summary>
            Adds a top10 filter for the specified column position
            </summary>
            <param name="position">The column position</param>
            <returns>The top 10 filter</returns>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterColumnCollection.AddDynamicFilterColumn(System.Int32)">
            <summary>
            Adds a dynamic filter for the specified column position
            </summary>
            <param name="position">The column position</param>
            <returns>The dynamic filter</returns>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterColumnCollection.GetEnumerator">
            <summary>
            Gets the enumerator of the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterColumnCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterColumnCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the filter column with the position from the collection
            </summary>
            <param name="position">The index of the column to remove</param>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterColumnCollection.Remove(OfficeOpenXml.Filter.ExcelFilterColumn)">
            <summary>
            Remove the filter column from the collection
            </summary>
            <param name="column">The column</param>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelFilterCustomItem">
            <summary>
            A custom filter item
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterCustomItem.#ctor(System.String,OfficeOpenXml.Filter.eFilterOperator)">
            <summary>
            Create a Custom filter.
            </summary>
            <param name="value">The value to filter by. 
            If the data is text wildcard can be used. 
            Asterisk (*) for any combination of characters. 
            Question mark (?) for any single charcter
            If the data is numeric, use dot (.) for decimal.</param>
            <param name="filterOperator">The operator to use</param>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterCustomItem.Operator">
            <summary>
            Operator used by the filter comparison
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelFilterItem">
            <summary>
            Base class for filter items
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelFilterValueItem">
            <summary>
            A filter item for a value filter
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterValueItem.#ctor(System.String)">
            <summary>
            Inizialize the filter item
            </summary>
            <param name="value">The value to be filtered.</param>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterValueItem.Value">
            <summary>
            A value to be filtered.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelIconFilterColumn">
            <summary>
            A filter column filtered by icons
            </summary>
            <remarks>Note that EPPlus does not filter icon columns</remarks>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelIconFilterColumn.IconId">
            <summary>
            The icon Id within the icon set
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelIconFilterColumn.IconSet">
            <summary>
            The Iconset to filter by
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelTop10FilterColumn">
            <summary>
            A filter column filtered by the top or botton values of an range
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelTop10FilterColumn.FilterValue">
            <summary>
            The filter value to relate to
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelTop10FilterColumn.Percent">
            <summary>
            If the filter value is an percentage
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelTop10FilterColumn.Top">
            <summary>
            True is top value. False is bottom values.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelTop10FilterColumn.Value">
            <summary>
            The value to filter on
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelValueFilterCollection">
            <summary>
            A collection of value filters
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelValueFilterCollection.Blank">
            <summary>
            Flag indicating whether to filter by blank
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelValueFilterCollection.CalendarTyp">
            <summary>
            The calendar to be used. To be implemented
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelValueFilterCollection.Add(OfficeOpenXml.Filter.ExcelFilterDateGroupItem)">
            <summary>
            Add a Date filter item. 
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelValueFilterCollection.Add(OfficeOpenXml.Filter.ExcelFilterValueItem)">
            <summary>
            Add a filter value that will be matched agains the ExcelRange.Text property
            </summary>
            <param name="item">The value</param>
            <returns>The filter value item</returns>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelValueFilterCollection.Add(System.String)">
            <summary>
            Add a filte